
stm32L432KC_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006874  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006a00  08006a00  00016a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a60  08006a60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a60  08006a60  00016a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a68  08006a68  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a68  08006a68  00016a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  2000000c  08006a7c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  08006a7c  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea24  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ecc  00000000  00000000  0002ea60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  00030930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  000315d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002387  00000000  00000000  00032178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000add2  00000000  00000000  000344ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c11b8  00000000  00000000  0003f2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00100489  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a4  00000000  00000000  00100504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080069e8 	.word	0x080069e8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080069e8 	.word	0x080069e8

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b972 	b.w	80004d8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	4688      	mov	r8, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14b      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021a:	428a      	cmp	r2, r1
 800021c:	4615      	mov	r5, r2
 800021e:	d967      	bls.n	80002f0 <__udivmoddi4+0xe4>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0720 	rsb	r7, r2, #32
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	fa20 f707 	lsr.w	r7, r0, r7
 8000232:	4095      	lsls	r5, r2
 8000234:	ea47 0803 	orr.w	r8, r7, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbb8 f7fe 	udiv	r7, r8, lr
 8000244:	fa1f fc85 	uxth.w	ip, r5
 8000248:	fb0e 8817 	mls	r8, lr, r7, r8
 800024c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000250:	fb07 f10c 	mul.w	r1, r7, ip
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18eb      	adds	r3, r5, r3
 800025a:	f107 30ff 	add.w	r0, r7, #4294967295
 800025e:	f080 811b 	bcs.w	8000498 <__udivmoddi4+0x28c>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8118 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000268:	3f02      	subs	r7, #2
 800026a:	442b      	add	r3, r5
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0fe 	udiv	r0, r3, lr
 8000274:	fb0e 3310 	mls	r3, lr, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000280:	45a4      	cmp	ip, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	192c      	adds	r4, r5, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x290>
 800028e:	45a4      	cmp	ip, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x290>
 8000294:	3802      	subs	r0, #2
 8000296:	442c      	add	r4, r5
 8000298:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800029c:	eba4 040c 	sub.w	r4, r4, ip
 80002a0:	2700      	movs	r7, #0
 80002a2:	b11e      	cbz	r6, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c6 4300 	strd	r4, r3, [r6]
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xbe>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80eb 	beq.w	8000492 <__udivmoddi4+0x286>
 80002bc:	2700      	movs	r7, #0
 80002be:	e9c6 0100 	strd	r0, r1, [r6]
 80002c2:	4638      	mov	r0, r7
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f783 	clz	r7, r3
 80002ce:	2f00      	cmp	r7, #0
 80002d0:	d147      	bne.n	8000362 <__udivmoddi4+0x156>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd0>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2c4>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa0>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa0>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xe8>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 808f 	bne.w	800041c <__udivmoddi4+0x210>
 80002fe:	1b49      	subs	r1, r1, r5
 8000300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000304:	fa1f f885 	uxth.w	r8, r5
 8000308:	2701      	movs	r7, #1
 800030a:	fbb1 fcfe 	udiv	ip, r1, lr
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	fb0e 111c 	mls	r1, lr, ip, r1
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb08 f10c 	mul.w	r1, r8, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x124>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4299      	cmp	r1, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 800032e:	4684      	mov	ip, r0
 8000330:	1a59      	subs	r1, r3, r1
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb1 f0fe 	udiv	r0, r1, lr
 8000338:	fb0e 1410 	mls	r4, lr, r0, r1
 800033c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000340:	fb08 f800 	mul.w	r8, r8, r0
 8000344:	45a0      	cmp	r8, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x14c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x14a>
 8000350:	45a0      	cmp	r8, r4
 8000352:	f200 80b6 	bhi.w	80004c2 <__udivmoddi4+0x2b6>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 0408 	sub.w	r4, r4, r8
 800035c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000360:	e79f      	b.n	80002a2 <__udivmoddi4+0x96>
 8000362:	f1c7 0c20 	rsb	ip, r7, #32
 8000366:	40bb      	lsls	r3, r7
 8000368:	fa22 fe0c 	lsr.w	lr, r2, ip
 800036c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000370:	fa01 f407 	lsl.w	r4, r1, r7
 8000374:	fa20 f50c 	lsr.w	r5, r0, ip
 8000378:	fa21 f30c 	lsr.w	r3, r1, ip
 800037c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000380:	4325      	orrs	r5, r4
 8000382:	fbb3 f9f8 	udiv	r9, r3, r8
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	fb08 3319 	mls	r3, r8, r9, r3
 800038c:	fa1f fa8e 	uxth.w	sl, lr
 8000390:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000394:	fb09 f40a 	mul.w	r4, r9, sl
 8000398:	429c      	cmp	r4, r3
 800039a:	fa02 f207 	lsl.w	r2, r2, r7
 800039e:	fa00 f107 	lsl.w	r1, r0, r7
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1e 0303 	adds.w	r3, lr, r3
 80003a8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ac:	f080 8087 	bcs.w	80004be <__udivmoddi4+0x2b2>
 80003b0:	429c      	cmp	r4, r3
 80003b2:	f240 8084 	bls.w	80004be <__udivmoddi4+0x2b2>
 80003b6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ba:	4473      	add	r3, lr
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	b2ad      	uxth	r5, r5
 80003c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c4:	fb08 3310 	mls	r3, r8, r0, r3
 80003c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d0:	45a2      	cmp	sl, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1e 0404 	adds.w	r4, lr, r4
 80003d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003dc:	d26b      	bcs.n	80004b6 <__udivmoddi4+0x2aa>
 80003de:	45a2      	cmp	sl, r4
 80003e0:	d969      	bls.n	80004b6 <__udivmoddi4+0x2aa>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4474      	add	r4, lr
 80003e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ea:	fba0 8902 	umull	r8, r9, r0, r2
 80003ee:	eba4 040a 	sub.w	r4, r4, sl
 80003f2:	454c      	cmp	r4, r9
 80003f4:	46c2      	mov	sl, r8
 80003f6:	464b      	mov	r3, r9
 80003f8:	d354      	bcc.n	80004a4 <__udivmoddi4+0x298>
 80003fa:	d051      	beq.n	80004a0 <__udivmoddi4+0x294>
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d069      	beq.n	80004d4 <__udivmoddi4+0x2c8>
 8000400:	ebb1 050a 	subs.w	r5, r1, sl
 8000404:	eb64 0403 	sbc.w	r4, r4, r3
 8000408:	fa04 fc0c 	lsl.w	ip, r4, ip
 800040c:	40fd      	lsrs	r5, r7
 800040e:	40fc      	lsrs	r4, r7
 8000410:	ea4c 0505 	orr.w	r5, ip, r5
 8000414:	e9c6 5400 	strd	r5, r4, [r6]
 8000418:	2700      	movs	r7, #0
 800041a:	e747      	b.n	80002ac <__udivmoddi4+0xa0>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f703 	lsr.w	r7, r0, r3
 8000424:	4095      	lsls	r5, r2
 8000426:	fa01 f002 	lsl.w	r0, r1, r2
 800042a:	fa21 f303 	lsr.w	r3, r1, r3
 800042e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000432:	4338      	orrs	r0, r7
 8000434:	0c01      	lsrs	r1, r0, #16
 8000436:	fbb3 f7fe 	udiv	r7, r3, lr
 800043a:	fa1f f885 	uxth.w	r8, r5
 800043e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000442:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000446:	fb07 f308 	mul.w	r3, r7, r8
 800044a:	428b      	cmp	r3, r1
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x256>
 8000452:	1869      	adds	r1, r5, r1
 8000454:	f107 3cff 	add.w	ip, r7, #4294967295
 8000458:	d22f      	bcs.n	80004ba <__udivmoddi4+0x2ae>
 800045a:	428b      	cmp	r3, r1
 800045c:	d92d      	bls.n	80004ba <__udivmoddi4+0x2ae>
 800045e:	3f02      	subs	r7, #2
 8000460:	4429      	add	r1, r5
 8000462:	1acb      	subs	r3, r1, r3
 8000464:	b281      	uxth	r1, r0
 8000466:	fbb3 f0fe 	udiv	r0, r3, lr
 800046a:	fb0e 3310 	mls	r3, lr, r0, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb00 f308 	mul.w	r3, r0, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x27e>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000480:	d217      	bcs.n	80004b2 <__udivmoddi4+0x2a6>
 8000482:	428b      	cmp	r3, r1
 8000484:	d915      	bls.n	80004b2 <__udivmoddi4+0x2a6>
 8000486:	3802      	subs	r0, #2
 8000488:	4429      	add	r1, r5
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000490:	e73b      	b.n	800030a <__udivmoddi4+0xfe>
 8000492:	4637      	mov	r7, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e709      	b.n	80002ac <__udivmoddi4+0xa0>
 8000498:	4607      	mov	r7, r0
 800049a:	e6e7      	b.n	800026c <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x8c>
 80004a0:	4541      	cmp	r1, r8
 80004a2:	d2ab      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a8:	eb69 020e 	sbc.w	r2, r9, lr
 80004ac:	3801      	subs	r0, #1
 80004ae:	4613      	mov	r3, r2
 80004b0:	e7a4      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b2:	4660      	mov	r0, ip
 80004b4:	e7e9      	b.n	800048a <__udivmoddi4+0x27e>
 80004b6:	4618      	mov	r0, r3
 80004b8:	e795      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004ba:	4667      	mov	r7, ip
 80004bc:	e7d1      	b.n	8000462 <__udivmoddi4+0x256>
 80004be:	4681      	mov	r9, r0
 80004c0:	e77c      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c2:	3802      	subs	r0, #2
 80004c4:	442c      	add	r4, r5
 80004c6:	e747      	b.n	8000358 <__udivmoddi4+0x14c>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	442b      	add	r3, r5
 80004ce:	e72f      	b.n	8000330 <__udivmoddi4+0x124>
 80004d0:	4638      	mov	r0, r7
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xda>
 80004d4:	4637      	mov	r7, r6
 80004d6:	e6e9      	b.n	80002ac <__udivmoddi4+0xa0>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f003 fd22 	bl	8003f2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f8bd 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f9af 	bl	800084c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f97d 	bl	80007ec <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004f2:	f000 f93b 	bl	800076c <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  debug_print("Hello from dev board\r\n");
 80004f6:	4a58      	ldr	r2, [pc, #352]	; (8000658 <main+0x17c>)
 80004f8:	4b58      	ldr	r3, [pc, #352]	; (800065c <main+0x180>)
 80004fa:	4614      	mov	r4, r2
 80004fc:	461d      	mov	r5, r3
 80004fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000502:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000506:	6020      	str	r0, [r4, #0]
 8000508:	3404      	adds	r4, #4
 800050a:	8021      	strh	r1, [r4, #0]
 800050c:	3402      	adds	r4, #2
 800050e:	0c0b      	lsrs	r3, r1, #16
 8000510:	7023      	strb	r3, [r4, #0]
 8000512:	4851      	ldr	r0, [pc, #324]	; (8000658 <main+0x17c>)
 8000514:	f7ff fe5a 	bl	80001cc <strlen>
 8000518:	4603      	mov	r3, r0
 800051a:	b29a      	uxth	r2, r3
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
 8000520:	494d      	ldr	r1, [pc, #308]	; (8000658 <main+0x17c>)
 8000522:	484f      	ldr	r0, [pc, #316]	; (8000660 <main+0x184>)
 8000524:	f005 fda6 	bl	8006074 <HAL_UART_Transmit>
  ssd1306_Init();
 8000528:	f000 fa1a 	bl	8000960 <ssd1306_Init>
  ssd1306_Fill(White);
 800052c:	2001      	movs	r0, #1
 800052e:	f000 fa85 	bl	8000a3c <ssd1306_Fill>
			ssd1306_tetris_T_links_White(93,7);
			ssd1306_tetris_T_links_Black(95,7);
*/


	int down11 = -16;
 8000532:	f06f 030f 	mvn.w	r3, #15
 8000536:	60fb      	str	r3, [r7, #12]

			while(down11 < 60){
 8000538:	e021      	b.n	800057e <main+0xa2>
				ssd1306_tetris_L_Black(103, 47);
 800053a:	212f      	movs	r1, #47	; 0x2f
 800053c:	2067      	movs	r0, #103	; 0x67
 800053e:	f000 fc45 	bl	8000dcc <ssd1306_tetris_L_Black>
				ssd1306_tetris_R_Black(96,40);
 8000542:	2128      	movs	r1, #40	; 0x28
 8000544:	2060      	movs	r0, #96	; 0x60
 8000546:	f001 fac3 	bl	8001ad0 <ssd1306_tetris_R_Black>
				ssd1306_tetris_V_Black(112, 24);
 800054a:	2118      	movs	r1, #24
 800054c:	2070      	movs	r0, #112	; 0x70
 800054e:	f000 fffc 	bl	800154a <ssd1306_tetris_V_Black>
				ssd1306_tetris_Z_90_Black(111, -1);
 8000552:	f04f 31ff 	mov.w	r1, #4294967295
 8000556:	206f      	movs	r0, #111	; 0x6f
 8000558:	f001 fe2d 	bl	80021b6 <ssd1306_tetris_Z_90_Black>
				ssd1306_tetris_T_links_Black(95,7);
 800055c:	2107      	movs	r1, #7
 800055e:	205f      	movs	r0, #95	; 0x5f
 8000560:	f003 f912 	bl	8003788 <ssd1306_tetris_T_links_Black>


				ssd1306_tetris_T_White(down11-3, 20);
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	3b03      	subs	r3, #3
 8000568:	2114      	movs	r1, #20
 800056a:	4618      	mov	r0, r3
 800056c:	f002 fd71 	bl	8003052 <ssd1306_tetris_T_White>
				ssd1306_tetris_T_Black(down11, 20);
 8000570:	2114      	movs	r1, #20
 8000572:	68f8      	ldr	r0, [r7, #12]
 8000574:	f002 f9d2 	bl	800291c <ssd1306_tetris_T_Black>
				down11 = down11 + 3;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3303      	adds	r3, #3
 800057c:	60fb      	str	r3, [r7, #12]
			while(down11 < 60){
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b3b      	cmp	r3, #59	; 0x3b
 8000582:	ddda      	ble.n	800053a <main+0x5e>
			}
			ssd1306_tetris_T_White(60, 20);
 8000584:	2114      	movs	r1, #20
 8000586:	203c      	movs	r0, #60	; 0x3c
 8000588:	f002 fd63 	bl	8003052 <ssd1306_tetris_T_White>
	int side11 = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
			while(side11 < 18){
 8000590:	e023      	b.n	80005da <main+0xfe>
				ssd1306_tetris_L_Black(103, 47);
 8000592:	212f      	movs	r1, #47	; 0x2f
 8000594:	2067      	movs	r0, #103	; 0x67
 8000596:	f000 fc19 	bl	8000dcc <ssd1306_tetris_L_Black>
				ssd1306_tetris_R_Black(96,40);
 800059a:	2128      	movs	r1, #40	; 0x28
 800059c:	2060      	movs	r0, #96	; 0x60
 800059e:	f001 fa97 	bl	8001ad0 <ssd1306_tetris_R_Black>
				ssd1306_tetris_V_Black(112, 24);
 80005a2:	2118      	movs	r1, #24
 80005a4:	2070      	movs	r0, #112	; 0x70
 80005a6:	f000 ffd0 	bl	800154a <ssd1306_tetris_V_Black>
				ssd1306_tetris_Z_90_Black(111, -1);
 80005aa:	f04f 31ff 	mov.w	r1, #4294967295
 80005ae:	206f      	movs	r0, #111	; 0x6f
 80005b0:	f001 fe01 	bl	80021b6 <ssd1306_tetris_Z_90_Black>
				ssd1306_tetris_T_links_Black(95,7);
 80005b4:	2107      	movs	r1, #7
 80005b6:	205f      	movs	r0, #95	; 0x5f
 80005b8:	f003 f8e6 	bl	8003788 <ssd1306_tetris_T_links_Black>

				ssd1306_tetris_T_White(59, 20 + side11-2);
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	3312      	adds	r3, #18
 80005c0:	4619      	mov	r1, r3
 80005c2:	203b      	movs	r0, #59	; 0x3b
 80005c4:	f002 fd45 	bl	8003052 <ssd1306_tetris_T_White>
				ssd1306_tetris_T_Black(59, 20 + side11);
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	3314      	adds	r3, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	203b      	movs	r0, #59	; 0x3b
 80005d0:	f002 f9a4 	bl	800291c <ssd1306_tetris_T_Black>
				side11 = side11 + 2;
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	3302      	adds	r3, #2
 80005d8:	60bb      	str	r3, [r7, #8]
			while(side11 < 18){
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	2b11      	cmp	r3, #17
 80005de:	ddd8      	ble.n	8000592 <main+0xb6>
			}

			ssd1306_tetris_T_White(59, 36);
 80005e0:	2124      	movs	r1, #36	; 0x24
 80005e2:	203b      	movs	r0, #59	; 0x3b
 80005e4:	f002 fd35 	bl	8003052 <ssd1306_tetris_T_White>
	int down12 = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
		while(down12 < 20)
 80005ec:	e023      	b.n	8000636 <main+0x15a>
		{
			ssd1306_tetris_L_Black(103, 47);
 80005ee:	212f      	movs	r1, #47	; 0x2f
 80005f0:	2067      	movs	r0, #103	; 0x67
 80005f2:	f000 fbeb 	bl	8000dcc <ssd1306_tetris_L_Black>
			ssd1306_tetris_R_Black(96,40);
 80005f6:	2128      	movs	r1, #40	; 0x28
 80005f8:	2060      	movs	r0, #96	; 0x60
 80005fa:	f001 fa69 	bl	8001ad0 <ssd1306_tetris_R_Black>
			ssd1306_tetris_V_Black(112, 24);
 80005fe:	2118      	movs	r1, #24
 8000600:	2070      	movs	r0, #112	; 0x70
 8000602:	f000 ffa2 	bl	800154a <ssd1306_tetris_V_Black>
			ssd1306_tetris_Z_90_Black(111, -1);
 8000606:	f04f 31ff 	mov.w	r1, #4294967295
 800060a:	206f      	movs	r0, #111	; 0x6f
 800060c:	f001 fdd3 	bl	80021b6 <ssd1306_tetris_Z_90_Black>
			ssd1306_tetris_T_links_Black(95,7);
 8000610:	2107      	movs	r1, #7
 8000612:	205f      	movs	r0, #95	; 0x5f
 8000614:	f003 f8b8 	bl	8003788 <ssd1306_tetris_T_links_Black>

			ssd1306_tetris_T_White(59 + down12-3, 39);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3338      	adds	r3, #56	; 0x38
 800061c:	2127      	movs	r1, #39	; 0x27
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fd17 	bl	8003052 <ssd1306_tetris_T_White>
			ssd1306_tetris_T_Black(59 + down12, 39);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	333b      	adds	r3, #59	; 0x3b
 8000628:	2127      	movs	r1, #39	; 0x27
 800062a:	4618      	mov	r0, r3
 800062c:	f002 f976 	bl	800291c <ssd1306_tetris_T_Black>
			down12 = down12 + 3;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3303      	adds	r3, #3
 8000634:	607b      	str	r3, [r7, #4]
		while(down12 < 20)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b13      	cmp	r3, #19
 800063a:	ddd8      	ble.n	80005ee <main+0x112>
		}
		ssd1306_tetris_T_White(77, 39);
 800063c:	2127      	movs	r1, #39	; 0x27
 800063e:	204d      	movs	r0, #77	; 0x4d
 8000640:	f002 fd07 	bl	8003052 <ssd1306_tetris_T_White>
		ssd1306_tetris_T_Black(79, 39);
 8000644:	2127      	movs	r1, #39	; 0x27
 8000646:	204f      	movs	r0, #79	; 0x4f
 8000648:	f002 f968 	bl	800291c <ssd1306_tetris_T_Black>
 800064c:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bdb0      	pop	{r4, r5, r7, pc}
 8000656:	bf00      	nop
 8000658:	20000028 	.word	0x20000028
 800065c:	08006a00 	.word	0x08006a00
 8000660:	200004e0 	.word	0x200004e0

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0ac      	sub	sp, #176	; 0xb0
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800066e:	2244      	movs	r2, #68	; 0x44
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f006 f9b0 	bl	80069d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2254      	movs	r2, #84	; 0x54
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f006 f9a2 	bl	80069d8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000694:	f004 fb48 	bl	8004d28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000698:	4b33      	ldr	r3, [pc, #204]	; (8000768 <SystemClock_Config+0x104>)
 800069a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800069e:	4a32      	ldr	r2, [pc, #200]	; (8000768 <SystemClock_Config+0x104>)
 80006a0:	f023 0318 	bic.w	r3, r3, #24
 80006a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006a8:	2314      	movs	r3, #20
 80006aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006bc:	2360      	movs	r3, #96	; 0x60
 80006be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c8:	2301      	movs	r3, #1
 80006ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006d4:	2310      	movs	r3, #16
 80006d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006da:	2307      	movs	r3, #7
 80006dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 fb8d 	bl	8004e10 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006fc:	f000 f8f0 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2303      	movs	r3, #3
 8000706:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000714:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000718:	2101      	movs	r1, #1
 800071a:	4618      	mov	r0, r3
 800071c:	f004 ff66 	bl	80055ec <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000726:	f000 f8db 	bl	80008e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800072a:	2342      	movs	r3, #66	; 0x42
 800072c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800072e:	2300      	movs	r3, #0
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000732:	2300      	movs	r3, #0
 8000734:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4618      	mov	r0, r3
 800073a:	f005 f95b 	bl	80059f4 <HAL_RCCEx_PeriphCLKConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000744:	f000 f8cc 	bl	80008e0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000748:	f44f 7000 	mov.w	r0, #512	; 0x200
 800074c:	f004 fb0a 	bl	8004d64 <HAL_PWREx_ControlVoltageScaling>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000756:	f000 f8c3 	bl	80008e0 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800075a:	f005 fb3d 	bl	8005dd8 <HAL_RCCEx_EnableMSIPLLMode>
}
 800075e:	bf00      	nop
 8000760:	37b0      	adds	r7, #176	; 0xb0
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <MX_I2C1_Init+0x78>)
 8000774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000778:	4a1b      	ldr	r2, [pc, #108]	; (80007e8 <MX_I2C1_Init+0x7c>)
 800077a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000784:	2201      	movs	r2, #1
 8000786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a6:	480e      	ldr	r0, [pc, #56]	; (80007e0 <MX_I2C1_Init+0x74>)
 80007a8:	f003 feba 	bl	8004520 <HAL_I2C_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007b2:	f000 f895 	bl	80008e0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b6:	2100      	movs	r1, #0
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <MX_I2C1_Init+0x74>)
 80007ba:	f004 fa1d 	bl	8004bf8 <HAL_I2CEx_ConfigAnalogFilter>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007c4:	f000 f88c 	bl	80008e0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_I2C1_Init+0x74>)
 80007cc:	f004 fa5f 	bl	8004c8e <HAL_I2CEx_ConfigDigitalFilter>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007d6:	f000 f883 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000494 	.word	0x20000494
 80007e4:	40005400 	.word	0x40005400
 80007e8:	00707cbb 	.word	0x00707cbb

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_USART2_UART_Init+0x58>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <MX_USART2_UART_Init+0x5c>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f6:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_USART2_UART_Init+0x58>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_USART2_UART_Init+0x58>)
 8000830:	f005 fbd2 	bl	8005fd8 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f851 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200004e0 	.word	0x200004e0
 8000848:	40004400 	.word	0x40004400

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_GPIO_Init+0x8c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a1c      	ldr	r2, [pc, #112]	; (80008d8 <MX_GPIO_Init+0x8c>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_GPIO_Init+0x8c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_GPIO_Init+0x8c>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a16      	ldr	r2, [pc, #88]	; (80008d8 <MX_GPIO_Init+0x8c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_GPIO_Init+0x8c>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_GPIO_Init+0x8c>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a10      	ldr	r2, [pc, #64]	; (80008d8 <MX_GPIO_Init+0x8c>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_GPIO_Init+0x8c>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2108      	movs	r1, #8
 80008ae:	480b      	ldr	r0, [pc, #44]	; (80008dc <MX_GPIO_Init+0x90>)
 80008b0:	f003 fe1e 	bl	80044f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008b4:	2308      	movs	r3, #8
 80008b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0x90>)
 80008cc:	f003 fca6 	bl	800421c <HAL_GPIO_Init>

}
 80008d0:	bf00      	nop
 80008d2:	3720      	adds	r7, #32
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000400 	.word	0x48000400

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <ssd1306_Reset>:

#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af04      	add	r7, sp, #16
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	9302      	str	r3, [sp, #8]
 800090c:	2301      	movs	r3, #1
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2301      	movs	r3, #1
 8000916:	2200      	movs	r2, #0
 8000918:	2178      	movs	r1, #120	; 0x78
 800091a:	4803      	ldr	r0, [pc, #12]	; (8000928 <ssd1306_WriteCommand+0x2c>)
 800091c:	f003 fe90 	bl	8004640 <HAL_I2C_Mem_Write>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000494 	.word	0x20000494

0800092c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af04      	add	r7, sp, #16
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b29b      	uxth	r3, r3
 800093a:	f04f 32ff 	mov.w	r2, #4294967295
 800093e:	9202      	str	r2, [sp, #8]
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2301      	movs	r3, #1
 8000948:	2240      	movs	r2, #64	; 0x40
 800094a:	2178      	movs	r1, #120	; 0x78
 800094c:	4803      	ldr	r0, [pc, #12]	; (800095c <ssd1306_WriteData+0x30>)
 800094e:	f003 fe77 	bl	8004640 <HAL_I2C_Mem_Write>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000494 	.word	0x20000494

08000960 <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8000964:	f7ff ffc3 	bl	80008ee <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000968:	2064      	movs	r0, #100	; 0x64
 800096a:	f003 fb4f 	bl	800400c <HAL_Delay>

    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 800096e:	20ae      	movs	r0, #174	; 0xae
 8000970:	f7ff ffc4 	bl	80008fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000974:	2020      	movs	r0, #32
 8000976:	f7ff ffc1 	bl	80008fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff ffbe 	bl	80008fc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000980:	20b0      	movs	r0, #176	; 0xb0
 8000982:	f7ff ffbb 	bl	80008fc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000986:	20c8      	movs	r0, #200	; 0xc8
 8000988:	f7ff ffb8 	bl	80008fc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff ffb5 	bl	80008fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000992:	2010      	movs	r0, #16
 8000994:	f7ff ffb2 	bl	80008fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000998:	2040      	movs	r0, #64	; 0x40
 800099a:	f7ff ffaf 	bl	80008fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800099e:	2081      	movs	r0, #129	; 0x81
 80009a0:	f7ff ffac 	bl	80008fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80009a4:	20ff      	movs	r0, #255	; 0xff
 80009a6:	f7ff ffa9 	bl	80008fc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80009aa:	20a1      	movs	r0, #161	; 0xa1
 80009ac:	f7ff ffa6 	bl	80008fc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80009b0:	20a6      	movs	r0, #166	; 0xa6
 80009b2:	f7ff ffa3 	bl	80008fc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80009b6:	20a8      	movs	r0, #168	; 0xa8
 80009b8:	f7ff ffa0 	bl	80008fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80009bc:	203f      	movs	r0, #63	; 0x3f
 80009be:	f7ff ff9d 	bl	80008fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80009c2:	20a4      	movs	r0, #164	; 0xa4
 80009c4:	f7ff ff9a 	bl	80008fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80009c8:	20d3      	movs	r0, #211	; 0xd3
 80009ca:	f7ff ff97 	bl	80008fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80009ce:	2000      	movs	r0, #0
 80009d0:	f7ff ff94 	bl	80008fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80009d4:	20d5      	movs	r0, #213	; 0xd5
 80009d6:	f7ff ff91 	bl	80008fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80009da:	20f0      	movs	r0, #240	; 0xf0
 80009dc:	f7ff ff8e 	bl	80008fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80009e0:	20d9      	movs	r0, #217	; 0xd9
 80009e2:	f7ff ff8b 	bl	80008fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80009e6:	2022      	movs	r0, #34	; 0x22
 80009e8:	f7ff ff88 	bl	80008fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80009ec:	20da      	movs	r0, #218	; 0xda
 80009ee:	f7ff ff85 	bl	80008fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 80009f2:	2012      	movs	r0, #18
 80009f4:	f7ff ff82 	bl	80008fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80009f8:	20db      	movs	r0, #219	; 0xdb
 80009fa:	f7ff ff7f 	bl	80008fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80009fe:	2020      	movs	r0, #32
 8000a00:	f7ff ff7c 	bl	80008fc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000a04:	208d      	movs	r0, #141	; 0x8d
 8000a06:	f7ff ff79 	bl	80008fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000a0a:	2014      	movs	r0, #20
 8000a0c:	f7ff ff76 	bl	80008fc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000a10:	20af      	movs	r0, #175	; 0xaf
 8000a12:	f7ff ff73 	bl	80008fc <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 f810 	bl	8000a3c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000a1c:	f000 f830 	bl	8000a80 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <ssd1306_Init+0xd8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <ssd1306_Init+0xd8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8000a2c:	4b02      	ldr	r3, [pc, #8]	; (8000a38 <ssd1306_Init+0xd8>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	715a      	strb	r2, [r3, #5]
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000048c 	.word	0x2000048c

08000a3c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	e00d      	b.n	8000a68 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d101      	bne.n	8000a56 <ssd1306_Fill+0x1a>
 8000a52:	2100      	movs	r1, #0
 8000a54:	e000      	b.n	8000a58 <ssd1306_Fill+0x1c>
 8000a56:	21ff      	movs	r1, #255	; 0xff
 8000a58:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <ssd1306_Fill+0x40>)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	460a      	mov	r2, r1
 8000a60:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	3301      	adds	r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a6e:	d3ed      	bcc.n	8000a4c <ssd1306_Fill+0x10>
    }
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	2000008c 	.word	0x2000008c

08000a80 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	e016      	b.n	8000aba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	3b50      	subs	r3, #80	; 0x50
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff32 	bl	80008fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff ff2f 	bl	80008fc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000a9e:	2010      	movs	r0, #16
 8000aa0:	f7ff ff2c 	bl	80008fc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	01db      	lsls	r3, r3, #7
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <ssd1306_UpdateScreen+0x48>)
 8000aaa:	4413      	add	r3, r2
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff3c 	bl	800092c <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	71fb      	strb	r3, [r7, #7]
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b07      	cmp	r3, #7
 8000abe:	d9e5      	bls.n	8000a8c <ssd1306_UpdateScreen+0xc>
    }
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000008c 	.word	0x2000008c

08000acc <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	71bb      	strb	r3, [r7, #6]
 8000ada:	4613      	mov	r3, r2
 8000adc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	db48      	blt.n	8000b78 <ssd1306_DrawPixel+0xac>
 8000ae6:	79bb      	ldrb	r3, [r7, #6]
 8000ae8:	2b3f      	cmp	r3, #63	; 0x3f
 8000aea:	d845      	bhi.n	8000b78 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000aec:	4b25      	ldr	r3, [pc, #148]	; (8000b84 <ssd1306_DrawPixel+0xb8>)
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d006      	beq.n	8000b02 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000af4:	797b      	ldrb	r3, [r7, #5]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bf0c      	ite	eq
 8000afa:	2301      	moveq	r3, #1
 8000afc:	2300      	movne	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 8000b02:	797b      	ldrb	r3, [r7, #5]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d11a      	bne.n	8000b3e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b08:	79fa      	ldrb	r2, [r7, #7]
 8000b0a:	79bb      	ldrb	r3, [r7, #6]
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	b2d8      	uxtb	r0, r3
 8000b10:	4603      	mov	r3, r0
 8000b12:	01db      	lsls	r3, r3, #7
 8000b14:	4413      	add	r3, r2
 8000b16:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <ssd1306_DrawPixel+0xbc>)
 8000b18:	5cd3      	ldrb	r3, [r2, r3]
 8000b1a:	b25a      	sxtb	r2, r3
 8000b1c:	79bb      	ldrb	r3, [r7, #6]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	2101      	movs	r1, #1
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	b259      	sxtb	r1, r3
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	4603      	mov	r3, r0
 8000b32:	01db      	lsls	r3, r3, #7
 8000b34:	4413      	add	r3, r2
 8000b36:	b2c9      	uxtb	r1, r1
 8000b38:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <ssd1306_DrawPixel+0xbc>)
 8000b3a:	54d1      	strb	r1, [r2, r3]
 8000b3c:	e01d      	b.n	8000b7a <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	79bb      	ldrb	r3, [r7, #6]
 8000b42:	08db      	lsrs	r3, r3, #3
 8000b44:	b2d8      	uxtb	r0, r3
 8000b46:	4603      	mov	r3, r0
 8000b48:	01db      	lsls	r3, r3, #7
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <ssd1306_DrawPixel+0xbc>)
 8000b4e:	5cd3      	ldrb	r3, [r2, r3]
 8000b50:	b25a      	sxtb	r2, r3
 8000b52:	79bb      	ldrb	r3, [r7, #6]
 8000b54:	f003 0307 	and.w	r3, r3, #7
 8000b58:	2101      	movs	r1, #1
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	b25b      	sxtb	r3, r3
 8000b64:	4013      	ands	r3, r2
 8000b66:	b259      	sxtb	r1, r3
 8000b68:	79fa      	ldrb	r2, [r7, #7]
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	01db      	lsls	r3, r3, #7
 8000b6e:	4413      	add	r3, r2
 8000b70:	b2c9      	uxtb	r1, r1
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <ssd1306_DrawPixel+0xbc>)
 8000b74:	54d1      	strb	r1, [r2, r3]
 8000b76:	e000      	b.n	8000b7a <ssd1306_DrawPixel+0xae>
        return;
 8000b78:	bf00      	nop
    }
}
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	2000048c 	.word	0x2000048c
 8000b88:	2000008c 	.word	0x2000008c

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x44>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a18      	ldr	r2, [pc, #96]	; (8000c54 <HAL_I2C_MspInit+0x80>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d129      	bne.n	8000c4a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_I2C_MspInit+0x84>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_I2C_MspInit+0x84>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_I2C_MspInit+0x84>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c14:	2312      	movs	r3, #18
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c20:	2304      	movs	r3, #4
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f003 faf5 	bl	800421c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_I2C_MspInit+0x84>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_I2C_MspInit+0x84>)
 8000c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_I2C_MspInit+0x84>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40005400 	.word	0x40005400
 8000c58:	40021000 	.word	0x40021000

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a20      	ldr	r2, [pc, #128]	; (8000cfc <HAL_UART_MspInit+0xa0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d13a      	bne.n	8000cf4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <HAL_UART_MspInit+0xa4>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c82:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <HAL_UART_MspInit+0xa4>)
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	6593      	str	r3, [r2, #88]	; 0x58
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <HAL_UART_MspInit+0xa4>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_UART_MspInit+0xa4>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <HAL_UART_MspInit+0xa4>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_UART_MspInit+0xa4>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000cae:	2304      	movs	r3, #4
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ccc:	f003 faa6 	bl	800421c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f003 fa94 	bl	800421c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	40021000 	.word	0x40021000

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d58:	f003 f93a 	bl	8003fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <SystemInit+0x64>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <SystemInit+0x64>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <SystemInit+0x68>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <SystemInit+0x68>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <SystemInit+0x68>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <SystemInit+0x68>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <SystemInit+0x68>)
 8000d8c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d90:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d94:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <SystemInit+0x68>)
 8000d98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d9c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <SystemInit+0x68>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <SystemInit+0x68>)
 8000da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <SystemInit+0x68>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SystemInit+0x64>)
 8000db2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000db6:	609a      	str	r2, [r3, #8]
#endif
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00
 8000dc8:	40021000 	.word	0x40021000

08000dcc <ssd1306_tetris_L_Black>:
#include <string.h>
#include <stdio.h>



void ssd1306_tetris_L_Black(int x, int y) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]

	ssd1306_DrawPixel(1+x,16+y, Black);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b2d8      	uxtb	r0, r3
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	3310      	adds	r3, #16
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	f7ff fe6f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(2+x,16+y, Black);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	3302      	adds	r3, #2
 8000df4:	b2d8      	uxtb	r0, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	3310      	adds	r3, #16
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	f7ff fe63 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(3+x,16+y, Black);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	3303      	adds	r3, #3
 8000e0c:	b2d8      	uxtb	r0, r3
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	3310      	adds	r3, #16
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2200      	movs	r2, #0
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f7ff fe57 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(4+x,16+y, Black);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	3304      	adds	r3, #4
 8000e24:	b2d8      	uxtb	r0, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	3310      	adds	r3, #16
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4619      	mov	r1, r3
 8000e32:	f7ff fe4b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(5+x,16+y, Black);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	3305      	adds	r3, #5
 8000e3c:	b2d8      	uxtb	r0, r3
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	3310      	adds	r3, #16
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2200      	movs	r2, #0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fe3f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(6+x,16+y, Black);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	3306      	adds	r3, #6
 8000e54:	b2d8      	uxtb	r0, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	3310      	adds	r3, #16
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2200      	movs	r2, #0
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff fe33 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(7+x,16+y, Black);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	3307      	adds	r3, #7
 8000e6c:	b2d8      	uxtb	r0, r3
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	3310      	adds	r3, #16
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2200      	movs	r2, #0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f7ff fe27 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(8+x,16+y, Black);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	3308      	adds	r3, #8
 8000e84:	b2d8      	uxtb	r0, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	3310      	adds	r3, #16
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4619      	mov	r1, r3
 8000e92:	f7ff fe1b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,16+y, Black);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	3309      	adds	r3, #9
 8000e9c:	b2d8      	uxtb	r0, r3
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	3310      	adds	r3, #16
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fe0f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(10+x,16+y, Black);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	330a      	adds	r3, #10
 8000eb4:	b2d8      	uxtb	r0, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3310      	adds	r3, #16
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fe03 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(11+x,16+y, Black);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	330b      	adds	r3, #11
 8000ecc:	b2d8      	uxtb	r0, r3
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	3310      	adds	r3, #16
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f7ff fdf7 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(12+x,16+y, Black);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	330c      	adds	r3, #12
 8000ee4:	b2d8      	uxtb	r0, r3
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	3310      	adds	r3, #16
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f7ff fdeb 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(13+x,16+y, Black);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	330d      	adds	r3, #13
 8000efc:	b2d8      	uxtb	r0, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	3310      	adds	r3, #16
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2200      	movs	r2, #0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fddf 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(14+x,16+y, Black);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	330e      	adds	r3, #14
 8000f14:	b2d8      	uxtb	r0, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	3310      	adds	r3, #16
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4619      	mov	r1, r3
 8000f22:	f7ff fdd3 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(15+x,16+y, Black);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	330f      	adds	r3, #15
 8000f2c:	b2d8      	uxtb	r0, r3
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	3310      	adds	r3, #16
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2200      	movs	r2, #0
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f7ff fdc7 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,16+y, Black);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	3310      	adds	r3, #16
 8000f44:	b2d8      	uxtb	r0, r3
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	3310      	adds	r3, #16
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fdbb 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(17+x,16+y, Black);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	3311      	adds	r3, #17
 8000f5c:	b2d8      	uxtb	r0, r3
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	3310      	adds	r3, #16
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2200      	movs	r2, #0
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f7ff fdaf 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(18+x,16+y, Black);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	3312      	adds	r3, #18
 8000f74:	b2d8      	uxtb	r0, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	3310      	adds	r3, #16
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	f7ff fda3 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(19+x,16+y, Black);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	3313      	adds	r3, #19
 8000f8c:	b2d8      	uxtb	r0, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	3310      	adds	r3, #16
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f7ff fd97 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(20+x,16+y, Black);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	3314      	adds	r3, #20
 8000fa4:	b2d8      	uxtb	r0, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	3310      	adds	r3, #16
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff fd8b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(21+x,16+y, Black);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	3315      	adds	r3, #21
 8000fbc:	b2d8      	uxtb	r0, r3
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	3310      	adds	r3, #16
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fd7f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(22+x,16+y, Black);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	3316      	adds	r3, #22
 8000fd4:	b2d8      	uxtb	r0, r3
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	3310      	adds	r3, #16
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff fd73 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(23+x,16+y, Black);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3317      	adds	r3, #23
 8000fec:	b2d8      	uxtb	r0, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	3310      	adds	r3, #16
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fd67 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,16+y, Black);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	3318      	adds	r3, #24
 8001004:	b2d8      	uxtb	r0, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	3310      	adds	r3, #16
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fd5b 	bl	8000acc <ssd1306_DrawPixel>

		ssd1306_DrawPixel(1+x,9+y, Black);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	3301      	adds	r3, #1
 800101c:	b2d8      	uxtb	r0, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	3309      	adds	r3, #9
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fd4f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(2+x,9+y, Black);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	3302      	adds	r3, #2
 8001034:	b2d8      	uxtb	r0, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	3309      	adds	r3, #9
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2200      	movs	r2, #0
 8001040:	4619      	mov	r1, r3
 8001042:	f7ff fd43 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(3+x,9+y, Black);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	3303      	adds	r3, #3
 800104c:	b2d8      	uxtb	r0, r3
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	3309      	adds	r3, #9
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fd37 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(4+x,9+y, Black);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	3304      	adds	r3, #4
 8001064:	b2d8      	uxtb	r0, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	3309      	adds	r3, #9
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2200      	movs	r2, #0
 8001070:	4619      	mov	r1, r3
 8001072:	f7ff fd2b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(5+x,9+y, Black);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	3305      	adds	r3, #5
 800107c:	b2d8      	uxtb	r0, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	3309      	adds	r3, #9
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2200      	movs	r2, #0
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fd1f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(6+x,9+y, Black);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	3306      	adds	r3, #6
 8001094:	b2d8      	uxtb	r0, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	3309      	adds	r3, #9
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2200      	movs	r2, #0
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fd13 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(7+x,9+y, Black);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	3307      	adds	r3, #7
 80010ac:	b2d8      	uxtb	r0, r3
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	3309      	adds	r3, #9
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fd07 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(8+x,9+y, Black);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	3308      	adds	r3, #8
 80010c4:	b2d8      	uxtb	r0, r3
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	3309      	adds	r3, #9
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fcfb 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,9+y, Black);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3309      	adds	r3, #9
 80010dc:	b2d8      	uxtb	r0, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	3309      	adds	r3, #9
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2200      	movs	r2, #0
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fcef 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(10+x,9+y, Black);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	330a      	adds	r3, #10
 80010f4:	b2d8      	uxtb	r0, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	3309      	adds	r3, #9
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2200      	movs	r2, #0
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fce3 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(11+x,9+y, Black);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	330b      	adds	r3, #11
 800110c:	b2d8      	uxtb	r0, r3
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	3309      	adds	r3, #9
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fcd7 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(12+x,9+y, Black);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	330c      	adds	r3, #12
 8001124:	b2d8      	uxtb	r0, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	3309      	adds	r3, #9
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2200      	movs	r2, #0
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fccb 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(13+x,9+y, Black);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	330d      	adds	r3, #13
 800113c:	b2d8      	uxtb	r0, r3
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	3309      	adds	r3, #9
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2200      	movs	r2, #0
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fcbf 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(14+x,9+y, Black);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	330e      	adds	r3, #14
 8001154:	b2d8      	uxtb	r0, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	3309      	adds	r3, #9
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2200      	movs	r2, #0
 8001160:	4619      	mov	r1, r3
 8001162:	f7ff fcb3 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(15+x,9+y, Black);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	330f      	adds	r3, #15
 800116c:	b2d8      	uxtb	r0, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	3309      	adds	r3, #9
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2200      	movs	r2, #0
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fca7 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,9+y, Black);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	3310      	adds	r3, #16
 8001184:	b2d8      	uxtb	r0, r3
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	3309      	adds	r3, #9
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	f7ff fc9b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(17+x,9+y, Black);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3311      	adds	r3, #17
 800119c:	b2d8      	uxtb	r0, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	3309      	adds	r3, #9
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	f7ff fc8f 	bl	8000acc <ssd1306_DrawPixel>

		ssd1306_DrawPixel(17+x,1+y, Black);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	3311      	adds	r3, #17
 80011b4:	b2d8      	uxtb	r0, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	3301      	adds	r3, #1
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fc83 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(18+x,1+y, Black);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	3312      	adds	r3, #18
 80011cc:	b2d8      	uxtb	r0, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	3301      	adds	r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2200      	movs	r2, #0
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fc77 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(19+x,1+y, Black);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	3313      	adds	r3, #19
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	3301      	adds	r3, #1
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2200      	movs	r2, #0
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fc6b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(20+x,1+y, Black);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	3314      	adds	r3, #20
 80011fc:	b2d8      	uxtb	r0, r3
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	3301      	adds	r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fc5f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(21+x,1+y, Black);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	3315      	adds	r3, #21
 8001214:	b2d8      	uxtb	r0, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	3301      	adds	r3, #1
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2200      	movs	r2, #0
 8001220:	4619      	mov	r1, r3
 8001222:	f7ff fc53 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(22+x,1+y, Black);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	3316      	adds	r3, #22
 800122c:	b2d8      	uxtb	r0, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	b2db      	uxtb	r3, r3
 8001232:	3301      	adds	r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fc47 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(23+x,1+y, Black);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	3317      	adds	r3, #23
 8001244:	b2d8      	uxtb	r0, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	3301      	adds	r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2200      	movs	r2, #0
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fc3b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,1+y, Black);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	3318      	adds	r3, #24
 800125c:	b2d8      	uxtb	r0, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	3301      	adds	r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2200      	movs	r2, #0
 8001268:	4619      	mov	r1, r3
 800126a:	f7ff fc2f 	bl	8000acc <ssd1306_DrawPixel>

		ssd1306_DrawPixel(1+x,9+y, Black);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3301      	adds	r3, #1
 8001274:	b2d8      	uxtb	r0, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	3309      	adds	r3, #9
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	f7ff fc23 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,10+y, Black);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3301      	adds	r3, #1
 800128c:	b2d8      	uxtb	r0, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	330a      	adds	r3, #10
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2200      	movs	r2, #0
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff fc17 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,11+y, Black);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	3301      	adds	r3, #1
 80012a4:	b2d8      	uxtb	r0, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	330b      	adds	r3, #11
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2200      	movs	r2, #0
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fc0b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,12+y, Black);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	3301      	adds	r3, #1
 80012bc:	b2d8      	uxtb	r0, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	330c      	adds	r3, #12
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2200      	movs	r2, #0
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fbff 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,13+y, Black);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2d8      	uxtb	r0, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	330d      	adds	r3, #13
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2200      	movs	r2, #0
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fbf3 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,14+y, Black);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	3301      	adds	r3, #1
 80012ec:	b2d8      	uxtb	r0, r3
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	330e      	adds	r3, #14
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2200      	movs	r2, #0
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fbe7 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,15+y, Black);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	3301      	adds	r3, #1
 8001304:	b2d8      	uxtb	r0, r3
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	330f      	adds	r3, #15
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2200      	movs	r2, #0
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fbdb 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,16+y, Black);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	3301      	adds	r3, #1
 800131c:	b2d8      	uxtb	r0, r3
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	b2db      	uxtb	r3, r3
 8001322:	3310      	adds	r3, #16
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2200      	movs	r2, #0
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fbcf 	bl	8000acc <ssd1306_DrawPixel>

		ssd1306_DrawPixel(17+x,1+y, Black);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	3311      	adds	r3, #17
 8001334:	b2d8      	uxtb	r0, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	3301      	adds	r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2200      	movs	r2, #0
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fbc3 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(17+x,2+y, Black);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	3311      	adds	r3, #17
 800134c:	b2d8      	uxtb	r0, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	3302      	adds	r3, #2
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2200      	movs	r2, #0
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fbb7 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(17+x,3+y, Black);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	3311      	adds	r3, #17
 8001364:	b2d8      	uxtb	r0, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	3303      	adds	r3, #3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2200      	movs	r2, #0
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff fbab 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(17+x,4+y, Black);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	3311      	adds	r3, #17
 800137c:	b2d8      	uxtb	r0, r3
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	3304      	adds	r3, #4
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2200      	movs	r2, #0
 8001388:	4619      	mov	r1, r3
 800138a:	f7ff fb9f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(17+x,5+y, Black);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	3311      	adds	r3, #17
 8001394:	b2d8      	uxtb	r0, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	3305      	adds	r3, #5
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2200      	movs	r2, #0
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fb93 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(17+x,6+y, Black);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	3311      	adds	r3, #17
 80013ac:	b2d8      	uxtb	r0, r3
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	3306      	adds	r3, #6
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2200      	movs	r2, #0
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fb87 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(17+x,7+y, Black);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	3311      	adds	r3, #17
 80013c4:	b2d8      	uxtb	r0, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	3307      	adds	r3, #7
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fb7b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(17+x,8+y, Black);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	3311      	adds	r3, #17
 80013dc:	b2d8      	uxtb	r0, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	3308      	adds	r3, #8
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2200      	movs	r2, #0
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff fb6f 	bl	8000acc <ssd1306_DrawPixel>

		ssd1306_DrawPixel(24+x,2+y, Black);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	3318      	adds	r3, #24
 80013f4:	b2d8      	uxtb	r0, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	3302      	adds	r3, #2
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2200      	movs	r2, #0
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fb63 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,3+y, Black);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	3318      	adds	r3, #24
 800140c:	b2d8      	uxtb	r0, r3
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	3303      	adds	r3, #3
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2200      	movs	r2, #0
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fb57 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,4+y, Black);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	3318      	adds	r3, #24
 8001424:	b2d8      	uxtb	r0, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	3304      	adds	r3, #4
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2200      	movs	r2, #0
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fb4b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,5+y, Black);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	b2db      	uxtb	r3, r3
 800143a:	3318      	adds	r3, #24
 800143c:	b2d8      	uxtb	r0, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	3305      	adds	r3, #5
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2200      	movs	r2, #0
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fb3f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,6+y, Black);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	3318      	adds	r3, #24
 8001454:	b2d8      	uxtb	r0, r3
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	3306      	adds	r3, #6
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2200      	movs	r2, #0
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fb33 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,7+y, Black);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	3318      	adds	r3, #24
 800146c:	b2d8      	uxtb	r0, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	3307      	adds	r3, #7
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fb27 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,8+y, Black);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	3318      	adds	r3, #24
 8001484:	b2d8      	uxtb	r0, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	3308      	adds	r3, #8
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2200      	movs	r2, #0
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff fb1b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,9+y, Black);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	3318      	adds	r3, #24
 800149c:	b2d8      	uxtb	r0, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	3309      	adds	r3, #9
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2200      	movs	r2, #0
 80014a8:	4619      	mov	r1, r3
 80014aa:	f7ff fb0f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,10+y, Black);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	3318      	adds	r3, #24
 80014b4:	b2d8      	uxtb	r0, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	330a      	adds	r3, #10
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff fb03 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,11+y, Black);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	3318      	adds	r3, #24
 80014cc:	b2d8      	uxtb	r0, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	330b      	adds	r3, #11
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2200      	movs	r2, #0
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff faf7 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,12+y, Black);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	3318      	adds	r3, #24
 80014e4:	b2d8      	uxtb	r0, r3
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	330c      	adds	r3, #12
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2200      	movs	r2, #0
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff faeb 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,13+y, Black);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	3318      	adds	r3, #24
 80014fc:	b2d8      	uxtb	r0, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	330d      	adds	r3, #13
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fadf 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,14+y, Black);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	3318      	adds	r3, #24
 8001514:	b2d8      	uxtb	r0, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	330e      	adds	r3, #14
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2200      	movs	r2, #0
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fad3 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(24+x,15+y, Black);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	3318      	adds	r3, #24
 800152c:	b2d8      	uxtb	r0, r3
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	330f      	adds	r3, #15
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2200      	movs	r2, #0
 8001538:	4619      	mov	r1, r3
 800153a:	f7ff fac7 	bl	8000acc <ssd1306_DrawPixel>

	    ssd1306_UpdateScreen();
 800153e:	f7ff fa9f 	bl	8000a80 <ssd1306_UpdateScreen>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <ssd1306_tetris_V_Black>:
		ssd1306_DrawPixel(24+x,15+y, White);

	    ssd1306_UpdateScreen();
}

void ssd1306_tetris_V_Black(int x, int y){
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]

	   			  ssd1306_DrawPixel(0+x,0+y, Black);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	b2d1      	uxtb	r1, r2
 800155c:	2200      	movs	r2, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fab4 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(1+x,0+y, Black);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	3301      	adds	r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	b2d1      	uxtb	r1, r2
 8001570:	2200      	movs	r2, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff faaa 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(2+x,0+y, Black);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3302      	adds	r3, #2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	b2d1      	uxtb	r1, r2
 8001584:	2200      	movs	r2, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff faa0 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(3+x,0+y, Black);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	3303      	adds	r3, #3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	b2d1      	uxtb	r1, r2
 8001598:	2200      	movs	r2, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fa96 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(4+x,0+y, Black);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	3304      	adds	r3, #4
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	b2d1      	uxtb	r1, r2
 80015ac:	2200      	movs	r2, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fa8c 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(5+x,0+y, Black);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	3305      	adds	r3, #5
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	b2d1      	uxtb	r1, r2
 80015c0:	2200      	movs	r2, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fa82 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(6+x,0+y, Black);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	3306      	adds	r3, #6
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	b2d1      	uxtb	r1, r2
 80015d4:	2200      	movs	r2, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fa78 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(7+x,0+y, Black);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	3307      	adds	r3, #7
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	b2d1      	uxtb	r1, r2
 80015e8:	2200      	movs	r2, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fa6e 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(8+x,0+y, Black);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	3308      	adds	r3, #8
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	b2d1      	uxtb	r1, r2
 80015fc:	2200      	movs	r2, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fa64 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(9+x,0+y, Black);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	3309      	adds	r3, #9
 800160a:	b2db      	uxtb	r3, r3
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	b2d1      	uxtb	r1, r2
 8001610:	2200      	movs	r2, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fa5a 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(10+x,0+y,Black);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	330a      	adds	r3, #10
 800161e:	b2db      	uxtb	r3, r3
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	b2d1      	uxtb	r1, r2
 8001624:	2200      	movs	r2, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fa50 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(11+x,0+y,Black);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	330b      	adds	r3, #11
 8001632:	b2db      	uxtb	r3, r3
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	b2d1      	uxtb	r1, r2
 8001638:	2200      	movs	r2, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fa46 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(12+x,0+y,Black);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	b2db      	uxtb	r3, r3
 8001644:	330c      	adds	r3, #12
 8001646:	b2db      	uxtb	r3, r3
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	b2d1      	uxtb	r1, r2
 800164c:	2200      	movs	r2, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fa3c 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(13+x,0+y,Black);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	330d      	adds	r3, #13
 800165a:	b2db      	uxtb	r3, r3
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	b2d1      	uxtb	r1, r2
 8001660:	2200      	movs	r2, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fa32 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(14+x,0+y,Black);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	330e      	adds	r3, #14
 800166e:	b2db      	uxtb	r3, r3
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	b2d1      	uxtb	r1, r2
 8001674:	2200      	movs	r2, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fa28 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,0+y,Black);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	330f      	adds	r3, #15
 8001682:	b2db      	uxtb	r3, r3
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d1      	uxtb	r1, r2
 8001688:	2200      	movs	r2, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fa1e 	bl	8000acc <ssd1306_DrawPixel>

	   			  ssd1306_DrawPixel(0+x,15+y, Black);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	b2d8      	uxtb	r0, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	330f      	adds	r3, #15
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2200      	movs	r2, #0
 800169e:	4619      	mov	r1, r3
 80016a0:	f7ff fa14 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(1+x,15+y, Black);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	3301      	adds	r3, #1
 80016aa:	b2d8      	uxtb	r0, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	330f      	adds	r3, #15
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff fa08 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(2+x,15+y, Black);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	3302      	adds	r3, #2
 80016c2:	b2d8      	uxtb	r0, r3
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	330f      	adds	r3, #15
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2200      	movs	r2, #0
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff f9fc 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(3+x,15+y, Black);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	3303      	adds	r3, #3
 80016da:	b2d8      	uxtb	r0, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	330f      	adds	r3, #15
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2200      	movs	r2, #0
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff f9f0 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(4+x,15+y, Black);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	3304      	adds	r3, #4
 80016f2:	b2d8      	uxtb	r0, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	330f      	adds	r3, #15
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2200      	movs	r2, #0
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff f9e4 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(5+x,15+y, Black);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	3305      	adds	r3, #5
 800170a:	b2d8      	uxtb	r0, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	330f      	adds	r3, #15
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff f9d8 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(6+x,15+y, Black);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	3306      	adds	r3, #6
 8001722:	b2d8      	uxtb	r0, r3
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	330f      	adds	r3, #15
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2200      	movs	r2, #0
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff f9cc 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(7+x,15+y, Black);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	3307      	adds	r3, #7
 800173a:	b2d8      	uxtb	r0, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	330f      	adds	r3, #15
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2200      	movs	r2, #0
 8001746:	4619      	mov	r1, r3
 8001748:	f7ff f9c0 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(8+x,15+y, Black);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	3308      	adds	r3, #8
 8001752:	b2d8      	uxtb	r0, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	330f      	adds	r3, #15
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2200      	movs	r2, #0
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff f9b4 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(9+x,15+y, Black);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	3309      	adds	r3, #9
 800176a:	b2d8      	uxtb	r0, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	330f      	adds	r3, #15
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2200      	movs	r2, #0
 8001776:	4619      	mov	r1, r3
 8001778:	f7ff f9a8 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(10+x,15+y,Black);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	330a      	adds	r3, #10
 8001782:	b2d8      	uxtb	r0, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	330f      	adds	r3, #15
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2200      	movs	r2, #0
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff f99c 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(11+x,15+y,Black);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	330b      	adds	r3, #11
 800179a:	b2d8      	uxtb	r0, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	330f      	adds	r3, #15
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2200      	movs	r2, #0
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff f990 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(12+x,15+y,Black);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	330c      	adds	r3, #12
 80017b2:	b2d8      	uxtb	r0, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	330f      	adds	r3, #15
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2200      	movs	r2, #0
 80017be:	4619      	mov	r1, r3
 80017c0:	f7ff f984 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(13+x,15+y,Black);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	330d      	adds	r3, #13
 80017ca:	b2d8      	uxtb	r0, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	330f      	adds	r3, #15
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2200      	movs	r2, #0
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f978 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(14+x,15+y,Black);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	330e      	adds	r3, #14
 80017e2:	b2d8      	uxtb	r0, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	330f      	adds	r3, #15
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2200      	movs	r2, #0
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f96c 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,15+y,Black);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	330f      	adds	r3, #15
 80017fa:	b2d8      	uxtb	r0, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	330f      	adds	r3, #15
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2200      	movs	r2, #0
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f960 	bl	8000acc <ssd1306_DrawPixel>

	   			  ssd1306_DrawPixel(0+x,0+y, Black);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	b2d1      	uxtb	r1, r2
 8001814:	2200      	movs	r2, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f958 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,1+y, Black);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	b2d8      	uxtb	r0, r3
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	3301      	adds	r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2200      	movs	r2, #0
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f94e 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,2+y, Black);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	b2d8      	uxtb	r0, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3302      	adds	r3, #2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2200      	movs	r2, #0
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f944 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,3+y, Black);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	b2d8      	uxtb	r0, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	3303      	adds	r3, #3
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2200      	movs	r2, #0
 8001852:	4619      	mov	r1, r3
 8001854:	f7ff f93a 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,4+y, Black);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	b2d8      	uxtb	r0, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2db      	uxtb	r3, r3
 8001860:	3304      	adds	r3, #4
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2200      	movs	r2, #0
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f930 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,5+y, Black);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	b2d8      	uxtb	r0, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	3305      	adds	r3, #5
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2200      	movs	r2, #0
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f926 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,6+y, Black);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	b2d8      	uxtb	r0, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	3306      	adds	r3, #6
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2200      	movs	r2, #0
 800188e:	4619      	mov	r1, r3
 8001890:	f7ff f91c 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,7+y, Black);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	b2d8      	uxtb	r0, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	3307      	adds	r3, #7
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2200      	movs	r2, #0
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7ff f912 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,8+y, Black);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	b2d8      	uxtb	r0, r3
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	3308      	adds	r3, #8
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f908 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,9+y, Black);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	b2d8      	uxtb	r0, r3
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	3309      	adds	r3, #9
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff f8fe 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,10+y, Black);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	b2d8      	uxtb	r0, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	330a      	adds	r3, #10
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2200      	movs	r2, #0
 80018de:	4619      	mov	r1, r3
 80018e0:	f7ff f8f4 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,11+y, Black);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	b2d8      	uxtb	r0, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	330b      	adds	r3, #11
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2200      	movs	r2, #0
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff f8ea 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,12+y, Black);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	b2d8      	uxtb	r0, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	330c      	adds	r3, #12
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2200      	movs	r2, #0
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f8e0 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,13+y, Black);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	b2d8      	uxtb	r0, r3
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	330d      	adds	r3, #13
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2200      	movs	r2, #0
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f8d6 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,14+y, Black);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	b2d8      	uxtb	r0, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	330e      	adds	r3, #14
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2200      	movs	r2, #0
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f8cc 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,15+y, Black);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	b2d8      	uxtb	r0, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	330f      	adds	r3, #15
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2200      	movs	r2, #0
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f8c2 	bl	8000acc <ssd1306_DrawPixel>

	   			  ssd1306_DrawPixel(15+x,0+y, Black);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	330f      	adds	r3, #15
 800194e:	b2db      	uxtb	r3, r3
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	b2d1      	uxtb	r1, r2
 8001954:	2200      	movs	r2, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f8b8 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,1+y, Black);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	330f      	adds	r3, #15
 8001962:	b2d8      	uxtb	r0, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	3301      	adds	r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f8ac 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,2+y, Black);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	330f      	adds	r3, #15
 800197a:	b2d8      	uxtb	r0, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	3302      	adds	r3, #2
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2200      	movs	r2, #0
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f8a0 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,3+y, Black);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	330f      	adds	r3, #15
 8001992:	b2d8      	uxtb	r0, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3303      	adds	r3, #3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	f7ff f894 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,4+y, Black);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	330f      	adds	r3, #15
 80019aa:	b2d8      	uxtb	r0, r3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3304      	adds	r3, #4
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2200      	movs	r2, #0
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7ff f888 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,5+y, Black);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	330f      	adds	r3, #15
 80019c2:	b2d8      	uxtb	r0, r3
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	3305      	adds	r3, #5
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f87c 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,6+y, Black);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	330f      	adds	r3, #15
 80019da:	b2d8      	uxtb	r0, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	3306      	adds	r3, #6
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2200      	movs	r2, #0
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff f870 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,7+y, Black);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	330f      	adds	r3, #15
 80019f2:	b2d8      	uxtb	r0, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3307      	adds	r3, #7
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2200      	movs	r2, #0
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f864 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,8+y, Black);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	330f      	adds	r3, #15
 8001a0a:	b2d8      	uxtb	r0, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	3308      	adds	r3, #8
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2200      	movs	r2, #0
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f858 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,9+y, Black);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	330f      	adds	r3, #15
 8001a22:	b2d8      	uxtb	r0, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	3309      	adds	r3, #9
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff f84c 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,10+y, Black);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	330f      	adds	r3, #15
 8001a3a:	b2d8      	uxtb	r0, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	330a      	adds	r3, #10
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2200      	movs	r2, #0
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff f840 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,11+y, Black);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	330f      	adds	r3, #15
 8001a52:	b2d8      	uxtb	r0, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	330b      	adds	r3, #11
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff f834 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,12+y, Black);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	330f      	adds	r3, #15
 8001a6a:	b2d8      	uxtb	r0, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	330c      	adds	r3, #12
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2200      	movs	r2, #0
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7ff f828 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,13+y, Black);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	330f      	adds	r3, #15
 8001a82:	b2d8      	uxtb	r0, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	330d      	adds	r3, #13
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f7ff f81c 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,14+y, Black);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	330f      	adds	r3, #15
 8001a9a:	b2d8      	uxtb	r0, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	330e      	adds	r3, #14
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7ff f810 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,15+y, Black);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	330f      	adds	r3, #15
 8001ab2:	b2d8      	uxtb	r0, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	330f      	adds	r3, #15
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2200      	movs	r2, #0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f7ff f804 	bl	8000acc <ssd1306_DrawPixel>
	   			ssd1306_UpdateScreen();
 8001ac4:	f7fe ffdc 	bl	8000a80 <ssd1306_UpdateScreen>

}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <ssd1306_tetris_R_Black>:
	   			  ssd1306_DrawPixel(15+x,15+y, White);
	   			ssd1306_UpdateScreen();

}

void ssd1306_tetris_R_Black(int x, int y){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]


	   			  ssd1306_DrawPixel(0+x,0+y, Black);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	b2d1      	uxtb	r1, r2
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fff1 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(1+x,0+y, Black);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	b2d1      	uxtb	r1, r2
 8001af6:	2200      	movs	r2, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe ffe7 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(2+x,0+y, Black);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	3302      	adds	r3, #2
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	b2d1      	uxtb	r1, r2
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe ffdd 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(3+x,0+y, Black);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	3303      	adds	r3, #3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	b2d1      	uxtb	r1, r2
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe ffd3 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(4+x,0+y, Black);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	b2d1      	uxtb	r1, r2
 8001b32:	2200      	movs	r2, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe ffc9 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(5+x,0+y, Black);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	3305      	adds	r3, #5
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	b2d1      	uxtb	r1, r2
 8001b46:	2200      	movs	r2, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe ffbf 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(6+x,0+y, Black);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	3306      	adds	r3, #6
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	b2d1      	uxtb	r1, r2
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe ffb5 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(7+x,0+y, Black);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	3307      	adds	r3, #7
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	b2d1      	uxtb	r1, r2
 8001b6e:	2200      	movs	r2, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe ffab 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(8+x,0+y, Black);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	b2d1      	uxtb	r1, r2
 8001b82:	2200      	movs	r2, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe ffa1 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(9+x,0+y, Black);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	3309      	adds	r3, #9
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	b2d1      	uxtb	r1, r2
 8001b96:	2200      	movs	r2, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe ff97 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(10+x,0+y,Black);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	330a      	adds	r3, #10
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	b2d1      	uxtb	r1, r2
 8001baa:	2200      	movs	r2, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe ff8d 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(11+x,0+y,Black);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	330b      	adds	r3, #11
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	b2d1      	uxtb	r1, r2
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe ff83 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(12+x,0+y,Black);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	330c      	adds	r3, #12
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	b2d1      	uxtb	r1, r2
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe ff79 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(13+x,0+y,Black);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	330d      	adds	r3, #13
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	b2d1      	uxtb	r1, r2
 8001be6:	2200      	movs	r2, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe ff6f 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(14+x,0+y,Black);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	330e      	adds	r3, #14
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	b2d1      	uxtb	r1, r2
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe ff65 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,0+y,Black);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	330f      	adds	r3, #15
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	b2d1      	uxtb	r1, r2
 8001c0e:	2200      	movs	r2, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe ff5b 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(16+x,0+y,Black);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3310      	adds	r3, #16
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	b2d1      	uxtb	r1, r2
 8001c22:	2200      	movs	r2, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe ff51 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(17+x,0+y, Black);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	3311      	adds	r3, #17
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	b2d1      	uxtb	r1, r2
 8001c36:	2200      	movs	r2, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe ff47 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(18+x,0+y, Black);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	3312      	adds	r3, #18
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	b2d1      	uxtb	r1, r2
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe ff3d 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(19+x,0+y, Black);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3313      	adds	r3, #19
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	b2d1      	uxtb	r1, r2
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe ff33 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(20+x,0+y, Black);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	3314      	adds	r3, #20
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	b2d1      	uxtb	r1, r2
 8001c72:	2200      	movs	r2, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe ff29 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(21+x,0+y, Black);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	3315      	adds	r3, #21
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	b2d1      	uxtb	r1, r2
 8001c86:	2200      	movs	r2, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe ff1f 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(22+x,0+y, Black);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	3316      	adds	r3, #22
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	b2d1      	uxtb	r1, r2
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe ff15 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(23+x,0+y, Black);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	3317      	adds	r3, #23
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	b2d1      	uxtb	r1, r2
 8001cae:	2200      	movs	r2, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe ff0b 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(24+x,0+y, Black);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	3318      	adds	r3, #24
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	b2d1      	uxtb	r1, r2
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe ff01 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(25+x,0+y, Black);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	3319      	adds	r3, #25
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	b2d1      	uxtb	r1, r2
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fef7 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(26+x,0+y, Black);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	331a      	adds	r3, #26
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	b2d1      	uxtb	r1, r2
 8001cea:	2200      	movs	r2, #0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe feed 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(27+x,0+y,Black);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	331b      	adds	r3, #27
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	b2d1      	uxtb	r1, r2
 8001cfe:	2200      	movs	r2, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fee3 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(28+x,0+y,Black);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	331c      	adds	r3, #28
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	b2d1      	uxtb	r1, r2
 8001d12:	2200      	movs	r2, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fed9 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(29+x,0+y,Black);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	331d      	adds	r3, #29
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	b2d1      	uxtb	r1, r2
 8001d26:	2200      	movs	r2, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fecf 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(30+x,0+y,Black);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	331e      	adds	r3, #30
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	b2d1      	uxtb	r1, r2
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fec5 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(31+x,0+y,Black);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	331f      	adds	r3, #31
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	b2d1      	uxtb	r1, r2
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe febb 	bl	8000acc <ssd1306_DrawPixel>

	   			  ssd1306_DrawPixel(0+x,7+y, Black);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	b2d8      	uxtb	r0, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	3307      	adds	r3, #7
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2200      	movs	r2, #0
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7fe feb1 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(1+x,7+y, Black);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	b2d8      	uxtb	r0, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	3307      	adds	r3, #7
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe fea5 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(2+x,7+y, Black);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	3302      	adds	r3, #2
 8001d88:	b2d8      	uxtb	r0, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3307      	adds	r3, #7
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2200      	movs	r2, #0
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe fe99 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(3+x,7+y, Black);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	3303      	adds	r3, #3
 8001da0:	b2d8      	uxtb	r0, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	3307      	adds	r3, #7
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2200      	movs	r2, #0
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7fe fe8d 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(4+x,7+y, Black);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	3304      	adds	r3, #4
 8001db8:	b2d8      	uxtb	r0, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	3307      	adds	r3, #7
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f7fe fe81 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(5+x,7+y, Black);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3305      	adds	r3, #5
 8001dd0:	b2d8      	uxtb	r0, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3307      	adds	r3, #7
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2200      	movs	r2, #0
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fe75 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(6+x,7+y, Black);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	3306      	adds	r3, #6
 8001de8:	b2d8      	uxtb	r0, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	3307      	adds	r3, #7
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2200      	movs	r2, #0
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7fe fe69 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(7+x,7+y, Black);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	3307      	adds	r3, #7
 8001e00:	b2d8      	uxtb	r0, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	3307      	adds	r3, #7
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe fe5d 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(8+x,7+y, Black);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	3308      	adds	r3, #8
 8001e18:	b2d8      	uxtb	r0, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	3307      	adds	r3, #7
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2200      	movs	r2, #0
 8001e24:	4619      	mov	r1, r3
 8001e26:	f7fe fe51 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(9+x,7+y, Black);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	3309      	adds	r3, #9
 8001e30:	b2d8      	uxtb	r0, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	3307      	adds	r3, #7
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fe45 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(10+x,7+y,Black);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	330a      	adds	r3, #10
 8001e48:	b2d8      	uxtb	r0, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	3307      	adds	r3, #7
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2200      	movs	r2, #0
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fe39 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(11+x,7+y,Black);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	330b      	adds	r3, #11
 8001e60:	b2d8      	uxtb	r0, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3307      	adds	r3, #7
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f7fe fe2d 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(12+x,7+y,Black);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	330c      	adds	r3, #12
 8001e78:	b2d8      	uxtb	r0, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	3307      	adds	r3, #7
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2200      	movs	r2, #0
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fe21 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(13+x,7+y,Black);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	330d      	adds	r3, #13
 8001e90:	b2d8      	uxtb	r0, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3307      	adds	r3, #7
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f7fe fe15 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(14+x,7+y,Black);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	330e      	adds	r3, #14
 8001ea8:	b2d8      	uxtb	r0, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	3307      	adds	r3, #7
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f7fe fe09 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(15+x,7+y,Black);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	330f      	adds	r3, #15
 8001ec0:	b2d8      	uxtb	r0, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3307      	adds	r3, #7
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2200      	movs	r2, #0
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7fe fdfd 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(16+x,7+y,Black);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3310      	adds	r3, #16
 8001ed8:	b2d8      	uxtb	r0, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	3307      	adds	r3, #7
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7fe fdf1 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(17+x,7+y, Black);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	3311      	adds	r3, #17
 8001ef0:	b2d8      	uxtb	r0, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	3307      	adds	r3, #7
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2200      	movs	r2, #0
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fde5 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(18+x,7+y, Black);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	3312      	adds	r3, #18
 8001f08:	b2d8      	uxtb	r0, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	3307      	adds	r3, #7
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2200      	movs	r2, #0
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7fe fdd9 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(19+x,7+y, Black);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	3313      	adds	r3, #19
 8001f20:	b2d8      	uxtb	r0, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	3307      	adds	r3, #7
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fdcd 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(20+x,7+y, Black);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	3314      	adds	r3, #20
 8001f38:	b2d8      	uxtb	r0, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	3307      	adds	r3, #7
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2200      	movs	r2, #0
 8001f44:	4619      	mov	r1, r3
 8001f46:	f7fe fdc1 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(21+x,7+y, Black);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	3315      	adds	r3, #21
 8001f50:	b2d8      	uxtb	r0, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	3307      	adds	r3, #7
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f7fe fdb5 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(22+x,7+y, Black);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	3316      	adds	r3, #22
 8001f68:	b2d8      	uxtb	r0, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	3307      	adds	r3, #7
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2200      	movs	r2, #0
 8001f74:	4619      	mov	r1, r3
 8001f76:	f7fe fda9 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(23+x,7+y, Black);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3317      	adds	r3, #23
 8001f80:	b2d8      	uxtb	r0, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	3307      	adds	r3, #7
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f7fe fd9d 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(24+x,7+y, Black);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	3318      	adds	r3, #24
 8001f98:	b2d8      	uxtb	r0, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	3307      	adds	r3, #7
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fd91 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(25+x,7+y, Black);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	3319      	adds	r3, #25
 8001fb0:	b2d8      	uxtb	r0, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	3307      	adds	r3, #7
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2200      	movs	r2, #0
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f7fe fd85 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(26+x,7+y, Black);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	331a      	adds	r3, #26
 8001fc8:	b2d8      	uxtb	r0, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	3307      	adds	r3, #7
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7fe fd79 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(27+x,7+y,Black);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	331b      	adds	r3, #27
 8001fe0:	b2d8      	uxtb	r0, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	3307      	adds	r3, #7
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2200      	movs	r2, #0
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fd6d 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(28+x,7+y,Black);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	331c      	adds	r3, #28
 8001ff8:	b2d8      	uxtb	r0, r3
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	3307      	adds	r3, #7
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2200      	movs	r2, #0
 8002004:	4619      	mov	r1, r3
 8002006:	f7fe fd61 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(29+x,7+y,Black);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	331d      	adds	r3, #29
 8002010:	b2d8      	uxtb	r0, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3307      	adds	r3, #7
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2200      	movs	r2, #0
 800201c:	4619      	mov	r1, r3
 800201e:	f7fe fd55 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(30+x,7+y,Black);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	331e      	adds	r3, #30
 8002028:	b2d8      	uxtb	r0, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	3307      	adds	r3, #7
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2200      	movs	r2, #0
 8002034:	4619      	mov	r1, r3
 8002036:	f7fe fd49 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(31+x,7+y,Black);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	331f      	adds	r3, #31
 8002040:	b2d8      	uxtb	r0, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3307      	adds	r3, #7
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2200      	movs	r2, #0
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fd3d 	bl	8000acc <ssd1306_DrawPixel>



	   			  ssd1306_DrawPixel(0+x,0+y, Black);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	b2d1      	uxtb	r1, r2
 800205a:	2200      	movs	r2, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fd35 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,1+y, Black);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	b2d8      	uxtb	r0, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	3301      	adds	r3, #1
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2200      	movs	r2, #0
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fd2b 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,2+y, Black);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	b2d8      	uxtb	r0, r3
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	3302      	adds	r3, #2
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2200      	movs	r2, #0
 8002084:	4619      	mov	r1, r3
 8002086:	f7fe fd21 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,3+y, Black);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	b2d8      	uxtb	r0, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3303      	adds	r3, #3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2200      	movs	r2, #0
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fd17 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,4+y, Black);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	b2d8      	uxtb	r0, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	3304      	adds	r3, #4
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2200      	movs	r2, #0
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7fe fd0d 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,5+y, Black);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	b2d8      	uxtb	r0, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	3305      	adds	r3, #5
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2200      	movs	r2, #0
 80020c0:	4619      	mov	r1, r3
 80020c2:	f7fe fd03 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,6+y, Black);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	b2d8      	uxtb	r0, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3306      	adds	r3, #6
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2200      	movs	r2, #0
 80020d4:	4619      	mov	r1, r3
 80020d6:	f7fe fcf9 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(0+x,7+y, Black);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	b2d8      	uxtb	r0, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	3307      	adds	r3, #7
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2200      	movs	r2, #0
 80020e8:	4619      	mov	r1, r3
 80020ea:	f7fe fcef 	bl	8000acc <ssd1306_DrawPixel>


	   			  ssd1306_DrawPixel(31+x,0+y, Black);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	331f      	adds	r3, #31
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	b2d1      	uxtb	r1, r2
 80020fa:	2200      	movs	r2, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fce5 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(31+x,1+y, Black);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	331f      	adds	r3, #31
 8002108:	b2d8      	uxtb	r0, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	3301      	adds	r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2200      	movs	r2, #0
 8002114:	4619      	mov	r1, r3
 8002116:	f7fe fcd9 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(31+x,2+y, Black);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	331f      	adds	r3, #31
 8002120:	b2d8      	uxtb	r0, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	3302      	adds	r3, #2
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2200      	movs	r2, #0
 800212c:	4619      	mov	r1, r3
 800212e:	f7fe fccd 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(31+x,3+y, Black);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	331f      	adds	r3, #31
 8002138:	b2d8      	uxtb	r0, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	3303      	adds	r3, #3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2200      	movs	r2, #0
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fcc1 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(31+x,4+y, Black);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	331f      	adds	r3, #31
 8002150:	b2d8      	uxtb	r0, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	3304      	adds	r3, #4
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2200      	movs	r2, #0
 800215c:	4619      	mov	r1, r3
 800215e:	f7fe fcb5 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(31+x,5+y, Black);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	331f      	adds	r3, #31
 8002168:	b2d8      	uxtb	r0, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	3305      	adds	r3, #5
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2200      	movs	r2, #0
 8002174:	4619      	mov	r1, r3
 8002176:	f7fe fca9 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(31+x,6+y, Black);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	331f      	adds	r3, #31
 8002180:	b2d8      	uxtb	r0, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	3306      	adds	r3, #6
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2200      	movs	r2, #0
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fc9d 	bl	8000acc <ssd1306_DrawPixel>
	   			  ssd1306_DrawPixel(31+x,7+y, Black);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	331f      	adds	r3, #31
 8002198:	b2d8      	uxtb	r0, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	3307      	adds	r3, #7
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2200      	movs	r2, #0
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7fe fc91 	bl	8000acc <ssd1306_DrawPixel>


	   			ssd1306_UpdateScreen();
 80021aa:	f7fe fc69 	bl	8000a80 <ssd1306_UpdateScreen>

}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <ssd1306_tetris_Z_90_Black>:

	   			ssd1306_UpdateScreen();

}

void ssd1306_tetris_Z_90_Black(int x, int y){
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]

		ssd1306_DrawPixel(1+x,1+y, Black);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	b2d8      	uxtb	r0, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2200      	movs	r2, #0
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe fc7a 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(2+x,1+y, Black);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3302      	adds	r3, #2
 80021de:	b2d8      	uxtb	r0, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2200      	movs	r2, #0
 80021ea:	4619      	mov	r1, r3
 80021ec:	f7fe fc6e 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(3+x,1+y, Black);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	3303      	adds	r3, #3
 80021f6:	b2d8      	uxtb	r0, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2200      	movs	r2, #0
 8002202:	4619      	mov	r1, r3
 8002204:	f7fe fc62 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(4+x,1+y, Black);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	3304      	adds	r3, #4
 800220e:	b2d8      	uxtb	r0, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	3301      	adds	r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2200      	movs	r2, #0
 800221a:	4619      	mov	r1, r3
 800221c:	f7fe fc56 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(5+x,1+y, Black);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	3305      	adds	r3, #5
 8002226:	b2d8      	uxtb	r0, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	3301      	adds	r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2200      	movs	r2, #0
 8002232:	4619      	mov	r1, r3
 8002234:	f7fe fc4a 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(6+x,1+y, Black);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	3306      	adds	r3, #6
 800223e:	b2d8      	uxtb	r0, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3301      	adds	r3, #1
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2200      	movs	r2, #0
 800224a:	4619      	mov	r1, r3
 800224c:	f7fe fc3e 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(7+x,1+y, Black);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	3307      	adds	r3, #7
 8002256:	b2d8      	uxtb	r0, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	3301      	adds	r3, #1
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2200      	movs	r2, #0
 8002262:	4619      	mov	r1, r3
 8002264:	f7fe fc32 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(8+x,1+y, Black);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	3308      	adds	r3, #8
 800226e:	b2d8      	uxtb	r0, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2200      	movs	r2, #0
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fc26 	bl	8000acc <ssd1306_DrawPixel>

		ssd1306_DrawPixel(1+x,2+y, Black);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	3301      	adds	r3, #1
 8002286:	b2d8      	uxtb	r0, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	3302      	adds	r3, #2
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2200      	movs	r2, #0
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fc1a 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,3+y, Black);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	3301      	adds	r3, #1
 800229e:	b2d8      	uxtb	r0, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	3303      	adds	r3, #3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2200      	movs	r2, #0
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fc0e 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,4+y, Black);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	3301      	adds	r3, #1
 80022b6:	b2d8      	uxtb	r0, r3
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	3304      	adds	r3, #4
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2200      	movs	r2, #0
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7fe fc02 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,5+y, Black);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	b2d8      	uxtb	r0, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3305      	adds	r3, #5
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2200      	movs	r2, #0
 80022da:	4619      	mov	r1, r3
 80022dc:	f7fe fbf6 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,6+y, Black);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	b2d8      	uxtb	r0, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	3306      	adds	r3, #6
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2200      	movs	r2, #0
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7fe fbea 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,7+y, Black);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	3301      	adds	r3, #1
 80022fe:	b2d8      	uxtb	r0, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	3307      	adds	r3, #7
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2200      	movs	r2, #0
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fbde 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,8+y, Black);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3301      	adds	r3, #1
 8002316:	b2d8      	uxtb	r0, r3
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3308      	adds	r3, #8
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2200      	movs	r2, #0
 8002322:	4619      	mov	r1, r3
 8002324:	f7fe fbd2 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,9+y, Black);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	3301      	adds	r3, #1
 800232e:	b2d8      	uxtb	r0, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	3309      	adds	r3, #9
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2200      	movs	r2, #0
 800233a:	4619      	mov	r1, r3
 800233c:	f7fe fbc6 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,10+y, Black);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	b2db      	uxtb	r3, r3
 8002344:	3301      	adds	r3, #1
 8002346:	b2d8      	uxtb	r0, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	330a      	adds	r3, #10
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2200      	movs	r2, #0
 8002352:	4619      	mov	r1, r3
 8002354:	f7fe fbba 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,11+y, Black);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	3301      	adds	r3, #1
 800235e:	b2d8      	uxtb	r0, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	330b      	adds	r3, #11
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2200      	movs	r2, #0
 800236a:	4619      	mov	r1, r3
 800236c:	f7fe fbae 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,12+y, Black);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3301      	adds	r3, #1
 8002376:	b2d8      	uxtb	r0, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	330c      	adds	r3, #12
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2200      	movs	r2, #0
 8002382:	4619      	mov	r1, r3
 8002384:	f7fe fba2 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,13+y, Black);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	b2d8      	uxtb	r0, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	330d      	adds	r3, #13
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2200      	movs	r2, #0
 800239a:	4619      	mov	r1, r3
 800239c:	f7fe fb96 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,14+y, Black);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	b2d8      	uxtb	r0, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	330e      	adds	r3, #14
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2200      	movs	r2, #0
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7fe fb8a 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,15+y, Black);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3301      	adds	r3, #1
 80023be:	b2d8      	uxtb	r0, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	330f      	adds	r3, #15
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2200      	movs	r2, #0
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fb7e 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,16+y, Black);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	3301      	adds	r3, #1
 80023d6:	b2d8      	uxtb	r0, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	3310      	adds	r3, #16
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2200      	movs	r2, #0
 80023e2:	4619      	mov	r1, r3
 80023e4:	f7fe fb72 	bl	8000acc <ssd1306_DrawPixel>

		ssd1306_DrawPixel(2+x,16+y, Black);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	3302      	adds	r3, #2
 80023ee:	b2d8      	uxtb	r0, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	3310      	adds	r3, #16
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2200      	movs	r2, #0
 80023fa:	4619      	mov	r1, r3
 80023fc:	f7fe fb66 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(3+x,16+y, Black);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	3303      	adds	r3, #3
 8002406:	b2d8      	uxtb	r0, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3310      	adds	r3, #16
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2200      	movs	r2, #0
 8002412:	4619      	mov	r1, r3
 8002414:	f7fe fb5a 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(4+x,16+y, Black);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	3304      	adds	r3, #4
 800241e:	b2d8      	uxtb	r0, r3
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2db      	uxtb	r3, r3
 8002424:	3310      	adds	r3, #16
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2200      	movs	r2, #0
 800242a:	4619      	mov	r1, r3
 800242c:	f7fe fb4e 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(5+x,16+y, Black);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	3305      	adds	r3, #5
 8002436:	b2d8      	uxtb	r0, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3310      	adds	r3, #16
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2200      	movs	r2, #0
 8002442:	4619      	mov	r1, r3
 8002444:	f7fe fb42 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(6+x,16+y, Black);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	3306      	adds	r3, #6
 800244e:	b2d8      	uxtb	r0, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	3310      	adds	r3, #16
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2200      	movs	r2, #0
 800245a:	4619      	mov	r1, r3
 800245c:	f7fe fb36 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(7+x,16+y, Black);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	3307      	adds	r3, #7
 8002466:	b2d8      	uxtb	r0, r3
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3310      	adds	r3, #16
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2200      	movs	r2, #0
 8002472:	4619      	mov	r1, r3
 8002474:	f7fe fb2a 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(8+x,16+y, Black);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	3308      	adds	r3, #8
 800247e:	b2d8      	uxtb	r0, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	3310      	adds	r3, #16
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2200      	movs	r2, #0
 800248a:	4619      	mov	r1, r3
 800248c:	f7fe fb1e 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,16+y, Black);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	3309      	adds	r3, #9
 8002496:	b2d8      	uxtb	r0, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3310      	adds	r3, #16
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2200      	movs	r2, #0
 80024a2:	4619      	mov	r1, r3
 80024a4:	f7fe fb12 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(9+x,16+y, Black);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	3309      	adds	r3, #9
 80024ae:	b2d8      	uxtb	r0, r3
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3310      	adds	r3, #16
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2200      	movs	r2, #0
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fb06 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,17+y, Black);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	3309      	adds	r3, #9
 80024c6:	b2d8      	uxtb	r0, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3311      	adds	r3, #17
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2200      	movs	r2, #0
 80024d2:	4619      	mov	r1, r3
 80024d4:	f7fe fafa 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,18+y, Black);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	3309      	adds	r3, #9
 80024de:	b2d8      	uxtb	r0, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	3312      	adds	r3, #18
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	4619      	mov	r1, r3
 80024ec:	f7fe faee 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,19+y, Black);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	3309      	adds	r3, #9
 80024f6:	b2d8      	uxtb	r0, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	3313      	adds	r3, #19
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2200      	movs	r2, #0
 8002502:	4619      	mov	r1, r3
 8002504:	f7fe fae2 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,20+y, Black);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	3309      	adds	r3, #9
 800250e:	b2d8      	uxtb	r0, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	3314      	adds	r3, #20
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2200      	movs	r2, #0
 800251a:	4619      	mov	r1, r3
 800251c:	f7fe fad6 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,21+y, Black);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3309      	adds	r3, #9
 8002526:	b2d8      	uxtb	r0, r3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	3315      	adds	r3, #21
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2200      	movs	r2, #0
 8002532:	4619      	mov	r1, r3
 8002534:	f7fe faca 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,22+y, Black);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	3309      	adds	r3, #9
 800253e:	b2d8      	uxtb	r0, r3
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	3316      	adds	r3, #22
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2200      	movs	r2, #0
 800254a:	4619      	mov	r1, r3
 800254c:	f7fe fabe 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,23+y, Black);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	3309      	adds	r3, #9
 8002556:	b2d8      	uxtb	r0, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3317      	adds	r3, #23
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2200      	movs	r2, #0
 8002562:	4619      	mov	r1, r3
 8002564:	f7fe fab2 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,24+y, Black);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	3309      	adds	r3, #9
 800256e:	b2d8      	uxtb	r0, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	3318      	adds	r3, #24
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2200      	movs	r2, #0
 800257a:	4619      	mov	r1, r3
 800257c:	f7fe faa6 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(10+x,24+y, Black);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	330a      	adds	r3, #10
 8002586:	b2d8      	uxtb	r0, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	3318      	adds	r3, #24
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2200      	movs	r2, #0
 8002592:	4619      	mov	r1, r3
 8002594:	f7fe fa9a 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(11+x,24+y, Black);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	330b      	adds	r3, #11
 800259e:	b2d8      	uxtb	r0, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3318      	adds	r3, #24
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2200      	movs	r2, #0
 80025aa:	4619      	mov	r1, r3
 80025ac:	f7fe fa8e 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(12+x,24+y, Black);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	330c      	adds	r3, #12
 80025b6:	b2d8      	uxtb	r0, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	3318      	adds	r3, #24
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2200      	movs	r2, #0
 80025c2:	4619      	mov	r1, r3
 80025c4:	f7fe fa82 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(13+x,24+y, Black);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	330d      	adds	r3, #13
 80025ce:	b2d8      	uxtb	r0, r3
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	3318      	adds	r3, #24
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2200      	movs	r2, #0
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fa76 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(14+x,24+y, Black);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	330e      	adds	r3, #14
 80025e6:	b2d8      	uxtb	r0, r3
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	3318      	adds	r3, #24
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2200      	movs	r2, #0
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7fe fa6a 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(15+x,24+y, Black);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	330f      	adds	r3, #15
 80025fe:	b2d8      	uxtb	r0, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	3318      	adds	r3, #24
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2200      	movs	r2, #0
 800260a:	4619      	mov	r1, r3
 800260c:	f7fe fa5e 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,24+y, Black);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	3310      	adds	r3, #16
 8002616:	b2d8      	uxtb	r0, r3
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3318      	adds	r3, #24
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2200      	movs	r2, #0
 8002622:	4619      	mov	r1, r3
 8002624:	f7fe fa52 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(8+x,2+y, Black);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	3308      	adds	r3, #8
 800262e:	b2d8      	uxtb	r0, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	3302      	adds	r3, #2
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2200      	movs	r2, #0
 800263a:	4619      	mov	r1, r3
 800263c:	f7fe fa46 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(8+x,3+y, Black);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	3308      	adds	r3, #8
 8002646:	b2d8      	uxtb	r0, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3303      	adds	r3, #3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2200      	movs	r2, #0
 8002652:	4619      	mov	r1, r3
 8002654:	f7fe fa3a 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(8+x,4+y, Black);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3308      	adds	r3, #8
 800265e:	b2d8      	uxtb	r0, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	3304      	adds	r3, #4
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2200      	movs	r2, #0
 800266a:	4619      	mov	r1, r3
 800266c:	f7fe fa2e 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(8+x,5+y, Black);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	b2db      	uxtb	r3, r3
 8002674:	3308      	adds	r3, #8
 8002676:	b2d8      	uxtb	r0, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	3305      	adds	r3, #5
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2200      	movs	r2, #0
 8002682:	4619      	mov	r1, r3
 8002684:	f7fe fa22 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(8+x,6+y, Black);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	b2db      	uxtb	r3, r3
 800268c:	3308      	adds	r3, #8
 800268e:	b2d8      	uxtb	r0, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	3306      	adds	r3, #6
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2200      	movs	r2, #0
 800269a:	4619      	mov	r1, r3
 800269c:	f7fe fa16 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(8+x,7+y, Black);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	3308      	adds	r3, #8
 80026a6:	b2d8      	uxtb	r0, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3307      	adds	r3, #7
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2200      	movs	r2, #0
 80026b2:	4619      	mov	r1, r3
 80026b4:	f7fe fa0a 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(8+x,8+y, Black);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	3308      	adds	r3, #8
 80026be:	b2d8      	uxtb	r0, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	3308      	adds	r3, #8
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2200      	movs	r2, #0
 80026ca:	4619      	mov	r1, r3
 80026cc:	f7fe f9fe 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(8+x,9+y, Black);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	3308      	adds	r3, #8
 80026d6:	b2d8      	uxtb	r0, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	3309      	adds	r3, #9
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2200      	movs	r2, #0
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7fe f9f2 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,9+y, Black);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3309      	adds	r3, #9
 80026ee:	b2d8      	uxtb	r0, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	3309      	adds	r3, #9
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2200      	movs	r2, #0
 80026fa:	4619      	mov	r1, r3
 80026fc:	f7fe f9e6 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(10+x,9+y, Black);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	330a      	adds	r3, #10
 8002706:	b2d8      	uxtb	r0, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	3309      	adds	r3, #9
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2200      	movs	r2, #0
 8002712:	4619      	mov	r1, r3
 8002714:	f7fe f9da 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(11+x,9+y, Black);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	330b      	adds	r3, #11
 800271e:	b2d8      	uxtb	r0, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	3309      	adds	r3, #9
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2200      	movs	r2, #0
 800272a:	4619      	mov	r1, r3
 800272c:	f7fe f9ce 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(12+x,9+y, Black);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	330c      	adds	r3, #12
 8002736:	b2d8      	uxtb	r0, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3309      	adds	r3, #9
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2200      	movs	r2, #0
 8002742:	4619      	mov	r1, r3
 8002744:	f7fe f9c2 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(13+x,9+y, Black);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	330d      	adds	r3, #13
 800274e:	b2d8      	uxtb	r0, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	3309      	adds	r3, #9
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2200      	movs	r2, #0
 800275a:	4619      	mov	r1, r3
 800275c:	f7fe f9b6 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(14+x,9+y, Black);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	330e      	adds	r3, #14
 8002766:	b2d8      	uxtb	r0, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3309      	adds	r3, #9
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2200      	movs	r2, #0
 8002772:	4619      	mov	r1, r3
 8002774:	f7fe f9aa 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(15+x,9+y, Black);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	330f      	adds	r3, #15
 800277e:	b2d8      	uxtb	r0, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3309      	adds	r3, #9
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2200      	movs	r2, #0
 800278a:	4619      	mov	r1, r3
 800278c:	f7fe f99e 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,9+y, Black);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	3310      	adds	r3, #16
 8002796:	b2d8      	uxtb	r0, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	3309      	adds	r3, #9
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2200      	movs	r2, #0
 80027a2:	4619      	mov	r1, r3
 80027a4:	f7fe f992 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(16+x,9+y, Black);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3310      	adds	r3, #16
 80027ae:	b2d8      	uxtb	r0, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	3309      	adds	r3, #9
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2200      	movs	r2, #0
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7fe f986 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,10+y, Black);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	3310      	adds	r3, #16
 80027c6:	b2d8      	uxtb	r0, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	330a      	adds	r3, #10
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2200      	movs	r2, #0
 80027d2:	4619      	mov	r1, r3
 80027d4:	f7fe f97a 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,11+y, Black);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	3310      	adds	r3, #16
 80027de:	b2d8      	uxtb	r0, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	330b      	adds	r3, #11
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2200      	movs	r2, #0
 80027ea:	4619      	mov	r1, r3
 80027ec:	f7fe f96e 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,12+y, Black);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	3310      	adds	r3, #16
 80027f6:	b2d8      	uxtb	r0, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	330c      	adds	r3, #12
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2200      	movs	r2, #0
 8002802:	4619      	mov	r1, r3
 8002804:	f7fe f962 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,13+y, Black);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	3310      	adds	r3, #16
 800280e:	b2d8      	uxtb	r0, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	330d      	adds	r3, #13
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2200      	movs	r2, #0
 800281a:	4619      	mov	r1, r3
 800281c:	f7fe f956 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,14+y, Black);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	3310      	adds	r3, #16
 8002826:	b2d8      	uxtb	r0, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	330e      	adds	r3, #14
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2200      	movs	r2, #0
 8002832:	4619      	mov	r1, r3
 8002834:	f7fe f94a 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,15+y, Black);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	3310      	adds	r3, #16
 800283e:	b2d8      	uxtb	r0, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	330f      	adds	r3, #15
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2200      	movs	r2, #0
 800284a:	4619      	mov	r1, r3
 800284c:	f7fe f93e 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,16+y, Black);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	3310      	adds	r3, #16
 8002856:	b2d8      	uxtb	r0, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	3310      	adds	r3, #16
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2200      	movs	r2, #0
 8002862:	4619      	mov	r1, r3
 8002864:	f7fe f932 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,17+y, Black);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	3310      	adds	r3, #16
 800286e:	b2d8      	uxtb	r0, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	3311      	adds	r3, #17
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2200      	movs	r2, #0
 800287a:	4619      	mov	r1, r3
 800287c:	f7fe f926 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,18+y, Black);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	3310      	adds	r3, #16
 8002886:	b2d8      	uxtb	r0, r3
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3312      	adds	r3, #18
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2200      	movs	r2, #0
 8002892:	4619      	mov	r1, r3
 8002894:	f7fe f91a 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,19+y, Black);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	3310      	adds	r3, #16
 800289e:	b2d8      	uxtb	r0, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3313      	adds	r3, #19
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2200      	movs	r2, #0
 80028aa:	4619      	mov	r1, r3
 80028ac:	f7fe f90e 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,20+y, Black);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	3310      	adds	r3, #16
 80028b6:	b2d8      	uxtb	r0, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3314      	adds	r3, #20
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2200      	movs	r2, #0
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7fe f902 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,21+y, Black);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	3310      	adds	r3, #16
 80028ce:	b2d8      	uxtb	r0, r3
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	3315      	adds	r3, #21
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2200      	movs	r2, #0
 80028da:	4619      	mov	r1, r3
 80028dc:	f7fe f8f6 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,22+y, Black);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3310      	adds	r3, #16
 80028e6:	b2d8      	uxtb	r0, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	3316      	adds	r3, #22
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2200      	movs	r2, #0
 80028f2:	4619      	mov	r1, r3
 80028f4:	f7fe f8ea 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,23+y, Black);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3310      	adds	r3, #16
 80028fe:	b2d8      	uxtb	r0, r3
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	3317      	adds	r3, #23
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2200      	movs	r2, #0
 800290a:	4619      	mov	r1, r3
 800290c:	f7fe f8de 	bl	8000acc <ssd1306_DrawPixel>

	   			ssd1306_UpdateScreen();
 8002910:	f7fe f8b6 	bl	8000a80 <ssd1306_UpdateScreen>


}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <ssd1306_tetris_T_Black>:
	ssd1306_DrawPixel(2+x,9+ y, White);

    ssd1306_UpdateScreen();
}

void ssd1306_tetris_T_Black(int x, int y) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]

	ssd1306_DrawPixel(16+x,1+y, Black);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	3310      	adds	r3, #16
 800292c:	b2d8      	uxtb	r0, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	3301      	adds	r3, #1
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2200      	movs	r2, #0
 8002938:	4619      	mov	r1, r3
 800293a:	f7fe f8c7 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,2+y, Black);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	3310      	adds	r3, #16
 8002944:	b2d8      	uxtb	r0, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	3302      	adds	r3, #2
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2200      	movs	r2, #0
 8002950:	4619      	mov	r1, r3
 8002952:	f7fe f8bb 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,3+y, Black);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	3310      	adds	r3, #16
 800295c:	b2d8      	uxtb	r0, r3
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	3303      	adds	r3, #3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2200      	movs	r2, #0
 8002968:	4619      	mov	r1, r3
 800296a:	f7fe f8af 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,4+y, Black);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	3310      	adds	r3, #16
 8002974:	b2d8      	uxtb	r0, r3
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3304      	adds	r3, #4
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2200      	movs	r2, #0
 8002980:	4619      	mov	r1, r3
 8002982:	f7fe f8a3 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,5+y, Black);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	3310      	adds	r3, #16
 800298c:	b2d8      	uxtb	r0, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	3305      	adds	r3, #5
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2200      	movs	r2, #0
 8002998:	4619      	mov	r1, r3
 800299a:	f7fe f897 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,6+y, Black);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3310      	adds	r3, #16
 80029a4:	b2d8      	uxtb	r0, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	3306      	adds	r3, #6
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2200      	movs	r2, #0
 80029b0:	4619      	mov	r1, r3
 80029b2:	f7fe f88b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,7+y, Black);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	3310      	adds	r3, #16
 80029bc:	b2d8      	uxtb	r0, r3
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	3307      	adds	r3, #7
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2200      	movs	r2, #0
 80029c8:	4619      	mov	r1, r3
 80029ca:	f7fe f87f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,8+y, Black);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3310      	adds	r3, #16
 80029d4:	b2d8      	uxtb	r0, r3
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	3308      	adds	r3, #8
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2200      	movs	r2, #0
 80029e0:	4619      	mov	r1, r3
 80029e2:	f7fe f873 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,9+y, Black);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	3310      	adds	r3, #16
 80029ec:	b2d8      	uxtb	r0, r3
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	3309      	adds	r3, #9
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2200      	movs	r2, #0
 80029f8:	4619      	mov	r1, r3
 80029fa:	f7fe f867 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,10+y, Black);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	3310      	adds	r3, #16
 8002a04:	b2d8      	uxtb	r0, r3
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	330a      	adds	r3, #10
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4619      	mov	r1, r3
 8002a12:	f7fe f85b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,11+y, Black);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	3310      	adds	r3, #16
 8002a1c:	b2d8      	uxtb	r0, r3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	330b      	adds	r3, #11
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2200      	movs	r2, #0
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f7fe f84f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,12+y, Black);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	3310      	adds	r3, #16
 8002a34:	b2d8      	uxtb	r0, r3
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	330c      	adds	r3, #12
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2200      	movs	r2, #0
 8002a40:	4619      	mov	r1, r3
 8002a42:	f7fe f843 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,13+y, Black);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	3310      	adds	r3, #16
 8002a4c:	b2d8      	uxtb	r0, r3
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	330d      	adds	r3, #13
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2200      	movs	r2, #0
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f7fe f837 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,14+y, Black);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	3310      	adds	r3, #16
 8002a64:	b2d8      	uxtb	r0, r3
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	330e      	adds	r3, #14
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4619      	mov	r1, r3
 8002a72:	f7fe f82b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,15+y, Black);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	3310      	adds	r3, #16
 8002a7c:	b2d8      	uxtb	r0, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	330f      	adds	r3, #15
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2200      	movs	r2, #0
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f7fe f81f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,16+y, Black);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	3310      	adds	r3, #16
 8002a94:	b2d8      	uxtb	r0, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	3310      	adds	r3, #16
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7fe f813 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,17+y, Black);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	3310      	adds	r3, #16
 8002aac:	b2d8      	uxtb	r0, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	3311      	adds	r3, #17
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f7fe f807 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,18+y, Black);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3310      	adds	r3, #16
 8002ac4:	b2d8      	uxtb	r0, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	3312      	adds	r3, #18
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2200      	movs	r2, #0
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f7fd fffb 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,19+y, Black);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	3310      	adds	r3, #16
 8002adc:	b2d8      	uxtb	r0, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	3313      	adds	r3, #19
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f7fd ffef 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,20+y, Black);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	3310      	adds	r3, #16
 8002af4:	b2d8      	uxtb	r0, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3314      	adds	r3, #20
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2200      	movs	r2, #0
 8002b00:	4619      	mov	r1, r3
 8002b02:	f7fd ffe3 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,21+y, Black);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	3310      	adds	r3, #16
 8002b0c:	b2d8      	uxtb	r0, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3315      	adds	r3, #21
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2200      	movs	r2, #0
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f7fd ffd7 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,22+y, Black);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3310      	adds	r3, #16
 8002b24:	b2d8      	uxtb	r0, r3
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	3316      	adds	r3, #22
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2200      	movs	r2, #0
 8002b30:	4619      	mov	r1, r3
 8002b32:	f7fd ffcb 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,23+y, Black);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	3310      	adds	r3, #16
 8002b3c:	b2d8      	uxtb	r0, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	3317      	adds	r3, #23
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2200      	movs	r2, #0
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f7fd ffbf 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(16+x,24+y, Black);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	3310      	adds	r3, #16
 8002b54:	b2d8      	uxtb	r0, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	3318      	adds	r3, #24
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2200      	movs	r2, #0
 8002b60:	4619      	mov	r1, r3
 8002b62:	f7fd ffb3 	bl	8000acc <ssd1306_DrawPixel>

		ssd1306_DrawPixel(9+x,1+y, Black);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	3309      	adds	r3, #9
 8002b6c:	b2d8      	uxtb	r0, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2200      	movs	r2, #0
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f7fd ffa7 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,2+y, Black);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	3309      	adds	r3, #9
 8002b84:	b2d8      	uxtb	r0, r3
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2200      	movs	r2, #0
 8002b90:	4619      	mov	r1, r3
 8002b92:	f7fd ff9b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,3+y, Black);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	3309      	adds	r3, #9
 8002b9c:	b2d8      	uxtb	r0, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	3303      	adds	r3, #3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f7fd ff8f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,4+y, Black);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	3309      	adds	r3, #9
 8002bb4:	b2d8      	uxtb	r0, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	3304      	adds	r3, #4
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f7fd ff83 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,5+y, Black);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	3309      	adds	r3, #9
 8002bcc:	b2d8      	uxtb	r0, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	3305      	adds	r3, #5
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f7fd ff77 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,6+y, Black);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	3309      	adds	r3, #9
 8002be4:	b2d8      	uxtb	r0, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	3306      	adds	r3, #6
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2200      	movs	r2, #0
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f7fd ff6b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,7+y, Black);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	3309      	adds	r3, #9
 8002bfc:	b2d8      	uxtb	r0, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	3307      	adds	r3, #7
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2200      	movs	r2, #0
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7fd ff5f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,8+y, Black);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	3309      	adds	r3, #9
 8002c14:	b2d8      	uxtb	r0, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	3308      	adds	r3, #8
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2200      	movs	r2, #0
 8002c20:	4619      	mov	r1, r3
 8002c22:	f7fd ff53 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,9+y, Black);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	3309      	adds	r3, #9
 8002c2c:	b2d8      	uxtb	r0, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	3309      	adds	r3, #9
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2200      	movs	r2, #0
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f7fd ff47 	bl	8000acc <ssd1306_DrawPixel>

		ssd1306_DrawPixel(9+x,16+y, Black);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	3309      	adds	r3, #9
 8002c44:	b2d8      	uxtb	r0, r3
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	3310      	adds	r3, #16
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2200      	movs	r2, #0
 8002c50:	4619      	mov	r1, r3
 8002c52:	f7fd ff3b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,17+y, Black);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	3309      	adds	r3, #9
 8002c5c:	b2d8      	uxtb	r0, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	3311      	adds	r3, #17
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2200      	movs	r2, #0
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f7fd ff2f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,18+y, Black);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3309      	adds	r3, #9
 8002c74:	b2d8      	uxtb	r0, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	3312      	adds	r3, #18
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4619      	mov	r1, r3
 8002c82:	f7fd ff23 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,19+y, Black);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	3309      	adds	r3, #9
 8002c8c:	b2d8      	uxtb	r0, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	3313      	adds	r3, #19
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2200      	movs	r2, #0
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f7fd ff17 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,20+y, Black);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	3309      	adds	r3, #9
 8002ca4:	b2d8      	uxtb	r0, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	3314      	adds	r3, #20
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2200      	movs	r2, #0
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	f7fd ff0b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,21+y, Black);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	3309      	adds	r3, #9
 8002cbc:	b2d8      	uxtb	r0, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3315      	adds	r3, #21
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f7fd feff 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,22+y, Black);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3309      	adds	r3, #9
 8002cd4:	b2d8      	uxtb	r0, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	3316      	adds	r3, #22
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2200      	movs	r2, #0
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f7fd fef3 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(9+x,23+y, Black);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	3309      	adds	r3, #9
 8002cec:	b2d8      	uxtb	r0, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	3317      	adds	r3, #23
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f7fd fee7 	bl	8000acc <ssd1306_DrawPixel>


		ssd1306_DrawPixel(10+x,1+y, Black);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	330a      	adds	r3, #10
 8002d04:	b2d8      	uxtb	r0, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2200      	movs	r2, #0
 8002d10:	4619      	mov	r1, r3
 8002d12:	f7fd fedb 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(11+x,1+y, Black);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	330b      	adds	r3, #11
 8002d1c:	b2d8      	uxtb	r0, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	3301      	adds	r3, #1
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2200      	movs	r2, #0
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fd fecf 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(12+x,1+y, Black);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	330c      	adds	r3, #12
 8002d34:	b2d8      	uxtb	r0, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2200      	movs	r2, #0
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7fd fec3 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(13+x,1+y, Black);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	330d      	adds	r3, #13
 8002d4c:	b2d8      	uxtb	r0, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2200      	movs	r2, #0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7fd feb7 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(14+x,1+y, Black);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	330e      	adds	r3, #14
 8002d64:	b2d8      	uxtb	r0, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2200      	movs	r2, #0
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd feab 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(15+x,1+y, Black);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	330f      	adds	r3, #15
 8002d7c:	b2d8      	uxtb	r0, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2200      	movs	r2, #0
 8002d88:	4619      	mov	r1, r3
 8002d8a:	f7fd fe9f 	bl	8000acc <ssd1306_DrawPixel>

		ssd1306_DrawPixel(9+x,24+y, Black);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	3309      	adds	r3, #9
 8002d94:	b2d8      	uxtb	r0, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3318      	adds	r3, #24
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2200      	movs	r2, #0
 8002da0:	4619      	mov	r1, r3
 8002da2:	f7fd fe93 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(10+x,24+y, Black);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	330a      	adds	r3, #10
 8002dac:	b2d8      	uxtb	r0, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	3318      	adds	r3, #24
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2200      	movs	r2, #0
 8002db8:	4619      	mov	r1, r3
 8002dba:	f7fd fe87 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(11+x,24+y, Black);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	330b      	adds	r3, #11
 8002dc4:	b2d8      	uxtb	r0, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	3318      	adds	r3, #24
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f7fd fe7b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(12+x,24+y, Black);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	330c      	adds	r3, #12
 8002ddc:	b2d8      	uxtb	r0, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	3318      	adds	r3, #24
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2200      	movs	r2, #0
 8002de8:	4619      	mov	r1, r3
 8002dea:	f7fd fe6f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(13+x,24+y, Black);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	330d      	adds	r3, #13
 8002df4:	b2d8      	uxtb	r0, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	3318      	adds	r3, #24
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2200      	movs	r2, #0
 8002e00:	4619      	mov	r1, r3
 8002e02:	f7fd fe63 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(14+x,24+y, Black);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	330e      	adds	r3, #14
 8002e0c:	b2d8      	uxtb	r0, r3
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	3318      	adds	r3, #24
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2200      	movs	r2, #0
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7fd fe57 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(15+x,24+y, Black);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	330f      	adds	r3, #15
 8002e24:	b2d8      	uxtb	r0, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	3318      	adds	r3, #24
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2200      	movs	r2, #0
 8002e30:	4619      	mov	r1, r3
 8002e32:	f7fd fe4b 	bl	8000acc <ssd1306_DrawPixel>

		ssd1306_DrawPixel(1+x,16+y, Black);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	b2d8      	uxtb	r0, r3
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	3310      	adds	r3, #16
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2200      	movs	r2, #0
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f7fd fe3f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(2+x,16+y, Black);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	3302      	adds	r3, #2
 8002e54:	b2d8      	uxtb	r0, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	3310      	adds	r3, #16
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2200      	movs	r2, #0
 8002e60:	4619      	mov	r1, r3
 8002e62:	f7fd fe33 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(3+x,16+y, Black);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	3303      	adds	r3, #3
 8002e6c:	b2d8      	uxtb	r0, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	3310      	adds	r3, #16
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2200      	movs	r2, #0
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7fd fe27 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(4+x,16+y, Black);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	3304      	adds	r3, #4
 8002e84:	b2d8      	uxtb	r0, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	3310      	adds	r3, #16
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2200      	movs	r2, #0
 8002e90:	4619      	mov	r1, r3
 8002e92:	f7fd fe1b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(5+x,16+y, Black);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	3305      	adds	r3, #5
 8002e9c:	b2d8      	uxtb	r0, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	3310      	adds	r3, #16
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f7fd fe0f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(6+x,16+y, Black);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	3306      	adds	r3, #6
 8002eb4:	b2d8      	uxtb	r0, r3
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	3310      	adds	r3, #16
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f7fd fe03 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(7+x,16+y, Black);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	3307      	adds	r3, #7
 8002ecc:	b2d8      	uxtb	r0, r3
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	3310      	adds	r3, #16
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f7fd fdf7 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(8+x,16+y, Black);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	b2d8      	uxtb	r0, r3
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	3310      	adds	r3, #16
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f7fd fdeb 	bl	8000acc <ssd1306_DrawPixel>

		ssd1306_DrawPixel(1+x,9+y, Black);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	b2d8      	uxtb	r0, r3
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	3309      	adds	r3, #9
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2200      	movs	r2, #0
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f7fd fddf 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(2+x,9+y, Black);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	3302      	adds	r3, #2
 8002f14:	b2d8      	uxtb	r0, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	3309      	adds	r3, #9
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2200      	movs	r2, #0
 8002f20:	4619      	mov	r1, r3
 8002f22:	f7fd fdd3 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(3+x,9+y, Black);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	3303      	adds	r3, #3
 8002f2c:	b2d8      	uxtb	r0, r3
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	3309      	adds	r3, #9
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2200      	movs	r2, #0
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f7fd fdc7 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(4+x,9+y, Black);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	3304      	adds	r3, #4
 8002f44:	b2d8      	uxtb	r0, r3
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	3309      	adds	r3, #9
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2200      	movs	r2, #0
 8002f50:	4619      	mov	r1, r3
 8002f52:	f7fd fdbb 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(5+x,9+y, Black);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	3305      	adds	r3, #5
 8002f5c:	b2d8      	uxtb	r0, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	3309      	adds	r3, #9
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2200      	movs	r2, #0
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f7fd fdaf 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(6+x,9+y, Black);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	3306      	adds	r3, #6
 8002f74:	b2d8      	uxtb	r0, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	3309      	adds	r3, #9
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2200      	movs	r2, #0
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7fd fda3 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(7+x,9+y, Black);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	3307      	adds	r3, #7
 8002f8c:	b2d8      	uxtb	r0, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3309      	adds	r3, #9
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2200      	movs	r2, #0
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f7fd fd97 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(8+x,9+y, Black);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	b2d8      	uxtb	r0, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	3309      	adds	r3, #9
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2200      	movs	r2, #0
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f7fd fd8b 	bl	8000acc <ssd1306_DrawPixel>

		ssd1306_DrawPixel(1+x,10+y, Black);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	b2d8      	uxtb	r0, r3
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	330a      	adds	r3, #10
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f7fd fd7f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,11+y, Black);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	b2d8      	uxtb	r0, r3
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	330b      	adds	r3, #11
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2200      	movs	r2, #0
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	f7fd fd73 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,12+y, Black);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	b2d8      	uxtb	r0, r3
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	330c      	adds	r3, #12
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f7fd fd67 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,13+y, Black);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	b2db      	uxtb	r3, r3
 8003002:	3301      	adds	r3, #1
 8003004:	b2d8      	uxtb	r0, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	330d      	adds	r3, #13
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2200      	movs	r2, #0
 8003010:	4619      	mov	r1, r3
 8003012:	f7fd fd5b 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,14+y, Black);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	3301      	adds	r3, #1
 800301c:	b2d8      	uxtb	r0, r3
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	330e      	adds	r3, #14
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2200      	movs	r2, #0
 8003028:	4619      	mov	r1, r3
 800302a:	f7fd fd4f 	bl	8000acc <ssd1306_DrawPixel>
		ssd1306_DrawPixel(1+x,15+y, Black);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	3301      	adds	r3, #1
 8003034:	b2d8      	uxtb	r0, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	330f      	adds	r3, #15
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2200      	movs	r2, #0
 8003040:	4619      	mov	r1, r3
 8003042:	f7fd fd43 	bl	8000acc <ssd1306_DrawPixel>

	    ssd1306_UpdateScreen();
 8003046:	f7fd fd1b 	bl	8000a80 <ssd1306_UpdateScreen>
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <ssd1306_tetris_T_White>:
void ssd1306_tetris_T_White(int x, int y) {
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	6039      	str	r1, [r7, #0]

	ssd1306_DrawPixel(16+x,1+y, White);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	3310      	adds	r3, #16
 8003062:	b2d8      	uxtb	r0, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	3301      	adds	r3, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2201      	movs	r2, #1
 800306e:	4619      	mov	r1, r3
 8003070:	f7fd fd2c 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,2+y, White);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	3310      	adds	r3, #16
 800307a:	b2d8      	uxtb	r0, r3
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	3302      	adds	r3, #2
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2201      	movs	r2, #1
 8003086:	4619      	mov	r1, r3
 8003088:	f7fd fd20 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,3+y, White);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3310      	adds	r3, #16
 8003092:	b2d8      	uxtb	r0, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	3303      	adds	r3, #3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2201      	movs	r2, #1
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fd14 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,4+y, White);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	3310      	adds	r3, #16
 80030aa:	b2d8      	uxtb	r0, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	3304      	adds	r3, #4
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2201      	movs	r2, #1
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7fd fd08 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,5+y, White);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	3310      	adds	r3, #16
 80030c2:	b2d8      	uxtb	r0, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	3305      	adds	r3, #5
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2201      	movs	r2, #1
 80030ce:	4619      	mov	r1, r3
 80030d0:	f7fd fcfc 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,6+y, White);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3310      	adds	r3, #16
 80030da:	b2d8      	uxtb	r0, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	3306      	adds	r3, #6
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2201      	movs	r2, #1
 80030e6:	4619      	mov	r1, r3
 80030e8:	f7fd fcf0 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,7+y, White);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	3310      	adds	r3, #16
 80030f2:	b2d8      	uxtb	r0, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	3307      	adds	r3, #7
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2201      	movs	r2, #1
 80030fe:	4619      	mov	r1, r3
 8003100:	f7fd fce4 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,8+y, White);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	3310      	adds	r3, #16
 800310a:	b2d8      	uxtb	r0, r3
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	3308      	adds	r3, #8
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2201      	movs	r2, #1
 8003116:	4619      	mov	r1, r3
 8003118:	f7fd fcd8 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,9+y, White);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	3310      	adds	r3, #16
 8003122:	b2d8      	uxtb	r0, r3
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	3309      	adds	r3, #9
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2201      	movs	r2, #1
 800312e:	4619      	mov	r1, r3
 8003130:	f7fd fccc 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,10+y, White);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	3310      	adds	r3, #16
 800313a:	b2d8      	uxtb	r0, r3
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	330a      	adds	r3, #10
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2201      	movs	r2, #1
 8003146:	4619      	mov	r1, r3
 8003148:	f7fd fcc0 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,11+y, White);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	3310      	adds	r3, #16
 8003152:	b2d8      	uxtb	r0, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	330b      	adds	r3, #11
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2201      	movs	r2, #1
 800315e:	4619      	mov	r1, r3
 8003160:	f7fd fcb4 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,12+y, White);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	3310      	adds	r3, #16
 800316a:	b2d8      	uxtb	r0, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	330c      	adds	r3, #12
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2201      	movs	r2, #1
 8003176:	4619      	mov	r1, r3
 8003178:	f7fd fca8 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,13+y, White);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	3310      	adds	r3, #16
 8003182:	b2d8      	uxtb	r0, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	330d      	adds	r3, #13
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2201      	movs	r2, #1
 800318e:	4619      	mov	r1, r3
 8003190:	f7fd fc9c 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,14+y, White);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	3310      	adds	r3, #16
 800319a:	b2d8      	uxtb	r0, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	330e      	adds	r3, #14
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2201      	movs	r2, #1
 80031a6:	4619      	mov	r1, r3
 80031a8:	f7fd fc90 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,15+y, White);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3310      	adds	r3, #16
 80031b2:	b2d8      	uxtb	r0, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	330f      	adds	r3, #15
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2201      	movs	r2, #1
 80031be:	4619      	mov	r1, r3
 80031c0:	f7fd fc84 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,16+y, White);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	3310      	adds	r3, #16
 80031ca:	b2d8      	uxtb	r0, r3
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	3310      	adds	r3, #16
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2201      	movs	r2, #1
 80031d6:	4619      	mov	r1, r3
 80031d8:	f7fd fc78 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,17+y, White);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	3310      	adds	r3, #16
 80031e2:	b2d8      	uxtb	r0, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	3311      	adds	r3, #17
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2201      	movs	r2, #1
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7fd fc6c 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,18+y, White);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	3310      	adds	r3, #16
 80031fa:	b2d8      	uxtb	r0, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	3312      	adds	r3, #18
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2201      	movs	r2, #1
 8003206:	4619      	mov	r1, r3
 8003208:	f7fd fc60 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,19+y, White);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	3310      	adds	r3, #16
 8003212:	b2d8      	uxtb	r0, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	3313      	adds	r3, #19
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2201      	movs	r2, #1
 800321e:	4619      	mov	r1, r3
 8003220:	f7fd fc54 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,20+y, White);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	3310      	adds	r3, #16
 800322a:	b2d8      	uxtb	r0, r3
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3314      	adds	r3, #20
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2201      	movs	r2, #1
 8003236:	4619      	mov	r1, r3
 8003238:	f7fd fc48 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,21+y, White);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	3310      	adds	r3, #16
 8003242:	b2d8      	uxtb	r0, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	3315      	adds	r3, #21
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2201      	movs	r2, #1
 800324e:	4619      	mov	r1, r3
 8003250:	f7fd fc3c 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,22+y, White);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	3310      	adds	r3, #16
 800325a:	b2d8      	uxtb	r0, r3
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	3316      	adds	r3, #22
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2201      	movs	r2, #1
 8003266:	4619      	mov	r1, r3
 8003268:	f7fd fc30 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,23+y, White);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	3310      	adds	r3, #16
 8003272:	b2d8      	uxtb	r0, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	3317      	adds	r3, #23
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2201      	movs	r2, #1
 800327e:	4619      	mov	r1, r3
 8003280:	f7fd fc24 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,24+y, White);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	3310      	adds	r3, #16
 800328a:	b2d8      	uxtb	r0, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	3318      	adds	r3, #24
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2201      	movs	r2, #1
 8003296:	4619      	mov	r1, r3
 8003298:	f7fd fc18 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(9+x,1+y, White);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	3309      	adds	r3, #9
 80032a2:	b2d8      	uxtb	r0, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	3301      	adds	r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2201      	movs	r2, #1
 80032ae:	4619      	mov	r1, r3
 80032b0:	f7fd fc0c 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,2+y, White);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	3309      	adds	r3, #9
 80032ba:	b2d8      	uxtb	r0, r3
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	3302      	adds	r3, #2
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2201      	movs	r2, #1
 80032c6:	4619      	mov	r1, r3
 80032c8:	f7fd fc00 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,3+y, White);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	3309      	adds	r3, #9
 80032d2:	b2d8      	uxtb	r0, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	3303      	adds	r3, #3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2201      	movs	r2, #1
 80032de:	4619      	mov	r1, r3
 80032e0:	f7fd fbf4 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,4+y, White);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	3309      	adds	r3, #9
 80032ea:	b2d8      	uxtb	r0, r3
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	3304      	adds	r3, #4
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2201      	movs	r2, #1
 80032f6:	4619      	mov	r1, r3
 80032f8:	f7fd fbe8 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,5+y, White);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3309      	adds	r3, #9
 8003302:	b2d8      	uxtb	r0, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	3305      	adds	r3, #5
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2201      	movs	r2, #1
 800330e:	4619      	mov	r1, r3
 8003310:	f7fd fbdc 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,6+y, White);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	3309      	adds	r3, #9
 800331a:	b2d8      	uxtb	r0, r3
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	b2db      	uxtb	r3, r3
 8003320:	3306      	adds	r3, #6
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2201      	movs	r2, #1
 8003326:	4619      	mov	r1, r3
 8003328:	f7fd fbd0 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,7+y, White);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	3309      	adds	r3, #9
 8003332:	b2d8      	uxtb	r0, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	3307      	adds	r3, #7
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2201      	movs	r2, #1
 800333e:	4619      	mov	r1, r3
 8003340:	f7fd fbc4 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,8+y, White);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	3309      	adds	r3, #9
 800334a:	b2d8      	uxtb	r0, r3
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	3308      	adds	r3, #8
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2201      	movs	r2, #1
 8003356:	4619      	mov	r1, r3
 8003358:	f7fd fbb8 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,9+y, White);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	3309      	adds	r3, #9
 8003362:	b2d8      	uxtb	r0, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	3309      	adds	r3, #9
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2201      	movs	r2, #1
 800336e:	4619      	mov	r1, r3
 8003370:	f7fd fbac 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(9+x,16+y, White);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	3309      	adds	r3, #9
 800337a:	b2d8      	uxtb	r0, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	3310      	adds	r3, #16
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2201      	movs	r2, #1
 8003386:	4619      	mov	r1, r3
 8003388:	f7fd fba0 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,17+y, White);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	3309      	adds	r3, #9
 8003392:	b2d8      	uxtb	r0, r3
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	3311      	adds	r3, #17
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2201      	movs	r2, #1
 800339e:	4619      	mov	r1, r3
 80033a0:	f7fd fb94 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,18+y, White);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	3309      	adds	r3, #9
 80033aa:	b2d8      	uxtb	r0, r3
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	3312      	adds	r3, #18
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2201      	movs	r2, #1
 80033b6:	4619      	mov	r1, r3
 80033b8:	f7fd fb88 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,19+y, White);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	3309      	adds	r3, #9
 80033c2:	b2d8      	uxtb	r0, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	3313      	adds	r3, #19
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2201      	movs	r2, #1
 80033ce:	4619      	mov	r1, r3
 80033d0:	f7fd fb7c 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,20+y, White);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	3309      	adds	r3, #9
 80033da:	b2d8      	uxtb	r0, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	3314      	adds	r3, #20
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2201      	movs	r2, #1
 80033e6:	4619      	mov	r1, r3
 80033e8:	f7fd fb70 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,21+y, White);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	3309      	adds	r3, #9
 80033f2:	b2d8      	uxtb	r0, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	3315      	adds	r3, #21
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2201      	movs	r2, #1
 80033fe:	4619      	mov	r1, r3
 8003400:	f7fd fb64 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,22+y, White);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	3309      	adds	r3, #9
 800340a:	b2d8      	uxtb	r0, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3316      	adds	r3, #22
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2201      	movs	r2, #1
 8003416:	4619      	mov	r1, r3
 8003418:	f7fd fb58 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,23+y, White);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	b2db      	uxtb	r3, r3
 8003420:	3309      	adds	r3, #9
 8003422:	b2d8      	uxtb	r0, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3317      	adds	r3, #23
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2201      	movs	r2, #1
 800342e:	4619      	mov	r1, r3
 8003430:	f7fd fb4c 	bl	8000acc <ssd1306_DrawPixel>


	ssd1306_DrawPixel(10+x,1+y, White);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	330a      	adds	r3, #10
 800343a:	b2d8      	uxtb	r0, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	3301      	adds	r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2201      	movs	r2, #1
 8003446:	4619      	mov	r1, r3
 8003448:	f7fd fb40 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(11+x,1+y, White);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	330b      	adds	r3, #11
 8003452:	b2d8      	uxtb	r0, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	3301      	adds	r3, #1
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2201      	movs	r2, #1
 800345e:	4619      	mov	r1, r3
 8003460:	f7fd fb34 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(12+x,1+y, White);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	330c      	adds	r3, #12
 800346a:	b2d8      	uxtb	r0, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	3301      	adds	r3, #1
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2201      	movs	r2, #1
 8003476:	4619      	mov	r1, r3
 8003478:	f7fd fb28 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(13+x,1+y, White);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	330d      	adds	r3, #13
 8003482:	b2d8      	uxtb	r0, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	3301      	adds	r3, #1
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2201      	movs	r2, #1
 800348e:	4619      	mov	r1, r3
 8003490:	f7fd fb1c 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(14+x,1+y, White);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	330e      	adds	r3, #14
 800349a:	b2d8      	uxtb	r0, r3
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2201      	movs	r2, #1
 80034a6:	4619      	mov	r1, r3
 80034a8:	f7fd fb10 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(15+x,1+y, White);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	330f      	adds	r3, #15
 80034b2:	b2d8      	uxtb	r0, r3
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	3301      	adds	r3, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2201      	movs	r2, #1
 80034be:	4619      	mov	r1, r3
 80034c0:	f7fd fb04 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(9+x,24+y, White);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	3309      	adds	r3, #9
 80034ca:	b2d8      	uxtb	r0, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	3318      	adds	r3, #24
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2201      	movs	r2, #1
 80034d6:	4619      	mov	r1, r3
 80034d8:	f7fd faf8 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(10+x,24+y, White);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	330a      	adds	r3, #10
 80034e2:	b2d8      	uxtb	r0, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	3318      	adds	r3, #24
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2201      	movs	r2, #1
 80034ee:	4619      	mov	r1, r3
 80034f0:	f7fd faec 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(11+x,24+y, White);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	330b      	adds	r3, #11
 80034fa:	b2d8      	uxtb	r0, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3318      	adds	r3, #24
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2201      	movs	r2, #1
 8003506:	4619      	mov	r1, r3
 8003508:	f7fd fae0 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(12+x,24+y, White);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	330c      	adds	r3, #12
 8003512:	b2d8      	uxtb	r0, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3318      	adds	r3, #24
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2201      	movs	r2, #1
 800351e:	4619      	mov	r1, r3
 8003520:	f7fd fad4 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(13+x,24+y, White);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	330d      	adds	r3, #13
 800352a:	b2d8      	uxtb	r0, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3318      	adds	r3, #24
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2201      	movs	r2, #1
 8003536:	4619      	mov	r1, r3
 8003538:	f7fd fac8 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(14+x,24+y, White);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	330e      	adds	r3, #14
 8003542:	b2d8      	uxtb	r0, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	3318      	adds	r3, #24
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2201      	movs	r2, #1
 800354e:	4619      	mov	r1, r3
 8003550:	f7fd fabc 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(15+x,24+y, White);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	330f      	adds	r3, #15
 800355a:	b2d8      	uxtb	r0, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	3318      	adds	r3, #24
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2201      	movs	r2, #1
 8003566:	4619      	mov	r1, r3
 8003568:	f7fd fab0 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(1+x,16+y, White);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	3301      	adds	r3, #1
 8003572:	b2d8      	uxtb	r0, r3
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	3310      	adds	r3, #16
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2201      	movs	r2, #1
 800357e:	4619      	mov	r1, r3
 8003580:	f7fd faa4 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(2+x,16+y, White);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	3302      	adds	r3, #2
 800358a:	b2d8      	uxtb	r0, r3
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	3310      	adds	r3, #16
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2201      	movs	r2, #1
 8003596:	4619      	mov	r1, r3
 8003598:	f7fd fa98 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(3+x,16+y, White);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	3303      	adds	r3, #3
 80035a2:	b2d8      	uxtb	r0, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	3310      	adds	r3, #16
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2201      	movs	r2, #1
 80035ae:	4619      	mov	r1, r3
 80035b0:	f7fd fa8c 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(4+x,16+y, White);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3304      	adds	r3, #4
 80035ba:	b2d8      	uxtb	r0, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3310      	adds	r3, #16
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2201      	movs	r2, #1
 80035c6:	4619      	mov	r1, r3
 80035c8:	f7fd fa80 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(5+x,16+y, White);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3305      	adds	r3, #5
 80035d2:	b2d8      	uxtb	r0, r3
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	3310      	adds	r3, #16
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2201      	movs	r2, #1
 80035de:	4619      	mov	r1, r3
 80035e0:	f7fd fa74 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(6+x,16+y, White);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3306      	adds	r3, #6
 80035ea:	b2d8      	uxtb	r0, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3310      	adds	r3, #16
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2201      	movs	r2, #1
 80035f6:	4619      	mov	r1, r3
 80035f8:	f7fd fa68 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(7+x,16+y, White);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	3307      	adds	r3, #7
 8003602:	b2d8      	uxtb	r0, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	3310      	adds	r3, #16
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2201      	movs	r2, #1
 800360e:	4619      	mov	r1, r3
 8003610:	f7fd fa5c 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(8+x,16+y, White);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3308      	adds	r3, #8
 800361a:	b2d8      	uxtb	r0, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	3310      	adds	r3, #16
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2201      	movs	r2, #1
 8003626:	4619      	mov	r1, r3
 8003628:	f7fd fa50 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(1+x,9+y, White);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	3301      	adds	r3, #1
 8003632:	b2d8      	uxtb	r0, r3
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3309      	adds	r3, #9
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2201      	movs	r2, #1
 800363e:	4619      	mov	r1, r3
 8003640:	f7fd fa44 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(2+x,9+y, White);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	3302      	adds	r3, #2
 800364a:	b2d8      	uxtb	r0, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	3309      	adds	r3, #9
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2201      	movs	r2, #1
 8003656:	4619      	mov	r1, r3
 8003658:	f7fd fa38 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(3+x,9+y, White);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	3303      	adds	r3, #3
 8003662:	b2d8      	uxtb	r0, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	3309      	adds	r3, #9
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2201      	movs	r2, #1
 800366e:	4619      	mov	r1, r3
 8003670:	f7fd fa2c 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(4+x,9+y, White);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3304      	adds	r3, #4
 800367a:	b2d8      	uxtb	r0, r3
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	3309      	adds	r3, #9
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2201      	movs	r2, #1
 8003686:	4619      	mov	r1, r3
 8003688:	f7fd fa20 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(5+x,9+y, White);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	3305      	adds	r3, #5
 8003692:	b2d8      	uxtb	r0, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	3309      	adds	r3, #9
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2201      	movs	r2, #1
 800369e:	4619      	mov	r1, r3
 80036a0:	f7fd fa14 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(6+x,9+y, White);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	3306      	adds	r3, #6
 80036aa:	b2d8      	uxtb	r0, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	3309      	adds	r3, #9
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2201      	movs	r2, #1
 80036b6:	4619      	mov	r1, r3
 80036b8:	f7fd fa08 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(7+x,9+y, White);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	3307      	adds	r3, #7
 80036c2:	b2d8      	uxtb	r0, r3
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	3309      	adds	r3, #9
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2201      	movs	r2, #1
 80036ce:	4619      	mov	r1, r3
 80036d0:	f7fd f9fc 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(8+x,9+y, White);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	3308      	adds	r3, #8
 80036da:	b2d8      	uxtb	r0, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	3309      	adds	r3, #9
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2201      	movs	r2, #1
 80036e6:	4619      	mov	r1, r3
 80036e8:	f7fd f9f0 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(1+x,10+y, White);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	3301      	adds	r3, #1
 80036f2:	b2d8      	uxtb	r0, r3
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	330a      	adds	r3, #10
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2201      	movs	r2, #1
 80036fe:	4619      	mov	r1, r3
 8003700:	f7fd f9e4 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(1+x,11+y, White);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	3301      	adds	r3, #1
 800370a:	b2d8      	uxtb	r0, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	330b      	adds	r3, #11
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2201      	movs	r2, #1
 8003716:	4619      	mov	r1, r3
 8003718:	f7fd f9d8 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(1+x,12+y, White);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	3301      	adds	r3, #1
 8003722:	b2d8      	uxtb	r0, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	330c      	adds	r3, #12
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2201      	movs	r2, #1
 800372e:	4619      	mov	r1, r3
 8003730:	f7fd f9cc 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(1+x,13+y, White);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	3301      	adds	r3, #1
 800373a:	b2d8      	uxtb	r0, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	330d      	adds	r3, #13
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2201      	movs	r2, #1
 8003746:	4619      	mov	r1, r3
 8003748:	f7fd f9c0 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(1+x,14+y, White);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	3301      	adds	r3, #1
 8003752:	b2d8      	uxtb	r0, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	330e      	adds	r3, #14
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2201      	movs	r2, #1
 800375e:	4619      	mov	r1, r3
 8003760:	f7fd f9b4 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(1+x,15+y, White);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	3301      	adds	r3, #1
 800376a:	b2d8      	uxtb	r0, r3
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	b2db      	uxtb	r3, r3
 8003770:	330f      	adds	r3, #15
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2201      	movs	r2, #1
 8003776:	4619      	mov	r1, r3
 8003778:	f7fd f9a8 	bl	8000acc <ssd1306_DrawPixel>

    ssd1306_UpdateScreen();
 800377c:	f7fd f980 	bl	8000a80 <ssd1306_UpdateScreen>
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <ssd1306_tetris_T_links_Black>:

void ssd1306_tetris_T_links_Black(int x, int y) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]

	ssd1306_DrawPixel(1+x,16+y, Black);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	3301      	adds	r3, #1
 8003798:	b2d8      	uxtb	r0, r3
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	3310      	adds	r3, #16
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2200      	movs	r2, #0
 80037a4:	4619      	mov	r1, r3
 80037a6:	f7fd f991 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(2+x,16+y, Black);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	3302      	adds	r3, #2
 80037b0:	b2d8      	uxtb	r0, r3
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	3310      	adds	r3, #16
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2200      	movs	r2, #0
 80037bc:	4619      	mov	r1, r3
 80037be:	f7fd f985 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(3+x,16+y, Black);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	3303      	adds	r3, #3
 80037c8:	b2d8      	uxtb	r0, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	3310      	adds	r3, #16
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2200      	movs	r2, #0
 80037d4:	4619      	mov	r1, r3
 80037d6:	f7fd f979 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(4+x,16+y, Black);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	3304      	adds	r3, #4
 80037e0:	b2d8      	uxtb	r0, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	3310      	adds	r3, #16
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2200      	movs	r2, #0
 80037ec:	4619      	mov	r1, r3
 80037ee:	f7fd f96d 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(5+x,16+y, Black);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	3305      	adds	r3, #5
 80037f8:	b2d8      	uxtb	r0, r3
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	3310      	adds	r3, #16
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2200      	movs	r2, #0
 8003804:	4619      	mov	r1, r3
 8003806:	f7fd f961 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(6+x,16+y, Black);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	3306      	adds	r3, #6
 8003810:	b2d8      	uxtb	r0, r3
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	3310      	adds	r3, #16
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2200      	movs	r2, #0
 800381c:	4619      	mov	r1, r3
 800381e:	f7fd f955 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(7+x,16+y, Black);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	3307      	adds	r3, #7
 8003828:	b2d8      	uxtb	r0, r3
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	3310      	adds	r3, #16
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2200      	movs	r2, #0
 8003834:	4619      	mov	r1, r3
 8003836:	f7fd f949 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(8+x,16+y, Black);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	3308      	adds	r3, #8
 8003840:	b2d8      	uxtb	r0, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	3310      	adds	r3, #16
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2200      	movs	r2, #0
 800384c:	4619      	mov	r1, r3
 800384e:	f7fd f93d 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,16+y, Black);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	3309      	adds	r3, #9
 8003858:	b2d8      	uxtb	r0, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	3310      	adds	r3, #16
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2200      	movs	r2, #0
 8003864:	4619      	mov	r1, r3
 8003866:	f7fd f931 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(10+x,16+y, Black);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	b2db      	uxtb	r3, r3
 800386e:	330a      	adds	r3, #10
 8003870:	b2d8      	uxtb	r0, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	3310      	adds	r3, #16
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2200      	movs	r2, #0
 800387c:	4619      	mov	r1, r3
 800387e:	f7fd f925 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(11+x,16+y, Black);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	330b      	adds	r3, #11
 8003888:	b2d8      	uxtb	r0, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	b2db      	uxtb	r3, r3
 800388e:	3310      	adds	r3, #16
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2200      	movs	r2, #0
 8003894:	4619      	mov	r1, r3
 8003896:	f7fd f919 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(12+x,16+y, Black);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	330c      	adds	r3, #12
 80038a0:	b2d8      	uxtb	r0, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	3310      	adds	r3, #16
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2200      	movs	r2, #0
 80038ac:	4619      	mov	r1, r3
 80038ae:	f7fd f90d 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(13+x,16+y, Black);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	330d      	adds	r3, #13
 80038b8:	b2d8      	uxtb	r0, r3
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	3310      	adds	r3, #16
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2200      	movs	r2, #0
 80038c4:	4619      	mov	r1, r3
 80038c6:	f7fd f901 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(14+x,16+y, Black);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	330e      	adds	r3, #14
 80038d0:	b2d8      	uxtb	r0, r3
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	3310      	adds	r3, #16
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2200      	movs	r2, #0
 80038dc:	4619      	mov	r1, r3
 80038de:	f7fd f8f5 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(15+x,16+y, Black);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	330f      	adds	r3, #15
 80038e8:	b2d8      	uxtb	r0, r3
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	3310      	adds	r3, #16
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2200      	movs	r2, #0
 80038f4:	4619      	mov	r1, r3
 80038f6:	f7fd f8e9 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,16+y, Black);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	3310      	adds	r3, #16
 8003900:	b2d8      	uxtb	r0, r3
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	3310      	adds	r3, #16
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2200      	movs	r2, #0
 800390c:	4619      	mov	r1, r3
 800390e:	f7fd f8dd 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(17+x,16+y, Black);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	3311      	adds	r3, #17
 8003918:	b2d8      	uxtb	r0, r3
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	3310      	adds	r3, #16
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2200      	movs	r2, #0
 8003924:	4619      	mov	r1, r3
 8003926:	f7fd f8d1 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(18+x,16+y, Black);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	3312      	adds	r3, #18
 8003930:	b2d8      	uxtb	r0, r3
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	3310      	adds	r3, #16
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2200      	movs	r2, #0
 800393c:	4619      	mov	r1, r3
 800393e:	f7fd f8c5 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(19+x,16+y, Black);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	b2db      	uxtb	r3, r3
 8003946:	3313      	adds	r3, #19
 8003948:	b2d8      	uxtb	r0, r3
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	3310      	adds	r3, #16
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2200      	movs	r2, #0
 8003954:	4619      	mov	r1, r3
 8003956:	f7fd f8b9 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(20+x,16+y, Black);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	3314      	adds	r3, #20
 8003960:	b2d8      	uxtb	r0, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	3310      	adds	r3, #16
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2200      	movs	r2, #0
 800396c:	4619      	mov	r1, r3
 800396e:	f7fd f8ad 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(21+x,16+y, Black);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	3315      	adds	r3, #21
 8003978:	b2d8      	uxtb	r0, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	3310      	adds	r3, #16
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2200      	movs	r2, #0
 8003984:	4619      	mov	r1, r3
 8003986:	f7fd f8a1 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(22+x,16+y, Black);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	3316      	adds	r3, #22
 8003990:	b2d8      	uxtb	r0, r3
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2db      	uxtb	r3, r3
 8003996:	3310      	adds	r3, #16
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2200      	movs	r2, #0
 800399c:	4619      	mov	r1, r3
 800399e:	f7fd f895 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(23+x,16+y, Black);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	3317      	adds	r3, #23
 80039a8:	b2d8      	uxtb	r0, r3
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	3310      	adds	r3, #16
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2200      	movs	r2, #0
 80039b4:	4619      	mov	r1, r3
 80039b6:	f7fd f889 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(24+x,16+y, Black);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	3318      	adds	r3, #24
 80039c0:	b2d8      	uxtb	r0, r3
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	3310      	adds	r3, #16
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2200      	movs	r2, #0
 80039cc:	4619      	mov	r1, r3
 80039ce:	f7fd f87d 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(1+x,9+y, Black);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	b2d8      	uxtb	r0, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	3309      	adds	r3, #9
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2200      	movs	r2, #0
 80039e4:	4619      	mov	r1, r3
 80039e6:	f7fd f871 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(1+x,10+y, Black);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	3301      	adds	r3, #1
 80039f0:	b2d8      	uxtb	r0, r3
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	330a      	adds	r3, #10
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2200      	movs	r2, #0
 80039fc:	4619      	mov	r1, r3
 80039fe:	f7fd f865 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(1+x,11+y, Black);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	3301      	adds	r3, #1
 8003a08:	b2d8      	uxtb	r0, r3
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	330b      	adds	r3, #11
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2200      	movs	r2, #0
 8003a14:	4619      	mov	r1, r3
 8003a16:	f7fd f859 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(1+x,12+y, Black);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	b2d8      	uxtb	r0, r3
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	330c      	adds	r3, #12
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f7fd f84d 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(1+x,13+y, Black);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	3301      	adds	r3, #1
 8003a38:	b2d8      	uxtb	r0, r3
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	330d      	adds	r3, #13
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2200      	movs	r2, #0
 8003a44:	4619      	mov	r1, r3
 8003a46:	f7fd f841 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(1+x,14+y, Black);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	b2d8      	uxtb	r0, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	330e      	adds	r3, #14
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f7fd f835 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(1+x,15+y, Black);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	b2d8      	uxtb	r0, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	330f      	adds	r3, #15
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2200      	movs	r2, #0
 8003a74:	4619      	mov	r1, r3
 8003a76:	f7fd f829 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(1+x,16+y, Black);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	b2d8      	uxtb	r0, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	3310      	adds	r3, #16
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f7fd f81d 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(24+x,9+y, Black);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	3318      	adds	r3, #24
 8003a98:	b2d8      	uxtb	r0, r3
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	3309      	adds	r3, #9
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f7fd f811 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(24+x,10+y, Black);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	3318      	adds	r3, #24
 8003ab0:	b2d8      	uxtb	r0, r3
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	330a      	adds	r3, #10
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2200      	movs	r2, #0
 8003abc:	4619      	mov	r1, r3
 8003abe:	f7fd f805 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(24+x,11+y, Black);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	3318      	adds	r3, #24
 8003ac8:	b2d8      	uxtb	r0, r3
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	330b      	adds	r3, #11
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f7fc fff9 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(24+x,12+y, Black);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	3318      	adds	r3, #24
 8003ae0:	b2d8      	uxtb	r0, r3
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2200      	movs	r2, #0
 8003aec:	4619      	mov	r1, r3
 8003aee:	f7fc ffed 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(24+x,13+y, Black);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	3318      	adds	r3, #24
 8003af8:	b2d8      	uxtb	r0, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	330d      	adds	r3, #13
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2200      	movs	r2, #0
 8003b04:	4619      	mov	r1, r3
 8003b06:	f7fc ffe1 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(24+x,14+y, Black);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	3318      	adds	r3, #24
 8003b10:	b2d8      	uxtb	r0, r3
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	330e      	adds	r3, #14
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f7fc ffd5 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(24+x,15+y, Black);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	3318      	adds	r3, #24
 8003b28:	b2d8      	uxtb	r0, r3
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	330f      	adds	r3, #15
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2200      	movs	r2, #0
 8003b34:	4619      	mov	r1, r3
 8003b36:	f7fc ffc9 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(2+x,9+y, Black);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	3302      	adds	r3, #2
 8003b40:	b2d8      	uxtb	r0, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	3309      	adds	r3, #9
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f7fc ffbd 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(3+x,9+y, Black);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	3303      	adds	r3, #3
 8003b58:	b2d8      	uxtb	r0, r3
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	3309      	adds	r3, #9
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2200      	movs	r2, #0
 8003b64:	4619      	mov	r1, r3
 8003b66:	f7fc ffb1 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(4+x,9+y, Black);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	3304      	adds	r3, #4
 8003b70:	b2d8      	uxtb	r0, r3
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	3309      	adds	r3, #9
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	f7fc ffa5 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(5+x,9+y, Black);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	3305      	adds	r3, #5
 8003b88:	b2d8      	uxtb	r0, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	3309      	adds	r3, #9
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2200      	movs	r2, #0
 8003b94:	4619      	mov	r1, r3
 8003b96:	f7fc ff99 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(6+x,9+y, Black);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	3306      	adds	r3, #6
 8003ba0:	b2d8      	uxtb	r0, r3
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	3309      	adds	r3, #9
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2200      	movs	r2, #0
 8003bac:	4619      	mov	r1, r3
 8003bae:	f7fc ff8d 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(7+x,9+y, Black);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	3307      	adds	r3, #7
 8003bb8:	b2d8      	uxtb	r0, r3
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	3309      	adds	r3, #9
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f7fc ff81 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(8+x,9+y, Black);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	3308      	adds	r3, #8
 8003bd0:	b2d8      	uxtb	r0, r3
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	3309      	adds	r3, #9
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2200      	movs	r2, #0
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f7fc ff75 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,9+y, Black);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	3309      	adds	r3, #9
 8003be8:	b2d8      	uxtb	r0, r3
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	3309      	adds	r3, #9
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f7fc ff69 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(16+x,9+y, Black);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	3310      	adds	r3, #16
 8003c00:	b2d8      	uxtb	r0, r3
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	3309      	adds	r3, #9
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f7fc ff5d 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(17+x,9+y, Black);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	3311      	adds	r3, #17
 8003c18:	b2d8      	uxtb	r0, r3
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	3309      	adds	r3, #9
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2200      	movs	r2, #0
 8003c24:	4619      	mov	r1, r3
 8003c26:	f7fc ff51 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(18+x,9+y, Black);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	3312      	adds	r3, #18
 8003c30:	b2d8      	uxtb	r0, r3
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	3309      	adds	r3, #9
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f7fc ff45 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(19+x,9+y, Black);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	3313      	adds	r3, #19
 8003c48:	b2d8      	uxtb	r0, r3
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	3309      	adds	r3, #9
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2200      	movs	r2, #0
 8003c54:	4619      	mov	r1, r3
 8003c56:	f7fc ff39 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(20+x,9+y, Black);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	3314      	adds	r3, #20
 8003c60:	b2d8      	uxtb	r0, r3
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	3309      	adds	r3, #9
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f7fc ff2d 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(21+x,9+y, Black);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	3315      	adds	r3, #21
 8003c78:	b2d8      	uxtb	r0, r3
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	3309      	adds	r3, #9
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2200      	movs	r2, #0
 8003c84:	4619      	mov	r1, r3
 8003c86:	f7fc ff21 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(22+x,9+y, Black);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	3316      	adds	r3, #22
 8003c90:	b2d8      	uxtb	r0, r3
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	3309      	adds	r3, #9
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f7fc ff15 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(23+x,9+y, Black);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	3317      	adds	r3, #23
 8003ca8:	b2d8      	uxtb	r0, r3
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	3309      	adds	r3, #9
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f7fc ff09 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(9+x,1+y, Black);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	3309      	adds	r3, #9
 8003cc0:	b2d8      	uxtb	r0, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2200      	movs	r2, #0
 8003ccc:	4619      	mov	r1, r3
 8003cce:	f7fc fefd 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(10+x,1+y, Black);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	330a      	adds	r3, #10
 8003cd8:	b2d8      	uxtb	r0, r3
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	3301      	adds	r3, #1
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f7fc fef1 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(11+x,1+y, Black);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	330b      	adds	r3, #11
 8003cf0:	b2d8      	uxtb	r0, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f7fc fee5 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(12+x,1+y, Black);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	330c      	adds	r3, #12
 8003d08:	b2d8      	uxtb	r0, r3
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2200      	movs	r2, #0
 8003d14:	4619      	mov	r1, r3
 8003d16:	f7fc fed9 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(13+x,1+y, Black);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	330d      	adds	r3, #13
 8003d20:	b2d8      	uxtb	r0, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	3301      	adds	r3, #1
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f7fc fecd 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(14+x,1+y, Black);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	330e      	adds	r3, #14
 8003d38:	b2d8      	uxtb	r0, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2200      	movs	r2, #0
 8003d44:	4619      	mov	r1, r3
 8003d46:	f7fc fec1 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(15+x,1+y, Black);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	330f      	adds	r3, #15
 8003d50:	b2d8      	uxtb	r0, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	3301      	adds	r3, #1
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f7fc feb5 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,1+y, Black);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	3310      	adds	r3, #16
 8003d68:	b2d8      	uxtb	r0, r3
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2200      	movs	r2, #0
 8003d74:	4619      	mov	r1, r3
 8003d76:	f7fc fea9 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(9+x,2+y, Black);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	3309      	adds	r3, #9
 8003d80:	b2d8      	uxtb	r0, r3
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	3302      	adds	r3, #2
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f7fc fe9d 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,3+y, Black);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	3309      	adds	r3, #9
 8003d98:	b2d8      	uxtb	r0, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	3303      	adds	r3, #3
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2200      	movs	r2, #0
 8003da4:	4619      	mov	r1, r3
 8003da6:	f7fc fe91 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,4+y, Black);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	3309      	adds	r3, #9
 8003db0:	b2d8      	uxtb	r0, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	3304      	adds	r3, #4
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2200      	movs	r2, #0
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f7fc fe85 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,5+y, Black);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	3309      	adds	r3, #9
 8003dc8:	b2d8      	uxtb	r0, r3
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	3305      	adds	r3, #5
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f7fc fe79 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,6+y, Black);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	3309      	adds	r3, #9
 8003de0:	b2d8      	uxtb	r0, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	3306      	adds	r3, #6
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2200      	movs	r2, #0
 8003dec:	4619      	mov	r1, r3
 8003dee:	f7fc fe6d 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,7+y, Black);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	3309      	adds	r3, #9
 8003df8:	b2d8      	uxtb	r0, r3
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	3307      	adds	r3, #7
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2200      	movs	r2, #0
 8003e04:	4619      	mov	r1, r3
 8003e06:	f7fc fe61 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(9+x,8+y, Black);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	3309      	adds	r3, #9
 8003e10:	b2d8      	uxtb	r0, r3
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	3308      	adds	r3, #8
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f7fc fe55 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_DrawPixel(16+x,2+y, Black);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	3310      	adds	r3, #16
 8003e28:	b2d8      	uxtb	r0, r3
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	3302      	adds	r3, #2
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2200      	movs	r2, #0
 8003e34:	4619      	mov	r1, r3
 8003e36:	f7fc fe49 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,3+y, Black);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	3310      	adds	r3, #16
 8003e40:	b2d8      	uxtb	r0, r3
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	3303      	adds	r3, #3
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	f7fc fe3d 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,4+y, Black);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	3310      	adds	r3, #16
 8003e58:	b2d8      	uxtb	r0, r3
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	3304      	adds	r3, #4
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2200      	movs	r2, #0
 8003e64:	4619      	mov	r1, r3
 8003e66:	f7fc fe31 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,5+y, Black);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	3310      	adds	r3, #16
 8003e70:	b2d8      	uxtb	r0, r3
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	3305      	adds	r3, #5
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f7fc fe25 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,6+y, Black);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	3310      	adds	r3, #16
 8003e88:	b2d8      	uxtb	r0, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	3306      	adds	r3, #6
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2200      	movs	r2, #0
 8003e94:	4619      	mov	r1, r3
 8003e96:	f7fc fe19 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,7+y, Black);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	3310      	adds	r3, #16
 8003ea0:	b2d8      	uxtb	r0, r3
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	3307      	adds	r3, #7
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2200      	movs	r2, #0
 8003eac:	4619      	mov	r1, r3
 8003eae:	f7fc fe0d 	bl	8000acc <ssd1306_DrawPixel>
	ssd1306_DrawPixel(16+x,8+y, Black);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	3310      	adds	r3, #16
 8003eb8:	b2d8      	uxtb	r0, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	f7fc fe01 	bl	8000acc <ssd1306_DrawPixel>

	ssd1306_UpdateScreen();
 8003eca:	f7fc fdd9 	bl	8000a80 <ssd1306_UpdateScreen>
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ed8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003edc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003ede:	e003      	b.n	8003ee8 <LoopCopyDataInit>

08003ee0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003ee2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003ee4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003ee6:	3104      	adds	r1, #4

08003ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ee8:	480b      	ldr	r0, [pc, #44]	; (8003f18 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003eec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003eee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ef0:	d3f6      	bcc.n	8003ee0 <CopyDataInit>
	ldr	r2, =_sbss
 8003ef2:	4a0b      	ldr	r2, [pc, #44]	; (8003f20 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003ef4:	e002      	b.n	8003efc <LoopFillZerobss>

08003ef6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003ef6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ef8:	f842 3b04 	str.w	r3, [r2], #4

08003efc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <LoopForever+0x16>)
	cmp	r2, r3
 8003efe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003f00:	d3f9      	bcc.n	8003ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f02:	f7fc ff2d 	bl	8000d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f06:	f002 fd43 	bl	8006990 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f0a:	f7fc fae7 	bl	80004dc <main>

08003f0e <LoopForever>:

LoopForever:
    b LoopForever
 8003f0e:	e7fe      	b.n	8003f0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f10:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8003f14:	08006a70 	.word	0x08006a70
	ldr	r0, =_sdata
 8003f18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003f1c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003f20:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003f24:	20000564 	.word	0x20000564

08003f28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f28:	e7fe      	b.n	8003f28 <ADC1_IRQHandler>

08003f2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f34:	2003      	movs	r0, #3
 8003f36:	f000 f93d 	bl	80041b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	f000 f80e 	bl	8003f5c <HAL_InitTick>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	71fb      	strb	r3, [r7, #7]
 8003f4a:	e001      	b.n	8003f50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f4c:	f7fc fe1e 	bl	8000b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f50:	79fb      	ldrb	r3, [r7, #7]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003f68:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <HAL_InitTick+0x68>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d022      	beq.n	8003fb6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f70:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <HAL_InitTick+0x6c>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <HAL_InitTick+0x68>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 f93c 	bl	8004202 <HAL_SYSTICK_Config>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10f      	bne.n	8003fb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b0f      	cmp	r3, #15
 8003f94:	d809      	bhi.n	8003faa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f96:	2200      	movs	r2, #0
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9e:	f000 f914 	bl	80041ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fa2:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <HAL_InitTick+0x70>)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	e007      	b.n	8003fba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
 8003fae:	e004      	b.n	8003fba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
 8003fb4:	e001      	b.n	8003fba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000008 	.word	0x20000008
 8003fc8:	20000000 	.word	0x20000000
 8003fcc:	20000004 	.word	0x20000004

08003fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_IncTick+0x1c>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_IncTick+0x20>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4413      	add	r3, r2
 8003fde:	4a03      	ldr	r2, [pc, #12]	; (8003fec <HAL_IncTick+0x1c>)
 8003fe0:	6013      	str	r3, [r2, #0]
}
 8003fe2:	bf00      	nop
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	20000560 	.word	0x20000560
 8003ff0:	20000008 	.word	0x20000008

08003ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ff8:	4b03      	ldr	r3, [pc, #12]	; (8004008 <HAL_GetTick+0x14>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	20000560 	.word	0x20000560

0800400c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004014:	f7ff ffee 	bl	8003ff4 <HAL_GetTick>
 8004018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004024:	d004      	beq.n	8004030 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_Delay+0x40>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4413      	add	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004030:	bf00      	nop
 8004032:	f7ff ffdf 	bl	8003ff4 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	429a      	cmp	r2, r3
 8004040:	d8f7      	bhi.n	8004032 <HAL_Delay+0x26>
  {
  }
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000008 	.word	0x20000008

08004050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <__NVIC_SetPriorityGrouping+0x44>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800406c:	4013      	ands	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800407c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004082:	4a04      	ldr	r2, [pc, #16]	; (8004094 <__NVIC_SetPriorityGrouping+0x44>)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	60d3      	str	r3, [r2, #12]
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <__NVIC_GetPriorityGrouping+0x18>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	f003 0307 	and.w	r3, r3, #7
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	6039      	str	r1, [r7, #0]
 80040be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	db0a      	blt.n	80040de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	490c      	ldr	r1, [pc, #48]	; (8004100 <__NVIC_SetPriority+0x4c>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	0112      	lsls	r2, r2, #4
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	440b      	add	r3, r1
 80040d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040dc:	e00a      	b.n	80040f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4908      	ldr	r1, [pc, #32]	; (8004104 <__NVIC_SetPriority+0x50>)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	3b04      	subs	r3, #4
 80040ec:	0112      	lsls	r2, r2, #4
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	440b      	add	r3, r1
 80040f2:	761a      	strb	r2, [r3, #24]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	e000e100 	.word	0xe000e100
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f1c3 0307 	rsb	r3, r3, #7
 8004122:	2b04      	cmp	r3, #4
 8004124:	bf28      	it	cs
 8004126:	2304      	movcs	r3, #4
 8004128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3304      	adds	r3, #4
 800412e:	2b06      	cmp	r3, #6
 8004130:	d902      	bls.n	8004138 <NVIC_EncodePriority+0x30>
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3b03      	subs	r3, #3
 8004136:	e000      	b.n	800413a <NVIC_EncodePriority+0x32>
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800413c:	f04f 32ff 	mov.w	r2, #4294967295
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43da      	mvns	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	401a      	ands	r2, r3
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004150:	f04f 31ff 	mov.w	r1, #4294967295
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	43d9      	mvns	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004160:	4313      	orrs	r3, r2
         );
}
 8004162:	4618      	mov	r0, r3
 8004164:	3724      	adds	r7, #36	; 0x24
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
	...

08004170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3b01      	subs	r3, #1
 800417c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004180:	d301      	bcc.n	8004186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004182:	2301      	movs	r3, #1
 8004184:	e00f      	b.n	80041a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004186:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <SysTick_Config+0x40>)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3b01      	subs	r3, #1
 800418c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800418e:	210f      	movs	r1, #15
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	f7ff ff8e 	bl	80040b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <SysTick_Config+0x40>)
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800419e:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <SysTick_Config+0x40>)
 80041a0:	2207      	movs	r2, #7
 80041a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	e000e010 	.word	0xe000e010

080041b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff ff47 	bl	8004050 <__NVIC_SetPriorityGrouping>
}
 80041c2:	bf00      	nop
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b086      	sub	sp, #24
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	4603      	mov	r3, r0
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
 80041d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041dc:	f7ff ff5c 	bl	8004098 <__NVIC_GetPriorityGrouping>
 80041e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	6978      	ldr	r0, [r7, #20]
 80041e8:	f7ff ff8e 	bl	8004108 <NVIC_EncodePriority>
 80041ec:	4602      	mov	r2, r0
 80041ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f2:	4611      	mov	r1, r2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff ff5d 	bl	80040b4 <__NVIC_SetPriority>
}
 80041fa:	bf00      	nop
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff ffb0 	bl	8004170 <SysTick_Config>
 8004210:	4603      	mov	r3, r0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800422a:	e148      	b.n	80044be <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2101      	movs	r1, #1
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 813a 	beq.w	80044b8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d003      	beq.n	8004254 <HAL_GPIO_Init+0x38>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b12      	cmp	r3, #18
 8004252:	d123      	bne.n	800429c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	08da      	lsrs	r2, r3, #3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3208      	adds	r2, #8
 800425c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004260:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	220f      	movs	r2, #15
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4013      	ands	r3, r2
 8004276:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	08da      	lsrs	r2, r3, #3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3208      	adds	r2, #8
 8004296:	6939      	ldr	r1, [r7, #16]
 8004298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	2203      	movs	r2, #3
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	43db      	mvns	r3, r3
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4013      	ands	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 0203 	and.w	r2, r3, #3
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d00b      	beq.n	80042f0 <HAL_GPIO_Init+0xd4>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d007      	beq.n	80042f0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042e4:	2b11      	cmp	r3, #17
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b12      	cmp	r3, #18
 80042ee:	d130      	bne.n	8004352 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	2203      	movs	r2, #3
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4013      	ands	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004326:	2201      	movs	r2, #1
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43db      	mvns	r3, r3
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4013      	ands	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	f003 0201 	and.w	r2, r3, #1
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	2203      	movs	r2, #3
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 8094 	beq.w	80044b8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004390:	4b52      	ldr	r3, [pc, #328]	; (80044dc <HAL_GPIO_Init+0x2c0>)
 8004392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004394:	4a51      	ldr	r2, [pc, #324]	; (80044dc <HAL_GPIO_Init+0x2c0>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	6613      	str	r3, [r2, #96]	; 0x60
 800439c:	4b4f      	ldr	r3, [pc, #316]	; (80044dc <HAL_GPIO_Init+0x2c0>)
 800439e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043a8:	4a4d      	ldr	r2, [pc, #308]	; (80044e0 <HAL_GPIO_Init+0x2c4>)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	089b      	lsrs	r3, r3, #2
 80043ae:	3302      	adds	r3, #2
 80043b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	220f      	movs	r2, #15
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4013      	ands	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80043d2:	d00d      	beq.n	80043f0 <HAL_GPIO_Init+0x1d4>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a43      	ldr	r2, [pc, #268]	; (80044e4 <HAL_GPIO_Init+0x2c8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <HAL_GPIO_Init+0x1d0>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a42      	ldr	r2, [pc, #264]	; (80044e8 <HAL_GPIO_Init+0x2cc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d101      	bne.n	80043e8 <HAL_GPIO_Init+0x1cc>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e004      	b.n	80043f2 <HAL_GPIO_Init+0x1d6>
 80043e8:	2307      	movs	r3, #7
 80043ea:	e002      	b.n	80043f2 <HAL_GPIO_Init+0x1d6>
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <HAL_GPIO_Init+0x1d6>
 80043f0:	2300      	movs	r3, #0
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	f002 0203 	and.w	r2, r2, #3
 80043f8:	0092      	lsls	r2, r2, #2
 80043fa:	4093      	lsls	r3, r2
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004402:	4937      	ldr	r1, [pc, #220]	; (80044e0 <HAL_GPIO_Init+0x2c4>)
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	089b      	lsrs	r3, r3, #2
 8004408:	3302      	adds	r3, #2
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004410:	4b36      	ldr	r3, [pc, #216]	; (80044ec <HAL_GPIO_Init+0x2d0>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	43db      	mvns	r3, r3
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004434:	4a2d      	ldr	r2, [pc, #180]	; (80044ec <HAL_GPIO_Init+0x2d0>)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800443a:	4b2c      	ldr	r3, [pc, #176]	; (80044ec <HAL_GPIO_Init+0x2d0>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	43db      	mvns	r3, r3
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4013      	ands	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800445e:	4a23      	ldr	r2, [pc, #140]	; (80044ec <HAL_GPIO_Init+0x2d0>)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004464:	4b21      	ldr	r3, [pc, #132]	; (80044ec <HAL_GPIO_Init+0x2d0>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	43db      	mvns	r3, r3
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4013      	ands	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004488:	4a18      	ldr	r2, [pc, #96]	; (80044ec <HAL_GPIO_Init+0x2d0>)
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <HAL_GPIO_Init+0x2d0>)
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	43db      	mvns	r3, r3
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4013      	ands	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044b2:	4a0e      	ldr	r2, [pc, #56]	; (80044ec <HAL_GPIO_Init+0x2d0>)
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	3301      	adds	r3, #1
 80044bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f47f aeaf 	bne.w	800422c <HAL_GPIO_Init+0x10>
  }
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40010000 	.word	0x40010000
 80044e4:	48000400 	.word	0x48000400
 80044e8:	48000800 	.word	0x48000800
 80044ec:	40010400 	.word	0x40010400

080044f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	807b      	strh	r3, [r7, #2]
 80044fc:	4613      	mov	r3, r2
 80044fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004500:	787b      	ldrb	r3, [r7, #1]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004506:	887a      	ldrh	r2, [r7, #2]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800450c:	e002      	b.n	8004514 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800450e:	887a      	ldrh	r2, [r7, #2]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e081      	b.n	8004636 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fc fb44 	bl	8000bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2224      	movs	r2, #36	; 0x24
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004570:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004580:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d107      	bne.n	800459a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	e006      	b.n	80045a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d104      	bne.n	80045ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	ea42 0103 	orr.w	r1, r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	021a      	lsls	r2, r3, #8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69d9      	ldr	r1, [r3, #28]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1a      	ldr	r2, [r3, #32]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	4608      	mov	r0, r1
 800464a:	4611      	mov	r1, r2
 800464c:	461a      	mov	r2, r3
 800464e:	4603      	mov	r3, r0
 8004650:	817b      	strh	r3, [r7, #10]
 8004652:	460b      	mov	r3, r1
 8004654:	813b      	strh	r3, [r7, #8]
 8004656:	4613      	mov	r3, r2
 8004658:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b20      	cmp	r3, #32
 8004664:	f040 80f9 	bne.w	800485a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_I2C_Mem_Write+0x34>
 800466e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	d105      	bne.n	8004680 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800467a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e0ed      	b.n	800485c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_I2C_Mem_Write+0x4e>
 800468a:	2302      	movs	r3, #2
 800468c:	e0e6      	b.n	800485c <HAL_I2C_Mem_Write+0x21c>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004696:	f7ff fcad 	bl	8003ff4 <HAL_GetTick>
 800469a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2319      	movs	r3, #25
 80046a2:	2201      	movs	r2, #1
 80046a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f955 	bl	8004958 <I2C_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0d1      	b.n	800485c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2221      	movs	r2, #33	; 0x21
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2240      	movs	r2, #64	; 0x40
 80046c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a3a      	ldr	r2, [r7, #32]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046e0:	88f8      	ldrh	r0, [r7, #6]
 80046e2:	893a      	ldrh	r2, [r7, #8]
 80046e4:	8979      	ldrh	r1, [r7, #10]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	4603      	mov	r3, r0
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f8b9 	bl	8004868 <I2C_RequestMemoryWrite>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0a9      	b.n	800485c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	2bff      	cmp	r3, #255	; 0xff
 8004710:	d90e      	bls.n	8004730 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	22ff      	movs	r2, #255	; 0xff
 8004716:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471c:	b2da      	uxtb	r2, r3
 800471e:	8979      	ldrh	r1, [r7, #10]
 8004720:	2300      	movs	r3, #0
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fa37 	bl	8004b9c <I2C_TransferConfig>
 800472e:	e00f      	b.n	8004750 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473e:	b2da      	uxtb	r2, r3
 8004740:	8979      	ldrh	r1, [r7, #10]
 8004742:	2300      	movs	r3, #0
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fa26 	bl	8004b9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f93f 	bl	80049d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e07b      	b.n	800485c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	781a      	ldrb	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d034      	beq.n	8004808 <HAL_I2C_Mem_Write+0x1c8>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d130      	bne.n	8004808 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	2200      	movs	r2, #0
 80047ae:	2180      	movs	r1, #128	; 0x80
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f8d1 	bl	8004958 <I2C_WaitOnFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e04d      	b.n	800485c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2bff      	cmp	r3, #255	; 0xff
 80047c8:	d90e      	bls.n	80047e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	22ff      	movs	r2, #255	; 0xff
 80047ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	8979      	ldrh	r1, [r7, #10]
 80047d8:	2300      	movs	r3, #0
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f9db 	bl	8004b9c <I2C_TransferConfig>
 80047e6:	e00f      	b.n	8004808 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	8979      	ldrh	r1, [r7, #10]
 80047fa:	2300      	movs	r3, #0
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004802:	68f8      	ldr	r0, [r7, #12]
 8004804:	f000 f9ca 	bl	8004b9c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d19e      	bne.n	8004750 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f91e 	bl	8004a58 <I2C_WaitOnSTOPFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e01a      	b.n	800485c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2220      	movs	r2, #32
 800482c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <HAL_I2C_Mem_Write+0x224>)
 800483a:	400b      	ands	r3, r1
 800483c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	e000      	b.n	800485c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800485a:	2302      	movs	r3, #2
  }
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	fe00e800 	.word	0xfe00e800

08004868 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af02      	add	r7, sp, #8
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	4608      	mov	r0, r1
 8004872:	4611      	mov	r1, r2
 8004874:	461a      	mov	r2, r3
 8004876:	4603      	mov	r3, r0
 8004878:	817b      	strh	r3, [r7, #10]
 800487a:	460b      	mov	r3, r1
 800487c:	813b      	strh	r3, [r7, #8]
 800487e:	4613      	mov	r3, r2
 8004880:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	b2da      	uxtb	r2, r3
 8004886:	8979      	ldrh	r1, [r7, #10]
 8004888:	4b20      	ldr	r3, [pc, #128]	; (800490c <I2C_RequestMemoryWrite+0xa4>)
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f983 	bl	8004b9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	69b9      	ldr	r1, [r7, #24]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f89c 	bl	80049d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e02c      	b.n	8004904 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048aa:	88fb      	ldrh	r3, [r7, #6]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d105      	bne.n	80048bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048b0:	893b      	ldrh	r3, [r7, #8]
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28
 80048ba:	e015      	b.n	80048e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048bc:	893b      	ldrh	r3, [r7, #8]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	69b9      	ldr	r1, [r7, #24]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f882 	bl	80049d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e012      	b.n	8004904 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048de:	893b      	ldrh	r3, [r7, #8]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2200      	movs	r2, #0
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f830 	bl	8004958 <I2C_WaitOnFlagUntilTimeout>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	80002000 	.word	0x80002000

08004910 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b02      	cmp	r3, #2
 8004924:	d103      	bne.n	800492e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2200      	movs	r2, #0
 800492c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b01      	cmp	r3, #1
 800493a:	d007      	beq.n	800494c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	619a      	str	r2, [r3, #24]
  }
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	603b      	str	r3, [r7, #0]
 8004964:	4613      	mov	r3, r2
 8004966:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004968:	e022      	b.n	80049b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004970:	d01e      	beq.n	80049b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004972:	f7ff fb3f 	bl	8003ff4 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d302      	bcc.n	8004988 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d113      	bne.n	80049b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498c:	f043 0220 	orr.w	r2, r3, #32
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e00f      	b.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	4013      	ands	r3, r2
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	429a      	cmp	r2, r3
 80049be:	bf0c      	ite	eq
 80049c0:	2301      	moveq	r3, #1
 80049c2:	2300      	movne	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d0cd      	beq.n	800496a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049e4:	e02c      	b.n	8004a40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f870 	bl	8004ad0 <I2C_IsAcknowledgeFailed>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e02a      	b.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d01e      	beq.n	8004a40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a02:	f7ff faf7 	bl	8003ff4 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d302      	bcc.n	8004a18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d113      	bne.n	8004a40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1c:	f043 0220 	orr.w	r2, r3, #32
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e007      	b.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d1cb      	bne.n	80049e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a64:	e028      	b.n	8004ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f830 	bl	8004ad0 <I2C_IsAcknowledgeFailed>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e026      	b.n	8004ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7a:	f7ff fabb 	bl	8003ff4 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d302      	bcc.n	8004a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d113      	bne.n	8004ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a94:	f043 0220 	orr.w	r2, r3, #32
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e007      	b.n	8004ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f003 0320 	and.w	r3, r3, #32
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d1cf      	bne.n	8004a66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d151      	bne.n	8004b8e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aea:	e022      	b.n	8004b32 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d01e      	beq.n	8004b32 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af4:	f7ff fa7e 	bl	8003ff4 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <I2C_IsAcknowledgeFailed+0x3a>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d113      	bne.n	8004b32 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	f043 0220 	orr.w	r2, r3, #32
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e02e      	b.n	8004b90 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d1d5      	bne.n	8004aec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2210      	movs	r2, #16
 8004b46:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff fedd 	bl	8004910 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6859      	ldr	r1, [r3, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <I2C_IsAcknowledgeFailed+0xc8>)
 8004b62:	400b      	ands	r3, r1
 8004b64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	f043 0204 	orr.w	r2, r3, #4
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	fe00e800 	.word	0xfe00e800

08004b9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	817b      	strh	r3, [r7, #10]
 8004baa:	4613      	mov	r3, r2
 8004bac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	0d5b      	lsrs	r3, r3, #21
 8004bb8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004bbc:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <I2C_TransferConfig+0x58>)
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	ea02 0103 	and.w	r1, r2, r3
 8004bc6:	897b      	ldrh	r3, [r7, #10]
 8004bc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004bcc:	7a7b      	ldrb	r3, [r7, #9]
 8004bce:	041b      	lsls	r3, r3, #16
 8004bd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	03ff63ff 	.word	0x03ff63ff

08004bf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d138      	bne.n	8004c80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e032      	b.n	8004c82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2224      	movs	r2, #36	; 0x24
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0201 	bic.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6819      	ldr	r1, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0201 	orr.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	e000      	b.n	8004c82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c80:	2302      	movs	r3, #2
  }
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b085      	sub	sp, #20
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d139      	bne.n	8004d18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e033      	b.n	8004d1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2224      	movs	r2, #36	; 0x24
 8004cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0201 	bic.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ce0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0201 	orr.w	r2, r2, #1
 8004d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e000      	b.n	8004d1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
  }
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a04      	ldr	r2, [pc, #16]	; (8004d44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d36:	6013      	str	r3, [r2, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40007000 	.word	0x40007000

08004d48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40007000 	.word	0x40007000

08004d64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d72:	d130      	bne.n	8004dd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d74:	4b23      	ldr	r3, [pc, #140]	; (8004e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d80:	d038      	beq.n	8004df4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d82:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d92:	4b1d      	ldr	r3, [pc, #116]	; (8004e08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2232      	movs	r2, #50	; 0x32
 8004d98:	fb02 f303 	mul.w	r3, r2, r3
 8004d9c:	4a1b      	ldr	r2, [pc, #108]	; (8004e0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	0c9b      	lsrs	r3, r3, #18
 8004da4:	3301      	adds	r3, #1
 8004da6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004da8:	e002      	b.n	8004db0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004db0:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dbc:	d102      	bne.n	8004dc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f2      	bne.n	8004daa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dc4:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd0:	d110      	bne.n	8004df4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e00f      	b.n	8004df6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de2:	d007      	beq.n	8004df4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004de4:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dec:	4a05      	ldr	r2, [pc, #20]	; (8004e04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004df2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	40007000 	.word	0x40007000
 8004e08:	20000000 	.word	0x20000000
 8004e0c:	431bde83 	.word	0x431bde83

08004e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e3db      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e22:	4ba4      	ldr	r3, [pc, #656]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 030c 	and.w	r3, r3, #12
 8004e2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e2c:	4ba1      	ldr	r3, [pc, #644]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 80e1 	beq.w	8005006 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <HAL_RCC_OscConfig+0x4a>
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b0c      	cmp	r3, #12
 8004e4e:	f040 8088 	bne.w	8004f62 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	f040 8084 	bne.w	8004f62 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e5a:	4b96      	ldr	r3, [pc, #600]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_RCC_OscConfig+0x62>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e3b3      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1a      	ldr	r2, [r3, #32]
 8004e76:	4b8f      	ldr	r3, [pc, #572]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d004      	beq.n	8004e8c <HAL_RCC_OscConfig+0x7c>
 8004e82:	4b8c      	ldr	r3, [pc, #560]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e8a:	e005      	b.n	8004e98 <HAL_RCC_OscConfig+0x88>
 8004e8c:	4b89      	ldr	r3, [pc, #548]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e92:	091b      	lsrs	r3, r3, #4
 8004e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d223      	bcs.n	8004ee4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fd47 	bl	8005934 <RCC_SetFlashLatencyFromMSIRange>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e394      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eb0:	4b80      	ldr	r3, [pc, #512]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a7f      	ldr	r2, [pc, #508]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004eb6:	f043 0308 	orr.w	r3, r3, #8
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	4b7d      	ldr	r3, [pc, #500]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	497a      	ldr	r1, [pc, #488]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ece:	4b79      	ldr	r3, [pc, #484]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	4975      	ldr	r1, [pc, #468]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	604b      	str	r3, [r1, #4]
 8004ee2:	e022      	b.n	8004f2a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ee4:	4b73      	ldr	r3, [pc, #460]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a72      	ldr	r2, [pc, #456]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004eea:	f043 0308 	orr.w	r3, r3, #8
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	4b70      	ldr	r3, [pc, #448]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	496d      	ldr	r1, [pc, #436]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f02:	4b6c      	ldr	r3, [pc, #432]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	4968      	ldr	r1, [pc, #416]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fd0a 	bl	8005934 <RCC_SetFlashLatencyFromMSIRange>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e357      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004f2a:	f000 fc41 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 8004f2e:	4601      	mov	r1, r0
 8004f30:	4b60      	ldr	r3, [pc, #384]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	4a5f      	ldr	r2, [pc, #380]	; (80050b8 <HAL_RCC_OscConfig+0x2a8>)
 8004f3c:	5cd3      	ldrb	r3, [r2, r3]
 8004f3e:	f003 031f 	and.w	r3, r3, #31
 8004f42:	fa21 f303 	lsr.w	r3, r1, r3
 8004f46:	4a5d      	ldr	r2, [pc, #372]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f4a:	4b5d      	ldr	r3, [pc, #372]	; (80050c0 <HAL_RCC_OscConfig+0x2b0>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff f804 	bl	8003f5c <HAL_InitTick>
 8004f54:	4603      	mov	r3, r0
 8004f56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d052      	beq.n	8005004 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	e33b      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d032      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f6a:	4b52      	ldr	r3, [pc, #328]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a51      	ldr	r2, [pc, #324]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f76:	f7ff f83d 	bl	8003ff4 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f7e:	f7ff f839 	bl	8003ff4 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e324      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f90:	4b48      	ldr	r3, [pc, #288]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f9c:	4b45      	ldr	r3, [pc, #276]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a44      	ldr	r2, [pc, #272]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004fa2:	f043 0308 	orr.w	r3, r3, #8
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	4b42      	ldr	r3, [pc, #264]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	493f      	ldr	r1, [pc, #252]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fba:	4b3e      	ldr	r3, [pc, #248]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	493a      	ldr	r1, [pc, #232]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	604b      	str	r3, [r1, #4]
 8004fce:	e01a      	b.n	8005006 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004fd0:	4b38      	ldr	r3, [pc, #224]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a37      	ldr	r2, [pc, #220]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004fd6:	f023 0301 	bic.w	r3, r3, #1
 8004fda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fdc:	f7ff f80a 	bl	8003ff4 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fe4:	f7ff f806 	bl	8003ff4 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e2f1      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ff6:	4b2f      	ldr	r3, [pc, #188]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f0      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x1d4>
 8005002:	e000      	b.n	8005006 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005004:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d074      	beq.n	80050fc <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d005      	beq.n	8005024 <HAL_RCC_OscConfig+0x214>
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d10e      	bne.n	800503c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b03      	cmp	r3, #3
 8005022:	d10b      	bne.n	800503c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005024:	4b23      	ldr	r3, [pc, #140]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d064      	beq.n	80050fa <HAL_RCC_OscConfig+0x2ea>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d160      	bne.n	80050fa <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e2ce      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005044:	d106      	bne.n	8005054 <HAL_RCC_OscConfig+0x244>
 8005046:	4b1b      	ldr	r3, [pc, #108]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1a      	ldr	r2, [pc, #104]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e01d      	b.n	8005090 <HAL_RCC_OscConfig+0x280>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800505c:	d10c      	bne.n	8005078 <HAL_RCC_OscConfig+0x268>
 800505e:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a14      	ldr	r2, [pc, #80]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8005064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	4b12      	ldr	r3, [pc, #72]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a11      	ldr	r2, [pc, #68]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8005070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e00b      	b.n	8005090 <HAL_RCC_OscConfig+0x280>
 8005078:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a0d      	ldr	r2, [pc, #52]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 800507e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a0a      	ldr	r2, [pc, #40]	; (80050b4 <HAL_RCC_OscConfig+0x2a4>)
 800508a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800508e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01c      	beq.n	80050d2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005098:	f7fe ffac 	bl	8003ff4 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800509e:	e011      	b.n	80050c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a0:	f7fe ffa8 	bl	8003ff4 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b64      	cmp	r3, #100	; 0x64
 80050ac:	d90a      	bls.n	80050c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e293      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
 80050b2:	bf00      	nop
 80050b4:	40021000 	.word	0x40021000
 80050b8:	08006a18 	.word	0x08006a18
 80050bc:	20000000 	.word	0x20000000
 80050c0:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c4:	4bae      	ldr	r3, [pc, #696]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0e7      	beq.n	80050a0 <HAL_RCC_OscConfig+0x290>
 80050d0:	e014      	b.n	80050fc <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d2:	f7fe ff8f 	bl	8003ff4 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050da:	f7fe ff8b 	bl	8003ff4 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b64      	cmp	r3, #100	; 0x64
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e276      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ec:	4ba4      	ldr	r3, [pc, #656]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1f0      	bne.n	80050da <HAL_RCC_OscConfig+0x2ca>
 80050f8:	e000      	b.n	80050fc <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d060      	beq.n	80051ca <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	2b04      	cmp	r3, #4
 800510c:	d005      	beq.n	800511a <HAL_RCC_OscConfig+0x30a>
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b0c      	cmp	r3, #12
 8005112:	d119      	bne.n	8005148 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d116      	bne.n	8005148 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800511a:	4b99      	ldr	r3, [pc, #612]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_RCC_OscConfig+0x322>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e253      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005132:	4b93      	ldr	r3, [pc, #588]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	061b      	lsls	r3, r3, #24
 8005140:	498f      	ldr	r1, [pc, #572]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005142:	4313      	orrs	r3, r2
 8005144:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005146:	e040      	b.n	80051ca <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d023      	beq.n	8005198 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005150:	4b8b      	ldr	r3, [pc, #556]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a8a      	ldr	r2, [pc, #552]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fe ff4a 	bl	8003ff4 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005164:	f7fe ff46 	bl	8003ff4 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e231      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005176:	4b82      	ldr	r3, [pc, #520]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0f0      	beq.n	8005164 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005182:	4b7f      	ldr	r3, [pc, #508]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	061b      	lsls	r3, r3, #24
 8005190:	497b      	ldr	r1, [pc, #492]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005192:	4313      	orrs	r3, r2
 8005194:	604b      	str	r3, [r1, #4]
 8005196:	e018      	b.n	80051ca <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005198:	4b79      	ldr	r3, [pc, #484]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a78      	ldr	r2, [pc, #480]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 800519e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fe ff26 	bl	8003ff4 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ac:	f7fe ff22 	bl	8003ff4 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e20d      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051be:	4b70      	ldr	r3, [pc, #448]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d03c      	beq.n	8005250 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01c      	beq.n	8005218 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051de:	4b68      	ldr	r3, [pc, #416]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 80051e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051e4:	4a66      	ldr	r2, [pc, #408]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 80051e6:	f043 0301 	orr.w	r3, r3, #1
 80051ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ee:	f7fe ff01 	bl	8003ff4 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f6:	f7fe fefd 	bl	8003ff4 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e1e8      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005208:	4b5d      	ldr	r3, [pc, #372]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 800520a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0ef      	beq.n	80051f6 <HAL_RCC_OscConfig+0x3e6>
 8005216:	e01b      	b.n	8005250 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005218:	4b59      	ldr	r3, [pc, #356]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 800521a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800521e:	4a58      	ldr	r2, [pc, #352]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005228:	f7fe fee4 	bl	8003ff4 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005230:	f7fe fee0 	bl	8003ff4 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e1cb      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005242:	4b4f      	ldr	r3, [pc, #316]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1ef      	bne.n	8005230 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 80a5 	beq.w	80053a8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800525e:	2300      	movs	r3, #0
 8005260:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005262:	4b47      	ldr	r3, [pc, #284]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10d      	bne.n	800528a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	4b44      	ldr	r3, [pc, #272]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005272:	4a43      	ldr	r2, [pc, #268]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005278:	6593      	str	r3, [r2, #88]	; 0x58
 800527a:	4b41      	ldr	r3, [pc, #260]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 800527c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005286:	2301      	movs	r3, #1
 8005288:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800528a:	4b3e      	ldr	r3, [pc, #248]	; (8005384 <HAL_RCC_OscConfig+0x574>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d118      	bne.n	80052c8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005296:	4b3b      	ldr	r3, [pc, #236]	; (8005384 <HAL_RCC_OscConfig+0x574>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a3a      	ldr	r2, [pc, #232]	; (8005384 <HAL_RCC_OscConfig+0x574>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a2:	f7fe fea7 	bl	8003ff4 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052aa:	f7fe fea3 	bl	8003ff4 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e18e      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052bc:	4b31      	ldr	r3, [pc, #196]	; (8005384 <HAL_RCC_OscConfig+0x574>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0f0      	beq.n	80052aa <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d108      	bne.n	80052e2 <HAL_RCC_OscConfig+0x4d2>
 80052d0:	4b2b      	ldr	r3, [pc, #172]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	4a2a      	ldr	r2, [pc, #168]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052e0:	e024      	b.n	800532c <HAL_RCC_OscConfig+0x51c>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d110      	bne.n	800530c <HAL_RCC_OscConfig+0x4fc>
 80052ea:	4b25      	ldr	r3, [pc, #148]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 80052ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f0:	4a23      	ldr	r2, [pc, #140]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 80052f2:	f043 0304 	orr.w	r3, r3, #4
 80052f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052fa:	4b21      	ldr	r3, [pc, #132]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005300:	4a1f      	ldr	r2, [pc, #124]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005302:	f043 0301 	orr.w	r3, r3, #1
 8005306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800530a:	e00f      	b.n	800532c <HAL_RCC_OscConfig+0x51c>
 800530c:	4b1c      	ldr	r3, [pc, #112]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 800530e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005312:	4a1b      	ldr	r2, [pc, #108]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005314:	f023 0301 	bic.w	r3, r3, #1
 8005318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800531c:	4b18      	ldr	r3, [pc, #96]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	4a17      	ldr	r2, [pc, #92]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005324:	f023 0304 	bic.w	r3, r3, #4
 8005328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d016      	beq.n	8005362 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005334:	f7fe fe5e 	bl	8003ff4 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800533a:	e00a      	b.n	8005352 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533c:	f7fe fe5a 	bl	8003ff4 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	f241 3288 	movw	r2, #5000	; 0x1388
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e143      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005352:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCC_OscConfig+0x570>)
 8005354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0ed      	beq.n	800533c <HAL_RCC_OscConfig+0x52c>
 8005360:	e019      	b.n	8005396 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005362:	f7fe fe47 	bl	8003ff4 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005368:	e00e      	b.n	8005388 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536a:	f7fe fe43 	bl	8003ff4 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	f241 3288 	movw	r2, #5000	; 0x1388
 8005378:	4293      	cmp	r3, r2
 800537a:	d905      	bls.n	8005388 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e12c      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
 8005380:	40021000 	.word	0x40021000
 8005384:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005388:	4b96      	ldr	r3, [pc, #600]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e9      	bne.n	800536a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005396:	7ffb      	ldrb	r3, [r7, #31]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d105      	bne.n	80053a8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539c:	4b91      	ldr	r3, [pc, #580]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 800539e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a0:	4a90      	ldr	r2, [pc, #576]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 80053a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d03c      	beq.n	800542e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01c      	beq.n	80053f6 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053bc:	4b89      	ldr	r3, [pc, #548]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 80053be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053c2:	4a88      	ldr	r2, [pc, #544]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 80053c4:	f043 0301 	orr.w	r3, r3, #1
 80053c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053cc:	f7fe fe12 	bl	8003ff4 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053d4:	f7fe fe0e 	bl	8003ff4 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e0f9      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80053e6:	4b7f      	ldr	r3, [pc, #508]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 80053e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0ef      	beq.n	80053d4 <HAL_RCC_OscConfig+0x5c4>
 80053f4:	e01b      	b.n	800542e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053f6:	4b7b      	ldr	r3, [pc, #492]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 80053f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053fc:	4a79      	ldr	r2, [pc, #484]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005406:	f7fe fdf5 	bl	8003ff4 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800540e:	f7fe fdf1 	bl	8003ff4 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e0dc      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005420:	4b70      	ldr	r3, [pc, #448]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 8005422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1ef      	bne.n	800540e <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80d0 	beq.w	80055d8 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b0c      	cmp	r3, #12
 800543c:	f000 808d 	beq.w	800555a <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005444:	2b02      	cmp	r3, #2
 8005446:	d15a      	bne.n	80054fe <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005448:	4b66      	ldr	r3, [pc, #408]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a65      	ldr	r2, [pc, #404]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 800544e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fe fdce 	bl	8003ff4 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800545c:	f7fe fdca 	bl	8003ff4 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e0b5      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800546e:	4b5d      	ldr	r3, [pc, #372]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800547a:	4b5a      	ldr	r3, [pc, #360]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	4b5a      	ldr	r3, [pc, #360]	; (80055e8 <HAL_RCC_OscConfig+0x7d8>)
 8005480:	4013      	ands	r3, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800548a:	3a01      	subs	r2, #1
 800548c:	0112      	lsls	r2, r2, #4
 800548e:	4311      	orrs	r1, r2
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005494:	0212      	lsls	r2, r2, #8
 8005496:	4311      	orrs	r1, r2
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800549c:	0852      	lsrs	r2, r2, #1
 800549e:	3a01      	subs	r2, #1
 80054a0:	0552      	lsls	r2, r2, #21
 80054a2:	4311      	orrs	r1, r2
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80054a8:	0852      	lsrs	r2, r2, #1
 80054aa:	3a01      	subs	r2, #1
 80054ac:	0652      	lsls	r2, r2, #25
 80054ae:	4311      	orrs	r1, r2
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054b4:	06d2      	lsls	r2, r2, #27
 80054b6:	430a      	orrs	r2, r1
 80054b8:	494a      	ldr	r1, [pc, #296]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054be:	4b49      	ldr	r3, [pc, #292]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a48      	ldr	r2, [pc, #288]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 80054c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054c8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054ca:	4b46      	ldr	r3, [pc, #280]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	4a45      	ldr	r2, [pc, #276]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 80054d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054d4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7fe fd8d 	bl	8003ff4 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054de:	f7fe fd89 	bl	8003ff4 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e074      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054f0:	4b3c      	ldr	r3, [pc, #240]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x6ce>
 80054fc:	e06c      	b.n	80055d8 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fe:	4b39      	ldr	r3, [pc, #228]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a38      	ldr	r2, [pc, #224]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 8005504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005508:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800550a:	4b36      	ldr	r3, [pc, #216]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d105      	bne.n	8005522 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005516:	4b33      	ldr	r3, [pc, #204]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	4a32      	ldr	r2, [pc, #200]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 800551c:	f023 0303 	bic.w	r3, r3, #3
 8005520:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005522:	4b30      	ldr	r3, [pc, #192]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	4a2f      	ldr	r2, [pc, #188]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 8005528:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800552c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005530:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005532:	f7fe fd5f 	bl	8003ff4 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005538:	e008      	b.n	800554c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800553a:	f7fe fd5b 	bl	8003ff4 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e046      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800554c:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1f0      	bne.n	800553a <HAL_RCC_OscConfig+0x72a>
 8005558:	e03e      	b.n	80055d8 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e039      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005566:	4b1f      	ldr	r3, [pc, #124]	; (80055e4 <HAL_RCC_OscConfig+0x7d4>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f003 0203 	and.w	r2, r3, #3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	429a      	cmp	r2, r3
 8005578:	d12c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	3b01      	subs	r3, #1
 8005586:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d123      	bne.n	80055d4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005596:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d11b      	bne.n	80055d4 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d113      	bne.n	80055d4 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	3b01      	subs	r3, #1
 80055ba:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d109      	bne.n	80055d4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	3b01      	subs	r3, #1
 80055ce:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d001      	beq.n	80055d8 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3720      	adds	r7, #32
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40021000 	.word	0x40021000
 80055e8:	019d808c 	.word	0x019d808c

080055ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0c8      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005600:	4b66      	ldr	r3, [pc, #408]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d910      	bls.n	8005630 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800560e:	4b63      	ldr	r3, [pc, #396]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f023 0207 	bic.w	r2, r3, #7
 8005616:	4961      	ldr	r1, [pc, #388]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	4313      	orrs	r3, r2
 800561c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800561e:	4b5f      	ldr	r3, [pc, #380]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	429a      	cmp	r2, r3
 800562a:	d001      	beq.n	8005630 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0b0      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d04c      	beq.n	80056d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b03      	cmp	r3, #3
 8005642:	d107      	bne.n	8005654 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005644:	4b56      	ldr	r3, [pc, #344]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d121      	bne.n	8005694 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e09e      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d107      	bne.n	800566c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800565c:	4b50      	ldr	r3, [pc, #320]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d115      	bne.n	8005694 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e092      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d107      	bne.n	8005684 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005674:	4b4a      	ldr	r3, [pc, #296]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d109      	bne.n	8005694 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e086      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005684:	4b46      	ldr	r3, [pc, #280]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e07e      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005694:	4b42      	ldr	r3, [pc, #264]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f023 0203 	bic.w	r2, r3, #3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	493f      	ldr	r1, [pc, #252]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a6:	f7fe fca5 	bl	8003ff4 <HAL_GetTick>
 80056aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ac:	e00a      	b.n	80056c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ae:	f7fe fca1 	bl	8003ff4 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056bc:	4293      	cmp	r3, r2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e066      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c4:	4b36      	ldr	r3, [pc, #216]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 020c 	and.w	r2, r3, #12
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d1eb      	bne.n	80056ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d008      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e2:	4b2f      	ldr	r3, [pc, #188]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	492c      	ldr	r1, [pc, #176]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056f4:	4b29      	ldr	r3, [pc, #164]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d210      	bcs.n	8005724 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005702:	4b26      	ldr	r3, [pc, #152]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f023 0207 	bic.w	r2, r3, #7
 800570a:	4924      	ldr	r1, [pc, #144]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	4313      	orrs	r3, r2
 8005710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	4b22      	ldr	r3, [pc, #136]	; (800579c <HAL_RCC_ClockConfig+0x1b0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	429a      	cmp	r2, r3
 800571e:	d001      	beq.n	8005724 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e036      	b.n	8005792 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005730:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4918      	ldr	r1, [pc, #96]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 800573e:	4313      	orrs	r3, r2
 8005740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800574e:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	4910      	ldr	r1, [pc, #64]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 800575e:	4313      	orrs	r3, r2
 8005760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005762:	f000 f825 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 8005766:	4601      	mov	r1, r0
 8005768:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <HAL_RCC_ClockConfig+0x1b4>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	4a0c      	ldr	r2, [pc, #48]	; (80057a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005774:	5cd3      	ldrb	r3, [r2, r3]
 8005776:	f003 031f 	and.w	r3, r3, #31
 800577a:	fa21 f303 	lsr.w	r3, r1, r3
 800577e:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005782:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <HAL_RCC_ClockConfig+0x1c0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f7fe fbe8 	bl	8003f5c <HAL_InitTick>
 800578c:	4603      	mov	r3, r0
 800578e:	72fb      	strb	r3, [r7, #11]

  return status;
 8005790:	7afb      	ldrb	r3, [r7, #11]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40022000 	.word	0x40022000
 80057a0:	40021000 	.word	0x40021000
 80057a4:	08006a18 	.word	0x08006a18
 80057a8:	20000000 	.word	0x20000000
 80057ac:	20000004 	.word	0x20000004

080057b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b089      	sub	sp, #36	; 0x24
 80057b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	2300      	movs	r3, #0
 80057bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057be:	4b3d      	ldr	r3, [pc, #244]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
 80057c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057c8:	4b3a      	ldr	r3, [pc, #232]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0303 	and.w	r3, r3, #3
 80057d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <HAL_RCC_GetSysClockFreq+0x34>
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b0c      	cmp	r3, #12
 80057dc:	d121      	bne.n	8005822 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d11e      	bne.n	8005822 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80057e4:	4b33      	ldr	r3, [pc, #204]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0308 	and.w	r3, r3, #8
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d107      	bne.n	8005800 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80057f0:	4b30      	ldr	r3, [pc, #192]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80057f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	f003 030f 	and.w	r3, r3, #15
 80057fc:	61fb      	str	r3, [r7, #28]
 80057fe:	e005      	b.n	800580c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005800:	4b2c      	ldr	r3, [pc, #176]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800580c:	4a2a      	ldr	r2, [pc, #168]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005814:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10d      	bne.n	8005838 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005820:	e00a      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2b04      	cmp	r3, #4
 8005826:	d102      	bne.n	800582e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005828:	4b24      	ldr	r3, [pc, #144]	; (80058bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	e004      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b08      	cmp	r3, #8
 8005832:	d101      	bne.n	8005838 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005834:	4b22      	ldr	r3, [pc, #136]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005836:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b0c      	cmp	r3, #12
 800583c:	d133      	bne.n	80058a6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800583e:	4b1d      	ldr	r3, [pc, #116]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f003 0303 	and.w	r3, r3, #3
 8005846:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d002      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0xa4>
 800584e:	2b03      	cmp	r3, #3
 8005850:	d003      	beq.n	800585a <HAL_RCC_GetSysClockFreq+0xaa>
 8005852:	e005      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005854:	4b19      	ldr	r3, [pc, #100]	; (80058bc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005856:	617b      	str	r3, [r7, #20]
      break;
 8005858:	e005      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800585a:	4b19      	ldr	r3, [pc, #100]	; (80058c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800585c:	617b      	str	r3, [r7, #20]
      break;
 800585e:	e002      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	617b      	str	r3, [r7, #20]
      break;
 8005864:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005866:	4b13      	ldr	r3, [pc, #76]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	091b      	lsrs	r3, r3, #4
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	3301      	adds	r3, #1
 8005872:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005874:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	0a1b      	lsrs	r3, r3, #8
 800587a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	fb02 f203 	mul.w	r2, r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	fbb2 f3f3 	udiv	r3, r2, r3
 800588a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800588c:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <HAL_RCC_GetSysClockFreq+0x104>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	0e5b      	lsrs	r3, r3, #25
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	3301      	adds	r3, #1
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80058a6:	69bb      	ldr	r3, [r7, #24]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3724      	adds	r7, #36	; 0x24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	40021000 	.word	0x40021000
 80058b8:	08006a30 	.word	0x08006a30
 80058bc:	00f42400 	.word	0x00f42400
 80058c0:	007a1200 	.word	0x007a1200

080058c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058c8:	4b03      	ldr	r3, [pc, #12]	; (80058d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058ca:	681b      	ldr	r3, [r3, #0]
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	20000000 	.word	0x20000000

080058dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058e0:	f7ff fff0 	bl	80058c4 <HAL_RCC_GetHCLKFreq>
 80058e4:	4601      	mov	r1, r0
 80058e6:	4b06      	ldr	r3, [pc, #24]	; (8005900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	0a1b      	lsrs	r3, r3, #8
 80058ec:	f003 0307 	and.w	r3, r3, #7
 80058f0:	4a04      	ldr	r2, [pc, #16]	; (8005904 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058f2:	5cd3      	ldrb	r3, [r2, r3]
 80058f4:	f003 031f 	and.w	r3, r3, #31
 80058f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40021000 	.word	0x40021000
 8005904:	08006a28 	.word	0x08006a28

08005908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800590c:	f7ff ffda 	bl	80058c4 <HAL_RCC_GetHCLKFreq>
 8005910:	4601      	mov	r1, r0
 8005912:	4b06      	ldr	r3, [pc, #24]	; (800592c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	0adb      	lsrs	r3, r3, #11
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	4a04      	ldr	r2, [pc, #16]	; (8005930 <HAL_RCC_GetPCLK2Freq+0x28>)
 800591e:	5cd3      	ldrb	r3, [r2, r3]
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005928:	4618      	mov	r0, r3
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40021000 	.word	0x40021000
 8005930:	08006a28 	.word	0x08006a28

08005934 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800593c:	2300      	movs	r3, #0
 800593e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005940:	4b2a      	ldr	r3, [pc, #168]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800594c:	f7ff f9fc 	bl	8004d48 <HAL_PWREx_GetVoltageRange>
 8005950:	6178      	str	r0, [r7, #20]
 8005952:	e014      	b.n	800597e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005954:	4b25      	ldr	r3, [pc, #148]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	4a24      	ldr	r2, [pc, #144]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800595a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800595e:	6593      	str	r3, [r2, #88]	; 0x58
 8005960:	4b22      	ldr	r3, [pc, #136]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800596c:	f7ff f9ec 	bl	8004d48 <HAL_PWREx_GetVoltageRange>
 8005970:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005972:	4b1e      	ldr	r3, [pc, #120]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800597c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005984:	d10b      	bne.n	800599e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b80      	cmp	r3, #128	; 0x80
 800598a:	d919      	bls.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2ba0      	cmp	r3, #160	; 0xa0
 8005990:	d902      	bls.n	8005998 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005992:	2302      	movs	r3, #2
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	e013      	b.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005998:	2301      	movs	r3, #1
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	e010      	b.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b80      	cmp	r3, #128	; 0x80
 80059a2:	d902      	bls.n	80059aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80059a4:	2303      	movs	r3, #3
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	e00a      	b.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b80      	cmp	r3, #128	; 0x80
 80059ae:	d102      	bne.n	80059b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80059b0:	2302      	movs	r3, #2
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	e004      	b.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b70      	cmp	r3, #112	; 0x70
 80059ba:	d101      	bne.n	80059c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80059bc:	2301      	movs	r3, #1
 80059be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f023 0207 	bic.w	r2, r3, #7
 80059c8:	4909      	ldr	r1, [pc, #36]	; (80059f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80059d0:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d001      	beq.n	80059e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40021000 	.word	0x40021000
 80059f0:	40022000 	.word	0x40022000

080059f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059fc:	2300      	movs	r3, #0
 80059fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a00:	2300      	movs	r3, #0
 8005a02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d02f      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a18:	d005      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005a1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a1e:	d015      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005a24:	e00f      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005a26:	4bac      	ldr	r3, [pc, #688]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	4aab      	ldr	r2, [pc, #684]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a30:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a32:	e00c      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3304      	adds	r3, #4
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 f9dc 	bl	8005df8 <RCCEx_PLLSAI1_Config>
 8005a40:	4603      	mov	r3, r0
 8005a42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a44:	e003      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	74fb      	strb	r3, [r7, #19]
      break;
 8005a4a:	e000      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8005a4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a4e:	7cfb      	ldrb	r3, [r7, #19]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10b      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a54:	4ba0      	ldr	r3, [pc, #640]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	499d      	ldr	r1, [pc, #628]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a6a:	e001      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6c:	7cfb      	ldrb	r3, [r7, #19]
 8005a6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 8099 	beq.w	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a82:	4b95      	ldr	r3, [pc, #596]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8005a92:	2300      	movs	r3, #0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00d      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a98:	4b8f      	ldr	r3, [pc, #572]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9c:	4a8e      	ldr	r2, [pc, #568]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8005aa4:	4b8c      	ldr	r3, [pc, #560]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ab4:	4b89      	ldr	r3, [pc, #548]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a88      	ldr	r2, [pc, #544]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005abe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ac0:	f7fe fa98 	bl	8003ff4 <HAL_GetTick>
 8005ac4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ac6:	e009      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ac8:	f7fe fa94 	bl	8003ff4 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d902      	bls.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	74fb      	strb	r3, [r7, #19]
        break;
 8005ada:	e005      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005adc:	4b7f      	ldr	r3, [pc, #508]	; (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0ef      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8005ae8:	7cfb      	ldrb	r3, [r7, #19]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d155      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005aee:	4b7a      	ldr	r3, [pc, #488]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01e      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d019      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b0a:	4b73      	ldr	r3, [pc, #460]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b14:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b16:	4b70      	ldr	r3, [pc, #448]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1c:	4a6e      	ldr	r2, [pc, #440]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b26:	4b6c      	ldr	r3, [pc, #432]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2c:	4a6a      	ldr	r2, [pc, #424]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b36:	4a68      	ldr	r2, [pc, #416]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d016      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b48:	f7fe fa54 	bl	8003ff4 <HAL_GetTick>
 8005b4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b4e:	e00b      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b50:	f7fe fa50 	bl	8003ff4 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d902      	bls.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	74fb      	strb	r3, [r7, #19]
            break;
 8005b66:	e006      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b68:	4b5b      	ldr	r3, [pc, #364]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0ec      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8005b76:	7cfb      	ldrb	r3, [r7, #19]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10b      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b7c:	4b56      	ldr	r3, [pc, #344]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b8a:	4953      	ldr	r1, [pc, #332]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b92:	e004      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b94:	7cfb      	ldrb	r3, [r7, #19]
 8005b96:	74bb      	strb	r3, [r7, #18]
 8005b98:	e001      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9a:	7cfb      	ldrb	r3, [r7, #19]
 8005b9c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b9e:	7c7b      	ldrb	r3, [r7, #17]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d105      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ba4:	4b4c      	ldr	r3, [pc, #304]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba8:	4a4b      	ldr	r2, [pc, #300]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bbc:	4b46      	ldr	r3, [pc, #280]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f023 0203 	bic.w	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	4943      	ldr	r1, [pc, #268]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bde:	4b3e      	ldr	r3, [pc, #248]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be4:	f023 020c 	bic.w	r2, r3, #12
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	493a      	ldr	r1, [pc, #232]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c00:	4b35      	ldr	r3, [pc, #212]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	4932      	ldr	r1, [pc, #200]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c22:	4b2d      	ldr	r3, [pc, #180]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c30:	4929      	ldr	r1, [pc, #164]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c44:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	4921      	ldr	r1, [pc, #132]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c66:	4b1c      	ldr	r3, [pc, #112]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	4918      	ldr	r1, [pc, #96]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c88:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	4910      	ldr	r1, [pc, #64]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d02c      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	4907      	ldr	r1, [pc, #28]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cc8:	d10a      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cca:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	4a02      	ldr	r2, [pc, #8]	; (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005cd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cd4:	60d3      	str	r3, [r2, #12]
 8005cd6:	e015      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ce8:	d10c      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3304      	adds	r3, #4
 8005cee:	2101      	movs	r1, #1
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 f881 	bl	8005df8 <RCCEx_PLLSAI1_Config>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005cfa:	7cfb      	ldrb	r3, [r7, #19]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8005d00:	7cfb      	ldrb	r3, [r7, #19]
 8005d02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d028      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d10:	4b30      	ldr	r3, [pc, #192]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1e:	492d      	ldr	r1, [pc, #180]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d2e:	d106      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d30:	4b28      	ldr	r3, [pc, #160]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	4a27      	ldr	r2, [pc, #156]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d3a:	60d3      	str	r3, [r2, #12]
 8005d3c:	e011      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d46:	d10c      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 f852 	bl	8005df8 <RCCEx_PLLSAI1_Config>
 8005d54:	4603      	mov	r3, r0
 8005d56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d58:	7cfb      	ldrb	r3, [r7, #19]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8005d5e:	7cfb      	ldrb	r3, [r7, #19]
 8005d60:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d01c      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d6e:	4b19      	ldr	r3, [pc, #100]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d7c:	4915      	ldr	r1, [pc, #84]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d8c:	d10c      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3304      	adds	r3, #4
 8005d92:	2102      	movs	r1, #2
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 f82f 	bl	8005df8 <RCCEx_PLLSAI1_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d9e:	7cfb      	ldrb	r3, [r7, #19]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8005da4:	7cfb      	ldrb	r3, [r7, #19]
 8005da6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005db4:	4b07      	ldr	r3, [pc, #28]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc2:	4904      	ldr	r1, [pc, #16]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005dca:	7cbb      	ldrb	r3, [r7, #18]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40021000 	.word	0x40021000

08005dd8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a04      	ldr	r2, [pc, #16]	; (8005df4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005de2:	f043 0304 	orr.w	r3, r3, #4
 8005de6:	6013      	str	r3, [r2, #0]
}
 8005de8:	bf00      	nop
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40021000 	.word	0x40021000

08005df8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e06:	4b73      	ldr	r3, [pc, #460]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d018      	beq.n	8005e44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e12:	4b70      	ldr	r3, [pc, #448]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f003 0203 	and.w	r2, r3, #3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d10d      	bne.n	8005e3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
       ||
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d009      	beq.n	8005e3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e2a:	4b6a      	ldr	r3, [pc, #424]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	091b      	lsrs	r3, r3, #4
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
       ||
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d044      	beq.n	8005ec8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
 8005e42:	e041      	b.n	8005ec8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d00c      	beq.n	8005e66 <RCCEx_PLLSAI1_Config+0x6e>
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d013      	beq.n	8005e78 <RCCEx_PLLSAI1_Config+0x80>
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d120      	bne.n	8005e96 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e54:	4b5f      	ldr	r3, [pc, #380]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d11d      	bne.n	8005e9c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e64:	e01a      	b.n	8005e9c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e66:	4b5b      	ldr	r3, [pc, #364]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d116      	bne.n	8005ea0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e76:	e013      	b.n	8005ea0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e78:	4b56      	ldr	r3, [pc, #344]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10f      	bne.n	8005ea4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e84:	4b53      	ldr	r3, [pc, #332]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d109      	bne.n	8005ea4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e94:	e006      	b.n	8005ea4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	73fb      	strb	r3, [r7, #15]
      break;
 8005e9a:	e004      	b.n	8005ea6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005e9c:	bf00      	nop
 8005e9e:	e002      	b.n	8005ea6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005ea0:	bf00      	nop
 8005ea2:	e000      	b.n	8005ea6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005ea4:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10d      	bne.n	8005ec8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005eac:	4b49      	ldr	r3, [pc, #292]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6819      	ldr	r1, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	4944      	ldr	r1, [pc, #272]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d17c      	bne.n	8005fc8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ece:	4b41      	ldr	r3, [pc, #260]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a40      	ldr	r2, [pc, #256]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ed4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eda:	f7fe f88b 	bl	8003ff4 <HAL_GetTick>
 8005ede:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ee0:	e009      	b.n	8005ef6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ee2:	f7fe f887 	bl	8003ff4 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d902      	bls.n	8005ef6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	73fb      	strb	r3, [r7, #15]
        break;
 8005ef4:	e005      	b.n	8005f02 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ef6:	4b37      	ldr	r3, [pc, #220]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1ef      	bne.n	8005ee2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d15f      	bne.n	8005fc8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d110      	bne.n	8005f30 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f0e:	4b31      	ldr	r3, [pc, #196]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005f16:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6892      	ldr	r2, [r2, #8]
 8005f1e:	0211      	lsls	r1, r2, #8
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	68d2      	ldr	r2, [r2, #12]
 8005f24:	06d2      	lsls	r2, r2, #27
 8005f26:	430a      	orrs	r2, r1
 8005f28:	492a      	ldr	r1, [pc, #168]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	610b      	str	r3, [r1, #16]
 8005f2e:	e027      	b.n	8005f80 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d112      	bne.n	8005f5c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f36:	4b27      	ldr	r3, [pc, #156]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005f3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6892      	ldr	r2, [r2, #8]
 8005f46:	0211      	lsls	r1, r2, #8
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6912      	ldr	r2, [r2, #16]
 8005f4c:	0852      	lsrs	r2, r2, #1
 8005f4e:	3a01      	subs	r2, #1
 8005f50:	0552      	lsls	r2, r2, #21
 8005f52:	430a      	orrs	r2, r1
 8005f54:	491f      	ldr	r1, [pc, #124]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	610b      	str	r3, [r1, #16]
 8005f5a:	e011      	b.n	8005f80 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f5c:	4b1d      	ldr	r3, [pc, #116]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6892      	ldr	r2, [r2, #8]
 8005f6c:	0211      	lsls	r1, r2, #8
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6952      	ldr	r2, [r2, #20]
 8005f72:	0852      	lsrs	r2, r2, #1
 8005f74:	3a01      	subs	r2, #1
 8005f76:	0652      	lsls	r2, r2, #25
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	4916      	ldr	r1, [pc, #88]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005f80:	4b14      	ldr	r3, [pc, #80]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a13      	ldr	r2, [pc, #76]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8c:	f7fe f832 	bl	8003ff4 <HAL_GetTick>
 8005f90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005f92:	e009      	b.n	8005fa8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f94:	f7fe f82e 	bl	8003ff4 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d902      	bls.n	8005fa8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	73fb      	strb	r3, [r7, #15]
          break;
 8005fa6:	e005      	b.n	8005fb4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d0ef      	beq.n	8005f94 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8005fb4:	7bfb      	ldrb	r3, [r7, #15]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005fba:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	4904      	ldr	r1, [pc, #16]	; (8005fd4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	40021000 	.word	0x40021000

08005fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e040      	b.n	800606c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fa fe2e 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2224      	movs	r2, #36	; 0x24
 8006004:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f022 0201 	bic.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f8c0 	bl	800619c <UART_SetConfig>
 800601c:	4603      	mov	r3, r0
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e022      	b.n	800606c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fb7e 	bl	8006730 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fc05 	bl	8006874 <UART_CheckIdleState>
 800606a:	4603      	mov	r3, r0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b08a      	sub	sp, #40	; 0x28
 8006078:	af02      	add	r7, sp, #8
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	4613      	mov	r3, r2
 8006082:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006088:	2b20      	cmp	r3, #32
 800608a:	f040 8081 	bne.w	8006190 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_UART_Transmit+0x26>
 8006094:	88fb      	ldrh	r3, [r7, #6]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e079      	b.n	8006192 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_UART_Transmit+0x38>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e072      	b.n	8006192 <HAL_UART_Transmit+0x11e>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2221      	movs	r2, #33	; 0x21
 80060be:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80060c0:	f7fd ff98 	bl	8003ff4 <HAL_GetTick>
 80060c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	88fa      	ldrh	r2, [r7, #6]
 80060ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	88fa      	ldrh	r2, [r7, #6]
 80060d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060de:	d108      	bne.n	80060f2 <HAL_UART_Transmit+0x7e>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	61bb      	str	r3, [r7, #24]
 80060f0:	e003      	b.n	80060fa <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060fa:	e02d      	b.n	8006158 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2200      	movs	r2, #0
 8006104:	2180      	movs	r1, #128	; 0x80
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 fbf9 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e03d      	b.n	8006192 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	881a      	ldrh	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006128:	b292      	uxth	r2, r2
 800612a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	3302      	adds	r3, #2
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	e008      	b.n	8006146 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	781a      	ldrb	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	b292      	uxth	r2, r2
 800613e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	3301      	adds	r3, #1
 8006144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1cb      	bne.n	80060fc <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2200      	movs	r2, #0
 800616c:	2140      	movs	r1, #64	; 0x40
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 fbc5 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e009      	b.n	8006192 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	e000      	b.n	8006192 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006190:	2302      	movs	r3, #2
  }
}
 8006192:	4618      	mov	r0, r3
 8006194:	3720      	adds	r7, #32
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800619c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80061a0:	b088      	sub	sp, #32
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	4bbc      	ldr	r3, [pc, #752]	; (80064c4 <UART_SetConfig+0x328>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6812      	ldr	r2, [r2, #0]
 80061d8:	69f9      	ldr	r1, [r7, #28]
 80061da:	430b      	orrs	r3, r1
 80061dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4ab2      	ldr	r2, [pc, #712]	; (80064c8 <UART_SetConfig+0x32c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d004      	beq.n	800620e <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	4313      	orrs	r3, r2
 800620c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	430a      	orrs	r2, r1
 8006220:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4aa9      	ldr	r2, [pc, #676]	; (80064cc <UART_SetConfig+0x330>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d121      	bne.n	8006270 <UART_SetConfig+0xd4>
 800622c:	4ba8      	ldr	r3, [pc, #672]	; (80064d0 <UART_SetConfig+0x334>)
 800622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	2b03      	cmp	r3, #3
 8006238:	d816      	bhi.n	8006268 <UART_SetConfig+0xcc>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <UART_SetConfig+0xa4>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	08006251 	.word	0x08006251
 8006244:	0800625d 	.word	0x0800625d
 8006248:	08006257 	.word	0x08006257
 800624c:	08006263 	.word	0x08006263
 8006250:	2301      	movs	r3, #1
 8006252:	76fb      	strb	r3, [r7, #27]
 8006254:	e072      	b.n	800633c <UART_SetConfig+0x1a0>
 8006256:	2302      	movs	r3, #2
 8006258:	76fb      	strb	r3, [r7, #27]
 800625a:	e06f      	b.n	800633c <UART_SetConfig+0x1a0>
 800625c:	2304      	movs	r3, #4
 800625e:	76fb      	strb	r3, [r7, #27]
 8006260:	e06c      	b.n	800633c <UART_SetConfig+0x1a0>
 8006262:	2308      	movs	r3, #8
 8006264:	76fb      	strb	r3, [r7, #27]
 8006266:	e069      	b.n	800633c <UART_SetConfig+0x1a0>
 8006268:	2310      	movs	r3, #16
 800626a:	76fb      	strb	r3, [r7, #27]
 800626c:	bf00      	nop
 800626e:	e065      	b.n	800633c <UART_SetConfig+0x1a0>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a97      	ldr	r2, [pc, #604]	; (80064d4 <UART_SetConfig+0x338>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d134      	bne.n	80062e4 <UART_SetConfig+0x148>
 800627a:	4b95      	ldr	r3, [pc, #596]	; (80064d0 <UART_SetConfig+0x334>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006280:	f003 030c 	and.w	r3, r3, #12
 8006284:	2b0c      	cmp	r3, #12
 8006286:	d829      	bhi.n	80062dc <UART_SetConfig+0x140>
 8006288:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <UART_SetConfig+0xf4>)
 800628a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628e:	bf00      	nop
 8006290:	080062c5 	.word	0x080062c5
 8006294:	080062dd 	.word	0x080062dd
 8006298:	080062dd 	.word	0x080062dd
 800629c:	080062dd 	.word	0x080062dd
 80062a0:	080062d1 	.word	0x080062d1
 80062a4:	080062dd 	.word	0x080062dd
 80062a8:	080062dd 	.word	0x080062dd
 80062ac:	080062dd 	.word	0x080062dd
 80062b0:	080062cb 	.word	0x080062cb
 80062b4:	080062dd 	.word	0x080062dd
 80062b8:	080062dd 	.word	0x080062dd
 80062bc:	080062dd 	.word	0x080062dd
 80062c0:	080062d7 	.word	0x080062d7
 80062c4:	2300      	movs	r3, #0
 80062c6:	76fb      	strb	r3, [r7, #27]
 80062c8:	e038      	b.n	800633c <UART_SetConfig+0x1a0>
 80062ca:	2302      	movs	r3, #2
 80062cc:	76fb      	strb	r3, [r7, #27]
 80062ce:	e035      	b.n	800633c <UART_SetConfig+0x1a0>
 80062d0:	2304      	movs	r3, #4
 80062d2:	76fb      	strb	r3, [r7, #27]
 80062d4:	e032      	b.n	800633c <UART_SetConfig+0x1a0>
 80062d6:	2308      	movs	r3, #8
 80062d8:	76fb      	strb	r3, [r7, #27]
 80062da:	e02f      	b.n	800633c <UART_SetConfig+0x1a0>
 80062dc:	2310      	movs	r3, #16
 80062de:	76fb      	strb	r3, [r7, #27]
 80062e0:	bf00      	nop
 80062e2:	e02b      	b.n	800633c <UART_SetConfig+0x1a0>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a77      	ldr	r2, [pc, #476]	; (80064c8 <UART_SetConfig+0x32c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d124      	bne.n	8006338 <UART_SetConfig+0x19c>
 80062ee:	4b78      	ldr	r3, [pc, #480]	; (80064d0 <UART_SetConfig+0x334>)
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062fc:	d012      	beq.n	8006324 <UART_SetConfig+0x188>
 80062fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006302:	d802      	bhi.n	800630a <UART_SetConfig+0x16e>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d007      	beq.n	8006318 <UART_SetConfig+0x17c>
 8006308:	e012      	b.n	8006330 <UART_SetConfig+0x194>
 800630a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800630e:	d006      	beq.n	800631e <UART_SetConfig+0x182>
 8006310:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006314:	d009      	beq.n	800632a <UART_SetConfig+0x18e>
 8006316:	e00b      	b.n	8006330 <UART_SetConfig+0x194>
 8006318:	2300      	movs	r3, #0
 800631a:	76fb      	strb	r3, [r7, #27]
 800631c:	e00e      	b.n	800633c <UART_SetConfig+0x1a0>
 800631e:	2302      	movs	r3, #2
 8006320:	76fb      	strb	r3, [r7, #27]
 8006322:	e00b      	b.n	800633c <UART_SetConfig+0x1a0>
 8006324:	2304      	movs	r3, #4
 8006326:	76fb      	strb	r3, [r7, #27]
 8006328:	e008      	b.n	800633c <UART_SetConfig+0x1a0>
 800632a:	2308      	movs	r3, #8
 800632c:	76fb      	strb	r3, [r7, #27]
 800632e:	e005      	b.n	800633c <UART_SetConfig+0x1a0>
 8006330:	2310      	movs	r3, #16
 8006332:	76fb      	strb	r3, [r7, #27]
 8006334:	bf00      	nop
 8006336:	e001      	b.n	800633c <UART_SetConfig+0x1a0>
 8006338:	2310      	movs	r3, #16
 800633a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a61      	ldr	r2, [pc, #388]	; (80064c8 <UART_SetConfig+0x32c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	f040 80f4 	bne.w	8006530 <UART_SetConfig+0x394>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006348:	7efb      	ldrb	r3, [r7, #27]
 800634a:	2b08      	cmp	r3, #8
 800634c:	d823      	bhi.n	8006396 <UART_SetConfig+0x1fa>
 800634e:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <UART_SetConfig+0x1b8>)
 8006350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006354:	08006379 	.word	0x08006379
 8006358:	08006397 	.word	0x08006397
 800635c:	08006381 	.word	0x08006381
 8006360:	08006397 	.word	0x08006397
 8006364:	08006387 	.word	0x08006387
 8006368:	08006397 	.word	0x08006397
 800636c:	08006397 	.word	0x08006397
 8006370:	08006397 	.word	0x08006397
 8006374:	0800638f 	.word	0x0800638f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8006378:	f7ff fab0 	bl	80058dc <HAL_RCC_GetPCLK1Freq>
 800637c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800637e:	e00d      	b.n	800639c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006380:	4b55      	ldr	r3, [pc, #340]	; (80064d8 <UART_SetConfig+0x33c>)
 8006382:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006384:	e00a      	b.n	800639c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8006386:	f7ff fa13 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 800638a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800638c:	e006      	b.n	800639c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800638e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006392:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006394:	e002      	b.n	800639c <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	74fb      	strb	r3, [r7, #19]
        break;
 800639a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 81b9 	beq.w	8006716 <UART_SetConfig+0x57a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	4613      	mov	r3, r2
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	4413      	add	r3, r2
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d305      	bcc.n	80063c0 <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d902      	bls.n	80063c6 <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	74fb      	strb	r3, [r7, #19]
 80063c4:	e1a7      	b.n	8006716 <UART_SetConfig+0x57a>
      }
      else
      {
        switch (clocksource)
 80063c6:	7efb      	ldrb	r3, [r7, #27]
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	f200 809e 	bhi.w	800650a <UART_SetConfig+0x36e>
 80063ce:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <UART_SetConfig+0x238>)
 80063d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d4:	080063f9 	.word	0x080063f9
 80063d8:	0800650b 	.word	0x0800650b
 80063dc:	08006445 	.word	0x08006445
 80063e0:	0800650b 	.word	0x0800650b
 80063e4:	08006479 	.word	0x08006479
 80063e8:	0800650b 	.word	0x0800650b
 80063ec:	0800650b 	.word	0x0800650b
 80063f0:	0800650b 	.word	0x0800650b
 80063f4:	080064e1 	.word	0x080064e1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80063f8:	f7ff fa70 	bl	80058dc <HAL_RCC_GetPCLK1Freq>
 80063fc:	4603      	mov	r3, r0
 80063fe:	4619      	mov	r1, r3
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	f04f 0400 	mov.w	r4, #0
 800640c:	0214      	lsls	r4, r2, #8
 800640e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006412:	020b      	lsls	r3, r1, #8
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6852      	ldr	r2, [r2, #4]
 8006418:	0852      	lsrs	r2, r2, #1
 800641a:	4611      	mov	r1, r2
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	eb13 0b01 	adds.w	fp, r3, r1
 8006424:	eb44 0c02 	adc.w	ip, r4, r2
 8006428:	4658      	mov	r0, fp
 800642a:	4661      	mov	r1, ip
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	f04f 0400 	mov.w	r4, #0
 8006434:	461a      	mov	r2, r3
 8006436:	4623      	mov	r3, r4
 8006438:	f7f9 fed0 	bl	80001dc <__aeabi_uldivmod>
 800643c:	4603      	mov	r3, r0
 800643e:	460c      	mov	r4, r1
 8006440:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006442:	e065      	b.n	8006510 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	f04f 0400 	mov.w	r4, #0
 800644e:	4923      	ldr	r1, [pc, #140]	; (80064dc <UART_SetConfig+0x340>)
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	eb13 0b01 	adds.w	fp, r3, r1
 8006458:	eb44 0c02 	adc.w	ip, r4, r2
 800645c:	4658      	mov	r0, fp
 800645e:	4661      	mov	r1, ip
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f04f 0400 	mov.w	r4, #0
 8006468:	461a      	mov	r2, r3
 800646a:	4623      	mov	r3, r4
 800646c:	f7f9 feb6 	bl	80001dc <__aeabi_uldivmod>
 8006470:	4603      	mov	r3, r0
 8006472:	460c      	mov	r4, r1
 8006474:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006476:	e04b      	b.n	8006510 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006478:	f7ff f99a 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 800647c:	4603      	mov	r3, r0
 800647e:	4619      	mov	r1, r3
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	f04f 0400 	mov.w	r4, #0
 800648c:	0214      	lsls	r4, r2, #8
 800648e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006492:	020b      	lsls	r3, r1, #8
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6852      	ldr	r2, [r2, #4]
 8006498:	0852      	lsrs	r2, r2, #1
 800649a:	4611      	mov	r1, r2
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	eb13 0b01 	adds.w	fp, r3, r1
 80064a4:	eb44 0c02 	adc.w	ip, r4, r2
 80064a8:	4658      	mov	r0, fp
 80064aa:	4661      	mov	r1, ip
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f04f 0400 	mov.w	r4, #0
 80064b4:	461a      	mov	r2, r3
 80064b6:	4623      	mov	r3, r4
 80064b8:	f7f9 fe90 	bl	80001dc <__aeabi_uldivmod>
 80064bc:	4603      	mov	r3, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80064c2:	e025      	b.n	8006510 <UART_SetConfig+0x374>
 80064c4:	efff69f3 	.word	0xefff69f3
 80064c8:	40008000 	.word	0x40008000
 80064cc:	40013800 	.word	0x40013800
 80064d0:	40021000 	.word	0x40021000
 80064d4:	40004400 	.word	0x40004400
 80064d8:	00f42400 	.word	0x00f42400
 80064dc:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	085b      	lsrs	r3, r3, #1
 80064e6:	f04f 0400 	mov.w	r4, #0
 80064ea:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80064ee:	f144 0100 	adc.w	r1, r4, #0
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f04f 0400 	mov.w	r4, #0
 80064fa:	461a      	mov	r2, r3
 80064fc:	4623      	mov	r3, r4
 80064fe:	f7f9 fe6d 	bl	80001dc <__aeabi_uldivmod>
 8006502:	4603      	mov	r3, r0
 8006504:	460c      	mov	r4, r1
 8006506:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006508:	e002      	b.n	8006510 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	74fb      	strb	r3, [r7, #19]
            break;
 800650e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006516:	d308      	bcc.n	800652a <UART_SetConfig+0x38e>
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800651e:	d204      	bcs.n	800652a <UART_SetConfig+0x38e>
        {
          huart->Instance->BRR = usartdiv;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	60da      	str	r2, [r3, #12]
 8006528:	e0f5      	b.n	8006716 <UART_SetConfig+0x57a>
        }
        else
        {
          ret = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	74fb      	strb	r3, [r7, #19]
 800652e:	e0f2      	b.n	8006716 <UART_SetConfig+0x57a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006538:	d17f      	bne.n	800663a <UART_SetConfig+0x49e>
  {
    switch (clocksource)
 800653a:	7efb      	ldrb	r3, [r7, #27]
 800653c:	2b08      	cmp	r3, #8
 800653e:	d85c      	bhi.n	80065fa <UART_SetConfig+0x45e>
 8006540:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <UART_SetConfig+0x3ac>)
 8006542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006546:	bf00      	nop
 8006548:	0800656d 	.word	0x0800656d
 800654c:	0800658b 	.word	0x0800658b
 8006550:	080065a9 	.word	0x080065a9
 8006554:	080065fb 	.word	0x080065fb
 8006558:	080065c5 	.word	0x080065c5
 800655c:	080065fb 	.word	0x080065fb
 8006560:	080065fb 	.word	0x080065fb
 8006564:	080065fb 	.word	0x080065fb
 8006568:	080065e3 	.word	0x080065e3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800656c:	f7ff f9b6 	bl	80058dc <HAL_RCC_GetPCLK1Freq>
 8006570:	4603      	mov	r3, r0
 8006572:	005a      	lsls	r2, r3, #1
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	085b      	lsrs	r3, r3, #1
 800657a:	441a      	add	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	fbb2 f3f3 	udiv	r3, r2, r3
 8006584:	b29b      	uxth	r3, r3
 8006586:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006588:	e03a      	b.n	8006600 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800658a:	f7ff f9bd 	bl	8005908 <HAL_RCC_GetPCLK2Freq>
 800658e:	4603      	mov	r3, r0
 8006590:	005a      	lsls	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	085b      	lsrs	r3, r3, #1
 8006598:	441a      	add	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80065a6:	e02b      	b.n	8006600 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	085b      	lsrs	r3, r3, #1
 80065ae:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80065b2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6852      	ldr	r2, [r2, #4]
 80065ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80065be:	b29b      	uxth	r3, r3
 80065c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80065c2:	e01d      	b.n	8006600 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80065c4:	f7ff f8f4 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 80065c8:	4603      	mov	r3, r0
 80065ca:	005a      	lsls	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	085b      	lsrs	r3, r3, #1
 80065d2:	441a      	add	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065dc:	b29b      	uxth	r3, r3
 80065de:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80065e0:	e00e      	b.n	8006600 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	085b      	lsrs	r3, r3, #1
 80065e8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80065f8:	e002      	b.n	8006600 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	74fb      	strb	r3, [r7, #19]
        break;
 80065fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2b0f      	cmp	r3, #15
 8006604:	d916      	bls.n	8006634 <UART_SetConfig+0x498>
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660c:	d212      	bcs.n	8006634 <UART_SetConfig+0x498>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	b29b      	uxth	r3, r3
 8006612:	f023 030f 	bic.w	r3, r3, #15
 8006616:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	085b      	lsrs	r3, r3, #1
 800661c:	b29b      	uxth	r3, r3
 800661e:	f003 0307 	and.w	r3, r3, #7
 8006622:	b29a      	uxth	r2, r3
 8006624:	897b      	ldrh	r3, [r7, #10]
 8006626:	4313      	orrs	r3, r2
 8006628:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	897a      	ldrh	r2, [r7, #10]
 8006630:	60da      	str	r2, [r3, #12]
 8006632:	e070      	b.n	8006716 <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	74fb      	strb	r3, [r7, #19]
 8006638:	e06d      	b.n	8006716 <UART_SetConfig+0x57a>
    }
  }
  else
  {
    switch (clocksource)
 800663a:	7efb      	ldrb	r3, [r7, #27]
 800663c:	2b08      	cmp	r3, #8
 800663e:	d859      	bhi.n	80066f4 <UART_SetConfig+0x558>
 8006640:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0x4ac>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	0800666d 	.word	0x0800666d
 800664c:	08006689 	.word	0x08006689
 8006650:	080066a5 	.word	0x080066a5
 8006654:	080066f5 	.word	0x080066f5
 8006658:	080066c1 	.word	0x080066c1
 800665c:	080066f5 	.word	0x080066f5
 8006660:	080066f5 	.word	0x080066f5
 8006664:	080066f5 	.word	0x080066f5
 8006668:	080066dd 	.word	0x080066dd
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800666c:	f7ff f936 	bl	80058dc <HAL_RCC_GetPCLK1Freq>
 8006670:	4602      	mov	r2, r0
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	085b      	lsrs	r3, r3, #1
 8006678:	441a      	add	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006682:	b29b      	uxth	r3, r3
 8006684:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006686:	e038      	b.n	80066fa <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006688:	f7ff f93e 	bl	8005908 <HAL_RCC_GetPCLK2Freq>
 800668c:	4602      	mov	r2, r0
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	441a      	add	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	fbb2 f3f3 	udiv	r3, r2, r3
 800669e:	b29b      	uxth	r3, r3
 80066a0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066a2:	e02a      	b.n	80066fa <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	085b      	lsrs	r3, r3, #1
 80066aa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80066ae:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6852      	ldr	r2, [r2, #4]
 80066b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066be:	e01c      	b.n	80066fa <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80066c0:	f7ff f876 	bl	80057b0 <HAL_RCC_GetSysClockFreq>
 80066c4:	4602      	mov	r2, r0
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	441a      	add	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066da:	e00e      	b.n	80066fa <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	085b      	lsrs	r3, r3, #1
 80066e2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80066f2:	e002      	b.n	80066fa <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	74fb      	strb	r3, [r7, #19]
        break;
 80066f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b0f      	cmp	r3, #15
 80066fe:	d908      	bls.n	8006712 <UART_SetConfig+0x576>
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006706:	d204      	bcs.n	8006712 <UART_SetConfig+0x576>
    {
      huart->Instance->BRR = usartdiv;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	60da      	str	r2, [r3, #12]
 8006710:	e001      	b.n	8006716 <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006722:	7cfb      	ldrb	r3, [r7, #19]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3720      	adds	r7, #32
 8006728:	46bd      	mov	sp, r7
 800672a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800672e:	bf00      	nop

08006730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	f003 0304 	and.w	r3, r3, #4
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	430a      	orrs	r2, r1
 80067be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c4:	f003 0310 	and.w	r3, r3, #16
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01a      	beq.n	8006846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800682e:	d10a      	bne.n	8006846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	605a      	str	r2, [r3, #4]
  }
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af02      	add	r7, sp, #8
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006882:	f7fd fbb7 	bl	8003ff4 <HAL_GetTick>
 8006886:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0308 	and.w	r3, r3, #8
 8006892:	2b08      	cmp	r3, #8
 8006894:	d10e      	bne.n	80068b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006896:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f82a 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e020      	b.n	80068f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d10e      	bne.n	80068e0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f814 	bl	80068fe <UART_WaitOnFlagUntilTimeout>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e00a      	b.n	80068f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	603b      	str	r3, [r7, #0]
 800690a:	4613      	mov	r3, r2
 800690c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800690e:	e02a      	b.n	8006966 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006916:	d026      	beq.n	8006966 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006918:	f7fd fb6c 	bl	8003ff4 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <UART_WaitOnFlagUntilTimeout+0x30>
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d11b      	bne.n	8006966 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800693c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0201 	bic.w	r2, r2, #1
 800694c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2220      	movs	r2, #32
 8006952:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2220      	movs	r2, #32
 8006958:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e00f      	b.n	8006986 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69da      	ldr	r2, [r3, #28]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4013      	ands	r3, r2
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	429a      	cmp	r2, r3
 8006974:	bf0c      	ite	eq
 8006976:	2301      	moveq	r3, #1
 8006978:	2300      	movne	r3, #0
 800697a:	b2db      	uxtb	r3, r3
 800697c:	461a      	mov	r2, r3
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	429a      	cmp	r2, r3
 8006982:	d0c5      	beq.n	8006910 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <__libc_init_array>:
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	4e0d      	ldr	r6, [pc, #52]	; (80069c8 <__libc_init_array+0x38>)
 8006994:	4c0d      	ldr	r4, [pc, #52]	; (80069cc <__libc_init_array+0x3c>)
 8006996:	1ba4      	subs	r4, r4, r6
 8006998:	10a4      	asrs	r4, r4, #2
 800699a:	2500      	movs	r5, #0
 800699c:	42a5      	cmp	r5, r4
 800699e:	d109      	bne.n	80069b4 <__libc_init_array+0x24>
 80069a0:	4e0b      	ldr	r6, [pc, #44]	; (80069d0 <__libc_init_array+0x40>)
 80069a2:	4c0c      	ldr	r4, [pc, #48]	; (80069d4 <__libc_init_array+0x44>)
 80069a4:	f000 f820 	bl	80069e8 <_init>
 80069a8:	1ba4      	subs	r4, r4, r6
 80069aa:	10a4      	asrs	r4, r4, #2
 80069ac:	2500      	movs	r5, #0
 80069ae:	42a5      	cmp	r5, r4
 80069b0:	d105      	bne.n	80069be <__libc_init_array+0x2e>
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069b8:	4798      	blx	r3
 80069ba:	3501      	adds	r5, #1
 80069bc:	e7ee      	b.n	800699c <__libc_init_array+0xc>
 80069be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069c2:	4798      	blx	r3
 80069c4:	3501      	adds	r5, #1
 80069c6:	e7f2      	b.n	80069ae <__libc_init_array+0x1e>
 80069c8:	08006a68 	.word	0x08006a68
 80069cc:	08006a68 	.word	0x08006a68
 80069d0:	08006a68 	.word	0x08006a68
 80069d4:	08006a6c 	.word	0x08006a6c

080069d8 <memset>:
 80069d8:	4402      	add	r2, r0
 80069da:	4603      	mov	r3, r0
 80069dc:	4293      	cmp	r3, r2
 80069de:	d100      	bne.n	80069e2 <memset+0xa>
 80069e0:	4770      	bx	lr
 80069e2:	f803 1b01 	strb.w	r1, [r3], #1
 80069e6:	e7f9      	b.n	80069dc <memset+0x4>

080069e8 <_init>:
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	bf00      	nop
 80069ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ee:	bc08      	pop	{r3}
 80069f0:	469e      	mov	lr, r3
 80069f2:	4770      	bx	lr

080069f4 <_fini>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	bf00      	nop
 80069f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fa:	bc08      	pop	{r3}
 80069fc:	469e      	mov	lr, r3
 80069fe:	4770      	bx	lr
